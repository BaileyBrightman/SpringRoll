{
    "project": {
        "name": "SpringRoll",
        "description": "An application framework for building HTML5 Canvas games and applications",
        "version": "0.3.12",
        "url": "https://github.com/SpringRoll/SpringRoll"
    },
    "files": {
        "src/container/Container.js": {
            "name": "src/container/Container.js",
            "modules": {},
            "classes": {
                "springroll.Container": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/container/ContainerPlugin.js": {
            "name": "src/container/ContainerPlugin.js",
            "modules": {
                "Container Client": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/container/Features.js": {
            "name": "src/container/Features.js",
            "modules": {
                "Container": 1
            },
            "classes": {
                "springroll.Features": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/async/CombinedCallback.js": {
            "name": "src/core/async/CombinedCallback.js",
            "modules": {},
            "classes": {
                "springroll.CombinedCallback": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/async/DelayedCall.js": {
            "name": "src/core/async/DelayedCall.js",
            "modules": {},
            "classes": {
                "springroll.DelayedCall": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/async/async.js": {
            "name": "src/core/async/async.js",
            "modules": {},
            "classes": {
                "window.async": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/core/utils/Enum.js": {
            "name": "src/core/utils/Enum.js",
            "modules": {},
            "classes": {
                "springroll.EnumValue": 1,
                "springroll.Enum": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/utils/SavedData.js": {
            "name": "src/core/utils/SavedData.js",
            "modules": {},
            "classes": {
                "springroll.SavedData": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/utils/TimeUtils.js": {
            "name": "src/core/utils/TimeUtils.js",
            "modules": {},
            "classes": {
                "springroll.TimeUtils": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/utils/WeightedRandom.js": {
            "name": "src/core/utils/WeightedRandom.js",
            "modules": {},
            "classes": {
                "springroll.WeightedRandom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ApplicationOptions.js": {
            "name": "src/core/ApplicationOptions.js",
            "modules": {},
            "classes": {
                "springroll.ApplicationOptions": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/ApplicationPlugin.js": {
            "name": "src/core/ApplicationPlugin.js",
            "modules": {},
            "classes": {
                "springroll.ApplicationPlugin": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/PageVisibility.js": {
            "name": "src/core/PageVisibility.js",
            "modules": {},
            "classes": {
                "springroll.PageVisibility": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/PageVisibilityPlugin.js": {
            "name": "src/core/PageVisibilityPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/ResizePlugin.js": {
            "name": "src/core/ResizePlugin.js",
            "modules": {},
            "classes": {
                "springroll.ResizePlugin": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/StringFilters.js": {
            "name": "src/core/StringFilters.js",
            "modules": {},
            "classes": {
                "springroll.StringFilters": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/core/StringFiltersPlugin.js": {
            "name": "src/core/StringFiltersPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/debug/Debug.js": {
            "name": "src/debug/Debug.js",
            "modules": {
                "Debug": 1
            },
            "classes": {
                "springroll.Debug": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/debug/DebugOptions.js": {
            "name": "src/debug/DebugOptions.js",
            "modules": {},
            "classes": {
                "springroll.DebugOptions": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/debug/DebugPlugin.js": {
            "name": "src/debug/DebugPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/easeljs/animation/Animator.js": {
            "name": "src/displays/easeljs/animation/Animator.js",
            "modules": {
                "EaselJS Animation": 1
            },
            "classes": {
                "springroll.easeljs.Animator": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/animation/AnimatorPlugin.js": {
            "name": "src/displays/easeljs/animation/AnimatorPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/easeljs/animation/AnimatorTimeline.js": {
            "name": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/animation/BitmapMovieClip.js": {
            "name": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.BitmapMovieClip": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/animation/ReversePlayback.js": {
            "name": "src/displays/easeljs/animation/ReversePlayback.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.ReversePlayback": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/animation/TextureAtlas.js": {
            "name": "src/displays/easeljs/animation/TextureAtlas.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.TextureAtlas": 1,
                "springroll.easeljs.Texture": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/cutscene/Cutscene.js": {
            "name": "src/displays/easeljs/cutscene/Cutscene.js",
            "modules": {
                "EaselJS Cutscene": 1
            },
            "classes": {
                "springroll.easeljs.Cutscene": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/learning/DwellTimer.js": {
            "name": "src/displays/easeljs/learning/DwellTimer.js",
            "modules": {
                "EaselJS Learning": 1
            },
            "classes": {
                "springroll.easeljs.DwellTimer": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/learning/OffClickPlugin.js": {
            "name": "src/displays/easeljs/learning/OffClickPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/easeljs/mixins/Container.js": {
            "name": "src/displays/easeljs/mixins/Container.js",
            "modules": {},
            "classes": {
                "createjs.Container": 1
            },
            "fors": {},
            "namespaces": {
                "createjs": 1
            }
        },
        "src/displays/easeljs/mixins/MovieClip.js": {
            "name": "src/displays/easeljs/mixins/MovieClip.js",
            "modules": {},
            "classes": {
                "createjs.MovieClip": 1
            },
            "fors": {},
            "namespaces": {
                "createjs": 1
            }
        },
        "src/displays/easeljs/mixins/Point.js": {
            "name": "src/displays/easeljs/mixins/Point.js",
            "modules": {},
            "classes": {
                "createjs.Point": 1
            },
            "fors": {},
            "namespaces": {
                "createjs": 1
            }
        },
        "src/displays/easeljs/states/BasePanel.js": {
            "name": "src/displays/easeljs/states/BasePanel.js",
            "modules": {
                "EaselJS States": 1
            },
            "classes": {
                "springroll.easeljs.BasePanel": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/states/BaseState.js": {
            "name": "src/displays/easeljs/states/BaseState.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.BaseState": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/states/ManifestsPlugin.js": {
            "name": "src/displays/easeljs/states/ManifestsPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/easeljs/ui/AssetManager.js": {
            "name": "src/displays/easeljs/ui/AssetManager.js",
            "modules": {
                "EaselJS UI": 1
            },
            "classes": {
                "springroll.easeljs.AssetManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/ui/AssetManagerPlugin.js": {
            "name": "src/displays/easeljs/ui/AssetManagerPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/easeljs/ui/Button.js": {
            "name": "src/displays/easeljs/ui/Button.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.Button": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/ui/DragData.js": {
            "name": "src/displays/easeljs/ui/DragData.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/ui/DragManager.js": {
            "name": "src/displays/easeljs/ui/DragManager.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.DragManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/ui/SoundButton.js": {
            "name": "src/displays/easeljs/ui/SoundButton.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.SoundButton": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/utils/BitmapUtils.js": {
            "name": "src/displays/easeljs/utils/BitmapUtils.js",
            "modules": {
                "EaselJS Utilities": 1
            },
            "classes": {
                "springroll.easeljs.BitmapUtils": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/DisplayAdapter.js": {
            "name": "src/displays/easeljs/DisplayAdapter.js",
            "modules": {
                "EaselJS Display": 1
            },
            "classes": {
                "springroll.easeljs.DisplayAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/easeljs/EaselJSDisplay.js": {
            "name": "src/displays/easeljs/EaselJSDisplay.js",
            "modules": {},
            "classes": {
                "springroll.easeljs.EaselJSDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            }
        },
        "src/displays/native/geom/Circle.js": {
            "name": "src/displays/native/geom/Circle.js",
            "modules": {
                "Native Display": 1
            },
            "classes": {
                "springroll.native.Circle": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/geom/Ellipse.js": {
            "name": "src/displays/native/geom/Ellipse.js",
            "modules": {},
            "classes": {
                "springroll.native.Ellipse": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/geom/Point.js": {
            "name": "src/displays/native/geom/Point.js",
            "modules": {},
            "classes": {
                "springroll.native.Point": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/geom/Polygon.js": {
            "name": "src/displays/native/geom/Polygon.js",
            "modules": {},
            "classes": {
                "springroll.native.Polygon": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/geom/Rectangle.js": {
            "name": "src/displays/native/geom/Rectangle.js",
            "modules": {},
            "classes": {
                "springroll.native.Rectangle": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/DisplayAdapter.js": {
            "name": "src/displays/native/DisplayAdapter.js",
            "modules": {},
            "classes": {
                "springroll.native.DisplayAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/native/NativeDisplay.js": {
            "name": "src/displays/native/NativeDisplay.js",
            "modules": {},
            "classes": {
                "springroll.native.NativeDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            }
        },
        "src/displays/pixi/animation/Animator.js": {
            "name": "src/displays/pixi/animation/Animator.js",
            "modules": {
                "PIXI Animation": 1
            },
            "classes": {
                "springroll.pixi.Animator": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/animation/AnimatorPlugin.js": {
            "name": "src/displays/pixi/animation/AnimatorPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/displays/pixi/animation/AnimatorTimeline.js": {
            "name": "src/displays/pixi/animation/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "springroll.pixi.AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/animation/ParallelSpineData.js": {
            "name": "src/displays/pixi/animation/ParallelSpineData.js",
            "modules": {},
            "classes": {
                "springroll.pixi.ParallelSpineData": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/ui/AssetManager.js": {
            "name": "src/displays/pixi/ui/AssetManager.js",
            "modules": {
                "PIXI UI": 1
            },
            "classes": {
                "springroll.pixi.AssetManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/ui/Button.js": {
            "name": "src/displays/pixi/ui/Button.js",
            "modules": {},
            "classes": {
                "springroll.pixi.Button": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/ui/DragData.js": {
            "name": "src/displays/pixi/ui/DragData.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/ui/DragManager.js": {
            "name": "src/displays/pixi/ui/DragManager.js",
            "modules": {},
            "classes": {
                "springroll.pixi.DragManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/DisplayAdapter.js": {
            "name": "src/displays/pixi/DisplayAdapter.js",
            "modules": {
                "PIXI Display": 1
            },
            "classes": {
                "springroll.pixi.DisplayAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/pixi/PixiDisplay.js": {
            "name": "src/displays/pixi/PixiDisplay.js",
            "modules": {},
            "classes": {
                "springroll.pixi.PixiDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            }
        },
        "src/displays/AbstractDisplay.js": {
            "name": "src/displays/AbstractDisplay.js",
            "modules": {},
            "classes": {
                "springroll.AbstractDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/events/EventDispatcher.js": {
            "name": "src/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "springroll.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/events/PropertyDispatcher.js": {
            "name": "src/events/PropertyDispatcher.js",
            "modules": {},
            "classes": {
                "springroll.PropertyDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/AbstractHint.js": {
            "name": "src/hints/AbstractHint.js",
            "modules": {
                "Hints": 1
            },
            "classes": {
                "springroll.AbstractHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/AnimatorHint.js": {
            "name": "src/hints/AnimatorHint.js",
            "modules": {},
            "classes": {
                "springroll.AnimatorHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/FunctionHint.js": {
            "name": "src/hints/FunctionHint.js",
            "modules": {},
            "classes": {
                "springroll.FunctionHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/GroupHint.js": {
            "name": "src/hints/GroupHint.js",
            "modules": {},
            "classes": {
                "springroll.GroupHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/HintsPlayer.js": {
            "name": "src/hints/HintsPlayer.js",
            "modules": {},
            "classes": {
                "springroll.HintsPlayer": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/HintsPlugin.js": {
            "name": "src/hints/HintsPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/hints/VOHint.js": {
            "name": "src/hints/VOHint.js",
            "modules": {},
            "classes": {
                "springroll.VOHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/languages/Languages.js": {
            "name": "src/languages/Languages.js",
            "modules": {
                "Languages": 1
            },
            "classes": {
                "springroll.Languages": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/languages/LanguagesPlugin.js": {
            "name": "src/languages/LanguagesPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/EventCatalog.js": {
            "name": "src/learning/EventCatalog.js",
            "modules": {},
            "classes": {
                "springroll.EventCatalog": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/EventError.js": {
            "name": "src/learning/EventError.js",
            "modules": {},
            "classes": {
                "springroll.EventError": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/EventSignature.js": {
            "name": "src/learning/EventSignature.js",
            "modules": {},
            "classes": {
                "springroll.EventSignature": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/EventUtils.js": {
            "name": "src/learning/EventUtils.js",
            "modules": {},
            "classes": {
                "springroll.EventUtils": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/Learning.js": {
            "name": "src/learning/Learning.js",
            "modules": {},
            "classes": {
                "springroll.Learning": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/LearningError.js": {
            "name": "src/learning/LearningError.js",
            "modules": {},
            "classes": {
                "springroll.LearningError": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/LearningMedia.js": {
            "name": "src/learning/LearningMedia.js",
            "modules": {
                "Learning Media": 1
            },
            "classes": {
                "springroll.LearningMedia": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/LearningMediaPlugin.js": {
            "name": "src/learning/LearningMediaPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/LearningPlugin.js": {
            "name": "src/learning/LearningPlugin.js",
            "modules": {
                "Learning": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/learning/ValidationError.js": {
            "name": "src/learning/ValidationError.js",
            "modules": {},
            "classes": {
                "springroll.ValidationError": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/loaders/CacheManager.js": {
            "name": "src/loaders/CacheManager.js",
            "modules": {},
            "classes": {
                "springroll.CacheManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/loaders/Loader.js": {
            "name": "src/loaders/Loader.js",
            "modules": {},
            "classes": {
                "springroll.Loader": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/loaders/LoaderPlugin.js": {
            "name": "src/loaders/LoaderPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/loaders/LoaderQueueItem.js": {
            "name": "src/loaders/LoaderQueueItem.js",
            "modules": {},
            "classes": {
                "springroll.LoaderQueueItem": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/loaders/LoaderResult.js": {
            "name": "src/loaders/LoaderResult.js",
            "modules": {},
            "classes": {
                "springroll.LoaderResult": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/Captions.js": {
            "name": "src/media/Captions.js",
            "modules": {
                "Captions": 1
            },
            "classes": {
                "springroll.Captions": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/CaptionsPlugin.js": {
            "name": "src/media/CaptionsPlugin.js",
            "modules": {
                "Sound": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/Sound.js": {
            "name": "src/media/Sound.js",
            "modules": {},
            "classes": {
                "springroll.Sound": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/SoundContext.js": {
            "name": "src/media/SoundContext.js",
            "modules": {},
            "classes": {
                "springroll.SoundContext": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/SoundInstance.js": {
            "name": "src/media/SoundInstance.js",
            "modules": {},
            "classes": {
                "springroll.SoundInstance": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/SoundListTask.js": {
            "name": "src/media/SoundListTask.js",
            "modules": {},
            "classes": {
                "springroll.SoundListTask": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/SoundPlugin.js": {
            "name": "src/media/SoundPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/media/VOPlayer.js": {
            "name": "src/media/VOPlayer.js",
            "modules": {},
            "classes": {
                "springroll.VOPlayer": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/mixins/Array.js": {
            "name": "src/mixins/Array.js",
            "modules": {},
            "classes": {
                "window.Array": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/mixins/Math.js": {
            "name": "src/mixins/Math.js",
            "modules": {},
            "classes": {
                "window.Math": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/mixins/Number.js": {
            "name": "src/mixins/Number.js",
            "modules": {},
            "classes": {
                "window.Number": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/mixins/Object.js": {
            "name": "src/mixins/Object.js",
            "modules": {},
            "classes": {
                "window.Object": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/mixins/String.js": {
            "name": "src/mixins/String.js",
            "modules": {},
            "classes": {
                "window.String": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/states/State.js": {
            "name": "src/states/State.js",
            "modules": {
                "States": 1
            },
            "classes": {
                "springroll.State": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/states/StateEvent.js": {
            "name": "src/states/StateEvent.js",
            "modules": {},
            "classes": {
                "springroll.StateEvent": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/states/StateManager.js": {
            "name": "src/states/StateManager.js",
            "modules": {},
            "classes": {
                "springroll.StateManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/states/StatesPlugin.js": {
            "name": "src/states/StatesPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/ConfigPlugin.js": {
            "name": "src/tasks/ConfigPlugin.js",
            "modules": {
                "Tasks": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/FunctionTask.js": {
            "name": "src/tasks/FunctionTask.js",
            "modules": {},
            "classes": {
                "springroll.FunctionTask": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/ListTask.js": {
            "name": "src/tasks/ListTask.js",
            "modules": {},
            "classes": {
                "springroll.ListTask": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/LoadTask.js": {
            "name": "src/tasks/LoadTask.js",
            "modules": {},
            "classes": {
                "springroll.LoadTask": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/PixiTask.js": {
            "name": "src/tasks/PixiTask.js",
            "modules": {},
            "classes": {
                "springroll.PixiTask": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/Task.js": {
            "name": "src/tasks/Task.js",
            "modules": {},
            "classes": {
                "springroll.Task": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/TaskEvent.js": {
            "name": "src/tasks/TaskEvent.js",
            "modules": {},
            "classes": {
                "springroll.TaskEvent": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/tasks/TaskManager.js": {
            "name": "src/tasks/TaskManager.js",
            "modules": {},
            "classes": {
                "springroll.TaskManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/ui/Positioner.js": {
            "name": "src/ui/Positioner.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "springroll.Positioner": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/ui/ScaleItem.js": {
            "name": "src/ui/ScaleItem.js",
            "modules": {},
            "classes": {
                "springroll.ScaleItem": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/ui/ScaleManager.js": {
            "name": "src/ui/ScaleManager.js",
            "modules": {},
            "classes": {
                "springroll.ScaleManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/ui/ScalingPlugin.js": {
            "name": "src/ui/ScalingPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/ui/TouchPlugin.js": {
            "name": "src/ui/TouchPlugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        },
        "src/utils/extend.js": {
            "name": "src/utils/extend.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "window.extend": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/utils/include.js": {
            "name": "src/utils/include.js",
            "modules": {},
            "classes": {
                "window.include": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/utils/mixin.js": {
            "name": "src/utils/mixin.js",
            "modules": {},
            "classes": {
                "window.mixin": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/utils/namespace.js": {
            "name": "src/utils/namespace.js",
            "modules": {},
            "classes": {
                "window.namespace": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "src/Application.js": {
            "name": "src/Application.js",
            "modules": {},
            "classes": {
                "springroll.Application": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            }
        }
    },
    "modules": {
        "Container": {
            "name": "Container",
            "submodules": {},
            "classes": {
                "springroll.Container": 1,
                "springroll.Features": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/container/Features.js",
            "line": 9
        },
        "Container Client": {
            "name": "Container Client",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/container/ContainerPlugin.js",
            "line": 1
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "springroll.Application": 1,
                "springroll.CombinedCallback": 1,
                "springroll.DelayedCall": 1,
                "window.async": 1,
                "springroll.EnumValue": 1,
                "springroll.Enum": 1,
                "springroll.SavedData": 1,
                "springroll.TimeUtils": 1,
                "springroll.WeightedRandom": 1,
                "springroll.ApplicationOptions": 1,
                "springroll.ApplicationPlugin": 1,
                "springroll.PageVisibility": 1,
                "springroll.ResizePlugin": 1,
                "springroll.StringFilters": 1,
                "springroll.AbstractDisplay": 1,
                "springroll.EventDispatcher": 1,
                "springroll.PropertyDispatcher": 1,
                "springroll.CacheManager": 1,
                "springroll.Loader": 1,
                "springroll.LoaderQueueItem": 1,
                "springroll.LoaderResult": 1,
                "window.Array": 1,
                "window.Math": 1,
                "window.Number": 1,
                "window.Object": 1,
                "window.String": 1,
                "window.extend": 1,
                "window.include": 1,
                "window.mixin": 1,
                "window.namespace": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1,
                "window": 1
            },
            "tag": "module",
            "file": "src/utils/namespace.js",
            "line": 5
        },
        "Debug": {
            "name": "Debug",
            "submodules": {},
            "classes": {
                "springroll.Debug": 1,
                "springroll.DebugOptions": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/debug/DebugOptions.js",
            "line": 7
        },
        "EaselJS Animation": {
            "name": "EaselJS Animation",
            "submodules": {},
            "classes": {
                "springroll.easeljs.Animator": 1,
                "springroll.easeljs.AnimatorTimeline": 1,
                "springroll.easeljs.BitmapMovieClip": 1,
                "springroll.easeljs.ReversePlayback": 1,
                "springroll.easeljs.TextureAtlas": 1,
                "springroll.easeljs.Texture": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1,
                "springroll": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 184,
            "requires": [
                "Core",
                "EaselJS Display"
            ]
        },
        "EaselJS Cutscene": {
            "name": "EaselJS Cutscene",
            "submodules": {},
            "classes": {
                "springroll.easeljs.Cutscene": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 17,
            "requires": [
                "Core",
                "Tasks",
                "EaselJS Display",
                "EaselJS Utilities"
            ]
        },
        "EaselJS Learning": {
            "name": "EaselJS Learning",
            "submodules": {},
            "classes": {
                "springroll.easeljs.DwellTimer": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1,
                "springroll": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 10,
            "requires": [
                "Core",
                "Learning"
            ]
        },
        "EaselJS Display": {
            "name": "EaselJS Display",
            "submodules": {},
            "classes": {
                "createjs.Container": 1,
                "createjs.MovieClip": 1,
                "createjs.Point": 1,
                "springroll.easeljs.DisplayAdapter": 1,
                "springroll.easeljs.EaselJSDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "createjs": 1,
                "springroll.easeljs": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 13,
            "requires": [
                "Core"
            ]
        },
        "EaselJS States": {
            "name": "EaselJS States",
            "submodules": {},
            "classes": {
                "springroll.easeljs.BasePanel": 1,
                "springroll.easeljs.BaseState": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1,
                "springroll": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 16,
            "requires": [
                "Core",
                "States",
                "Tasks",
                "UI",
                "Sound",
                "EaselJS Display",
                "EaselJS UI"
            ]
        },
        "EaselJS UI": {
            "name": "EaselJS UI",
            "submodules": {},
            "classes": {
                "springroll.easeljs.AssetManager": 1,
                "springroll.easeljs.Button": 1,
                "springroll.easeljs.DragManager": 1,
                "springroll.easeljs.SoundButton": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1,
                "springroll": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 11,
            "requires": [
                "Core",
                "EaselJS Display",
                "Tasks"
            ]
        },
        "EaselJS Utilities": {
            "name": "EaselJS Utilities",
            "submodules": {},
            "classes": {
                "springroll.easeljs.BitmapUtils": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.easeljs": 1
            },
            "tag": "module",
            "file": "src/displays/easeljs/utils/BitmapUtils.js",
            "line": 12,
            "requires": [
                "Core",
                "EaselJS Display"
            ]
        },
        "Native Display": {
            "name": "Native Display",
            "submodules": {},
            "classes": {
                "springroll.native.Circle": 1,
                "springroll.native.Ellipse": 1,
                "springroll.native.Point": 1,
                "springroll.native.Polygon": 1,
                "springroll.native.Rectangle": 1,
                "springroll.native.DisplayAdapter": 1,
                "springroll.native.NativeDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.native": 1
            },
            "tag": "module",
            "file": "src/displays/native/NativeDisplay.js",
            "line": 10,
            "requires": [
                "Core"
            ]
        },
        "PIXI Animation": {
            "name": "PIXI Animation",
            "submodules": {},
            "classes": {
                "springroll.pixi.Animator": 1,
                "springroll.pixi.AnimatorTimeline": 1,
                "springroll.pixi.ParallelSpineData": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1,
                "springroll": 1
            },
            "tag": "module",
            "file": "src/displays/pixi/animation/ParallelSpineData.js",
            "line": 8,
            "requires": [
                "Core",
                "PIXI Display"
            ]
        },
        "PIXI UI": {
            "name": "PIXI UI",
            "submodules": {},
            "classes": {
                "springroll.pixi.AssetManager": 1,
                "springroll.pixi.Button": 1,
                "springroll.pixi.DragManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            },
            "tag": "module",
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 14,
            "requires": [
                "Core",
                "PIXI Display"
            ]
        },
        "PIXI Display": {
            "name": "PIXI Display",
            "submodules": {},
            "classes": {
                "springroll.pixi.DisplayAdapter": 1,
                "springroll.pixi.PixiDisplay": 1
            },
            "fors": {},
            "namespaces": {
                "springroll.pixi": 1
            },
            "tag": "module",
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 14,
            "requires": [
                "Core"
            ]
        },
        "Hints": {
            "name": "Hints",
            "submodules": {},
            "classes": {
                "springroll.AbstractHint": 1,
                "springroll.AnimatorHint": 1,
                "springroll.FunctionHint": 1,
                "springroll.GroupHint": 1,
                "springroll.HintsPlayer": 1,
                "springroll.VOHint": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/hints/VOHint.js",
            "line": 11,
            "requires": [
                "Core",
                "Sound",
                "Learning"
            ]
        },
        "Languages": {
            "name": "Languages",
            "submodules": {},
            "classes": {
                "springroll.Languages": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/languages/Languages.js",
            "line": 11,
            "requires": [
                "Core"
            ]
        },
        "Learning": {
            "name": "Learning",
            "submodules": {},
            "classes": {
                "springroll.EventCatalog": 1,
                "springroll.EventError": 1,
                "springroll.EventSignature": 1,
                "springroll.EventUtils": 1,
                "springroll.Learning": 1,
                "springroll.LearningError": 1,
                "springroll.ValidationError": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/learning/ValidationError.js",
            "line": 10,
            "requires": [
                "Core"
            ]
        },
        "Learning Media": {
            "name": "Learning Media",
            "submodules": {},
            "classes": {
                "springroll.LearningMedia": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/learning/LearningMedia.js",
            "line": 11,
            "requires": [
                "Core",
                "Learning",
                "Sound",
                "Captions"
            ]
        },
        "Captions": {
            "name": "Captions",
            "submodules": {},
            "classes": {
                "springroll.Captions": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/media/Captions.js",
            "line": 12,
            "requires": [
                "Core"
            ]
        },
        "Sound": {
            "name": "Sound",
            "submodules": {},
            "classes": {
                "springroll.Sound": 1,
                "springroll.SoundContext": 1,
                "springroll.SoundInstance": 1,
                "springroll.SoundListTask": 1,
                "springroll.VOPlayer": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/media/VOPlayer.js",
            "line": 14,
            "requires": [
                "Core"
            ]
        },
        "States": {
            "name": "States",
            "submodules": {},
            "classes": {
                "springroll.State": 1,
                "springroll.StateEvent": 1,
                "springroll.StateManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/states/StateManager.js",
            "line": 14,
            "requires": [
                "Core"
            ]
        },
        "Tasks": {
            "name": "Tasks",
            "submodules": {},
            "classes": {
                "springroll.FunctionTask": 1,
                "springroll.ListTask": 1,
                "springroll.LoadTask": 1,
                "springroll.PixiTask": 1,
                "springroll.Task": 1,
                "springroll.TaskEvent": 1,
                "springroll.TaskManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/tasks/TaskManager.js",
            "line": 13,
            "requires": [
                "Core"
            ]
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "classes": {
                "springroll.Positioner": 1,
                "springroll.ScaleItem": 1,
                "springroll.ScaleManager": 1
            },
            "fors": {},
            "namespaces": {
                "springroll": 1
            },
            "tag": "module",
            "file": "src/ui/ScaleManager.js",
            "line": 14,
            "requires": [
                "Core"
            ]
        }
    },
    "classes": {
        "springroll.Container": {
            "name": "springroll.Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Container",
            "namespace": "springroll",
            "file": "src/container/Container.js",
            "line": 15,
            "description": "The application container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "iframeSelector",
                    "description": "jQuery selector for application iframe container",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Optional parameteres",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "helpButton",
                            "description": "jQuery selector for help button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "captionsButton",
                            "description": "jQuery selector for captions button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "soundButton",
                            "description": "jQuery selector for captions button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "voButton",
                            "description": "jQuery selector for vo button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sfxButton",
                            "description": "jQuery selector for sounf effects button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "musicButton",
                            "description": "jQuery selector for music button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pauseButton",
                            "description": "jQuery selector for pause button",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pauseFocusSelector",
                            "description": "The class to pause\n       the application when focused on. This is useful for form elements which\n       require focus and play better with Application's keepFocus option.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.pause-on-focus'"
                        }
                    ]
                }
            ]
        },
        "springroll.Application": {
            "name": "springroll.Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/Application.js",
            "line": 13,
            "description": "Creates a new application, for example (HappyCamel extends Application)\nmanages displays, update loop controlling, handles resizing\n\n\tvar app = new Application();",
            "extends": "springroll.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for creating the application,\n \t\tsee `springroll.ApplicationOptions` for the specific options\n\t\tthat can be overridden and set.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "springroll.Features": {
            "name": "springroll.Features",
            "shortname": "Features",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Container",
            "namespace": "springroll",
            "file": "src/container/Features.js",
            "line": 9,
            "description": "Provide feature detection"
        },
        "springroll.CombinedCallback": {
            "name": "springroll.CombinedCallback",
            "shortname": "CombinedCallback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/async/CombinedCallback.js",
            "line": 8,
            "description": "A function that is used as a normal callback, but checks an object for a property in order to combine two\ncallbacks into one. For example usage:\n\nvar voPlayer = new springroll.VOPlayer();\nvar callback = springroll.CombinedCallback.create(myFunc.bind(this), voPlayer, \"playing\", \"_callback\");\nAnimator.play(myClip, \"myAnim\", callback);\n\nIn this example, when Animator calls 'callback', if voPlayer[\"playing\"] is false, 'myFunc' is called immediately.\nIf voPlayer[\"playing\"] is true, then voPlayer[\"_callback\"] is set to 'myFunc' so that it will be called when voPlayer completes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "call",
                    "description": "The callback to call when everything is complete.",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object to check as an additional completion dependency.",
                    "type": "*"
                },
                {
                    "name": "prop",
                    "description": "The property to check on obj. If obj[prop] is false, then it is considered complete.",
                    "type": "String"
                },
                {
                    "name": "callProp",
                    "description": "The property to set on obj if obj[prop] is true when the CombinedCallback is called.",
                    "type": "String"
                }
            ]
        },
        "springroll.DelayedCall": {
            "name": "springroll.DelayedCall",
            "shortname": "DelayedCall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/async/DelayedCall.js",
            "line": 9,
            "description": "A class for delaying a call through the Application, instead of relying on setInterval() or\nsetTimeout().",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the delay has completed.",
                    "type": "Function"
                },
                {
                    "name": "delay",
                    "description": "The time to delay the call, in milliseconds (or optionally frames).",
                    "type": "Int"
                },
                {
                    "name": "options",
                    "description": "The options to use or repeat value",
                    "type": "Object|Boolean",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "repeat",
                            "description": "If the DelayedCall should automatically repeat itself when\n                                completed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "autoDestroy",
                            "description": "If the DelayedCall should clean itself up when completed.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "useFrames",
                            "description": "If the DelayedCall should use frames instead of\n                                   milliseconds for the delay.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "autoDestroy",
                    "description": "If the DelayedCall should clean itself up when completed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "useFrames",
                    "description": "If the DelayedCall should use frames instead of\n                                   milliseconds for the delay.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "window.async": {
            "name": "window.async",
            "shortname": "async",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/core/async/async.js",
            "line": 7,
            "description": "Simplified fork of async (https://github.com/caolan/async) which only contains waterfall."
        },
        "springroll.EnumValue": {
            "name": "springroll.EnumValue",
            "shortname": "EnumValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/utils/Enum.js",
            "line": 8,
            "description": "An enumeration value. This class is private, and is only used by Enum.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the enum value.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The integer value of the enum.",
                    "type": "Int"
                },
                {
                    "name": "toString",
                    "description": "A string for toString() to return, instead of the name.",
                    "type": "String"
                }
            ]
        },
        "springroll.Enum": {
            "name": "springroll.Enum",
            "shortname": "Enum",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/utils/Enum.js",
            "line": 59,
            "description": "An enumeration, similar to Enums in C#. Each value is created as an EnumValue on the Enum,\nreferenced as a property with the same name as the EnumValue. Examples:\n\n\t\tvar myEnum = new springroll.Enum(\n\t\t\t\"valueOf0\",\n\t\t\t\"valueOf1\",\n\t\t\t\"valueOf2\");\n\t\tvar myOtherEnum = new springroll.Enum(\n\t\t\t{name: \"one\", value:\"1\", toString:\"I am the One!\"},\n\t\t\t\"two\",\n\t\t\t{name:\"screwSequentialNumbers\", value:42});\n\t\t\t\n\t\tmyEnum.valueOf0 != 0;//enum values are not integers\n\t\tmyEnum.valueOf1 != myOtherEnum.one;//enum values are not the same as other enums\n\t\tmyEnum.valueOf2.asInt == 2;//enum values can be explicitly compared to integers\n\t\tmyOtherEnum.screwSequentialNumbers == myOtherEnum.valueFromInt(42);//can use ints to get values\n\t\tconsole.log(myOtherEnum.one.toString());//outputs \"I am the One!\"\n\n\t\tfor (var i in myEnum) console.log(i); //outputs \"valueOf0\",\"valueOf1\",\"valueOf2\"",
            "is_constructor": 1,
            "params": [
                {
                    "name": "arguments",
                    "description": "\n The list of enumeration values. You can pass either an\n array or a list of parameters. Each string will be\n the previous value plus one, while objects with\n 'name' and 'value' properties will have the specified\n numeric value.",
                    "type": "Array|String|Object"
                }
            ]
        },
        "springroll.SavedData": {
            "name": "springroll.SavedData",
            "shortname": "SavedData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/utils/SavedData.js",
            "line": 7,
            "description": "The SavedData functions use localStorage and sessionStorage, with a cookie fallback."
        },
        "springroll.TimeUtils": {
            "name": "springroll.TimeUtils",
            "shortname": "TimeUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/utils/TimeUtils.js",
            "line": 23,
            "description": "A collection of Time related utility functions"
        },
        "springroll.WeightedRandom": {
            "name": "springroll.WeightedRandom",
            "shortname": "WeightedRandom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/utils/WeightedRandom.js",
            "line": 3,
            "description": "A class for generating weighted random values. Input objects are dictionary objects\nwhere the keys are the strings to be picked from, and the values are the corresponding\nodds as integers. For example:\n\n    {\n        itemWith25PercentChance: 2,\n        itemWith50PercentChance: 4,\n        otherItemWith25PercentChance: 2\n    }",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The configuration object for this weighted value generator.",
                    "type": "Object"
                }
            ]
        },
        "springroll.ApplicationOptions": {
            "name": "springroll.ApplicationOptions",
            "shortname": "ApplicationOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/ApplicationOptions.js",
            "line": 12,
            "description": "Manage the Application options",
            "extends": "springroll.PropertyDispatcher",
            "is_constructor": 1
        },
        "springroll.ApplicationPlugin": {
            "name": "springroll.ApplicationPlugin",
            "shortname": "ApplicationPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/ApplicationPlugin.js",
            "line": 9,
            "description": "Responsible for creating mixins, bindings, and setup for the SpringRoll Application"
        },
        "springroll.PageVisibility": {
            "name": "springroll.PageVisibility",
            "shortname": "PageVisibility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/PageVisibility.js",
            "line": 7,
            "description": "Handle the page visiblity change, if supported. Application uses one of these to\nmonitor page visibility. It is suggested that you listen to \"pause\", \"paused\",\nor \"unpaused\" events on the application instead of using one of these yourself.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "onFocus",
                    "description": "Callback when the page becomes visible",
                    "type": "Function"
                },
                {
                    "name": "onBlur",
                    "description": "Callback when the page loses visibility",
                    "type": "Function"
                }
            ]
        },
        "springroll.ResizePlugin": {
            "name": "springroll.ResizePlugin",
            "shortname": "ResizePlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/ResizePlugin.js",
            "line": 9,
            "description": "Create an app plugin for resizing application, all properties and methods documented\nin this class are mixed-in to the main Application",
            "extends": "springroll.ApplicationPlugin"
        },
        "springroll.StringFilters": {
            "name": "springroll.StringFilters",
            "shortname": "StringFilters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/core/StringFilters.js",
            "line": 7,
            "description": "Class for filtering strings",
            "is_constructor": 1
        },
        "springroll.Debug": {
            "name": "springroll.Debug",
            "shortname": "Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Debug",
            "namespace": "springroll",
            "file": "src/debug/Debug.js",
            "line": 11,
            "description": "A static closure to provide easy access to the console\nwithout having errors if the console doesn't exist\nto use call: Debug.log('Your log here')",
            "static": 1
        },
        "springroll.DebugOptions": {
            "name": "springroll.DebugOptions",
            "shortname": "DebugOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Debug",
            "namespace": "springroll",
            "file": "src/debug/DebugOptions.js",
            "line": 7,
            "description": "Class for display a list of query string options\nnicely in the console."
        },
        "springroll.easeljs.Animator": {
            "name": "springroll.easeljs.Animator",
            "shortname": "Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 14,
            "description": "Animator is a static class designed to provided\nbase animation functionality, using frame labels of MovieClips",
            "static": 1
        },
        "springroll.easeljs.AnimatorTimeline": {
            "name": "springroll.easeljs.AnimatorTimeline",
            "shortname": "AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 8,
            "description": "Animator Timeline is a class designed to provide\nbase animation functionality",
            "is_constructor": 1
        },
        "springroll.easeljs.BitmapMovieClip": {
            "name": "springroll.easeljs.BitmapMovieClip",
            "shortname": "BitmapMovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 15,
            "description": "A class similar to createjs.MovieClip, but made to play animations from a\nspringroll.easeljs.TextureAtlas. The EaselJS Sprite class requires a spritesheet with equal\nsized and spaced frames. By using TextureAtlas, you can use a much smaller spritesheet,\nsprites on screen with fewer extra transparent pixels, and use the same API as MovieClip.\n\nFormat for BitmapMovieClip data:\n\n\t{\n\t\tfps:30,\n\t\tlabels:\n\t\t{\n\t\t\tanimStart:0,\n\t\t\tanimStart_loop:15\n\t\t},\n\t\torigin:{ x: 20, y:30 },\n\t\tframes:\n\t\t[\n\t\t\t{\n\t\t\t\tname:\"myAnim#\",\n\t\t\t\tmin:1,\n\t\t\t\tmax:20,\n\t\t\t\tdigits:4\n\t\t\t}\n\t\t],\n\t\tscale:1\n\t}\n\nThe example object describes a 30 fps animation that is 20 frames long, and was originally\nmyAnim0001.png->myAnim0020.png, with frame labels on the first and 16th frames. 'digits' is\noptional, and defaults to 4.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "atlas",
                    "description": "The texture atlas to pull frames from.",
                    "type": "TextureAtlas",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Initialization data",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fps",
                            "description": "Framerate to play the movieclip at. Omitting this will use the\n                        current framerate.",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "A dictionary of the labels in the movieclip to assist in\n                              playing animations.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "The origin of the movieclip.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{x:0,y:0}"
                        },
                        {
                            "name": "frames",
                            "description": "An array of frame sequences to pull from the texture atlas.",
                            "type": "Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The name to use for the frame sequence. This should\n                                   include a \"#\" to be replaced with the image number.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "min",
                                    "description": "The first frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "max",
                                    "description": "The last frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "digits",
                                    "description": "The maximum number of digits in the names of the frames,\n                                    e.g. myAnim0001 has 4 digits.",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "4"
                                }
                            ]
                        },
                        {
                            "name": "scale",
                            "description": "The scale at which the art was exported, e.g. a scale of 1.4\n                               means the art was increased in size to 140% before exporting\n                               and should be scaled back down before drawing to the screen.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "springroll.easeljs.ReversePlayback": {
            "name": "springroll.easeljs.ReversePlayback",
            "shortname": "ReversePlayback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 10,
            "description": "Create an update listener that checks plays the animation\nin reverse. Requires the animation to have the same labeling\nsystem as the springroll.Animator system.\n\ti.e. each animation must have a corresponding ending frame\n\tmarked with\ta '_stop' and '_loop' suffixes,\n\tfor instance: \"walk\" requires \"walk_loop\"",
            "static": 1,
            "params": [
                {
                    "name": "clip",
                    "description": "The MovieClip containing the timeline and animation",
                    "type": "createjs.MovieClip"
                }
            ]
        },
        "springroll.easeljs.TextureAtlas": {
            "name": "springroll.easeljs.TextureAtlas",
            "shortname": "TextureAtlas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 10,
            "description": "Handles a spritesheet. File extensions and folder paths are dropped from frame names upon\nloading.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image that all textures pull from. This can\n                                             also be an array of images, if the TextureAtlas\n                                             should be built from several spritesheets.",
                    "type": "Image|HTMLCanvasElement|Array"
                },
                {
                    "name": "spritesheetData",
                    "description": "The JSON object describing the frames in the atlas. This\n                                      is expected to fit the JSON Hash format as exported from\n                                      TexturePacker. This can also be an array of data\n                                      objects, if the TextureAtlas should be built from\n                                      several spritesheets.",
                    "type": "Object|Array"
                }
            ]
        },
        "springroll.easeljs.Texture": {
            "name": "springroll.easeljs.Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 184,
            "description": "A Texture - a specific portion of an image that can then be drawn by a Bitmap.\nThis class is hidden within TextureAtlas, and can't be manually created."
        },
        "springroll.easeljs.Cutscene": {
            "name": "springroll.easeljs.Cutscene",
            "shortname": "Cutscene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 17,
            "description": "Cutscene is a class for playing a single EaselJS animation synced to a\nsingle audio file with springroll.Sound, with optional captions. Utilizes the Tasks module.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The runtime specific setup data for the cutscene.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "display",
                            "description": "The display or display id of the EaselJSDisplay\n                                        to draw on.",
                            "type": "String|Display"
                        },
                        {
                            "name": "configUrl",
                            "description": "The url of the json config file describing the cutscene.\n                                  See the example project.",
                            "type": "String"
                        },
                        {
                            "name": "loadCallback",
                            "description": "A function to call when loading is complete.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceTarg",
                            "description": "A string found in the paths of images that should\n                                          be replaced with another value.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceVal",
                            "description": "The string to use when replacing\n                                         options.pathReplaceTarg.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "imageScale",
                            "description": "Scaling to apply to all images loaded for the\n                                       cutscene.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "captions",
                            "description": "A Captions instance to display captions text on.",
                            "type": "Captions",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "springroll.easeljs.DwellTimer": {
            "name": "springroll.easeljs.DwellTimer",
            "shortname": "DwellTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 10,
            "description": "Fires DwellTime Learning events for clickable objects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "Object for which to add dwellTime events",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "learning",
                    "description": "Learning Dispatcher instance to use",
                    "type": "springroll.Learning",
                    "optional": true
                }
            ]
        },
        "createjs.Container": {
            "name": "createjs.Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Display",
            "namespace": "createjs",
            "file": "src/displays/easeljs/mixins/Container.js",
            "line": 15,
            "description": "Mixins for the CreateJS Container class"
        },
        "createjs.MovieClip": {
            "name": "createjs.MovieClip",
            "shortname": "MovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Display",
            "namespace": "createjs",
            "file": "src/displays/easeljs/mixins/MovieClip.js",
            "line": 15,
            "description": "Mixins for the CreateJS MovieClip class"
        },
        "createjs.Point": {
            "name": "createjs.Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Display",
            "namespace": "createjs",
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 8,
            "description": "Mixins for the CreateJS Point class, which include methods\nfor calculating the dot product, length, distance, normalize, etc."
        },
        "springroll.easeljs.BasePanel": {
            "name": "springroll.easeljs.BasePanel",
            "shortname": "BasePanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS States",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 14,
            "description": "Panel with convenience properties to the config, background and app.",
            "extends": "createjs.Container",
            "is_constructor": 1
        },
        "springroll.easeljs.BaseState": {
            "name": "springroll.easeljs.BaseState",
            "shortname": "BaseState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS States",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 16,
            "description": "Abstract app state class to do some preloading of assets\nalso plays well with the app audio loading.",
            "extends": "springroll.State",
            "is_constructor": 1,
            "params": [
                {
                    "name": "panel",
                    "description": "The panel",
                    "type": "createjs.Container"
                },
                {
                    "name": "options",
                    "description": "The options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "next",
                            "description": "The next state alias or call to next state",
                            "type": "String|Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "previous",
                            "description": "The previous state alias or call to\n                                                   previous state",
                            "type": "String|Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "useManifest",
                            "description": "Automatically load and unload assets with the\n                                              AssetManager which are found in the manifest\n                                              option or property.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "manifest",
                            "description": "The list of object to load and unload with the\n                                       AssetManager.",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "scaling",
                            "description": "The scaling items to use with the UIScaler. See\n                                         `UIScaler.addItems` for more information about the\n                                         format of the scaling objects.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ]
        },
        "springroll.easeljs.AssetManager": {
            "name": "springroll.easeljs.AssetManager",
            "shortname": "AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 16,
            "description": "Class for managing the loading and unloading of assets.",
            "static": 1
        },
        "springroll.easeljs.Button": {
            "name": "springroll.easeljs.Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 20,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both EaselJS and PIXI, but slightly differently in\ninitialization and callbacks. Add event listeners for click and mouseover to know about\nbutton clicks and mouse overs, respectively.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used\n                                                        for button states, as well as if the\n                                                        button is selectable or not. If this\n                                                        is an Image or Canvas element, then\n                                                        the button assumes that the image is\n                                                        full width and 3 images tall, in the\n                                                        order (top to bottom) up, over, down.\n                                                        If so, then the properties of\n                                                        imageSettings are ignored.",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true,
                    "props": [
                        {
                            "name": "image",
                            "description": "The image to use for all of the button\n                                                       states.",
                            "type": "Image|HTMLCanvasElement",
                            "optional": true
                        },
                        {
                            "name": "priority",
                            "description": "The state priority order. If omitted, defaults to\n                                             <code>&#91;\"disabled\", \"down\", \"over\",\n                                             \"up\"&#93;</code>. Previous versions of Button\n                                             used a hard coded order:\n                                             <code>&#91;\"highlighted\", \"disabled\", \"down\",\n                                             \"over\", \"selected\", \"up\"&#93;</code>.",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "up",
                            "description": "The visual information about the up state.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the\n                                                   image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x &\n                                                         y are how many pixels were trimmed\n                                                         off the left and right, and height &\n                                                         width are the untrimmed size of the\n                                                         button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state.\n                                              Properties on this parameter override data in\n                                              the label parameter for this button state only.\n                                              All values except \"text\" from the label\n                                              parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The visual information about the over state. If\n                                          omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the\n                                                     image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x\n                                                           & y are how many pixels were\n                                                           trimmed off the left and right, and\n                                                           height & width are the untrimmed\n                                                           size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state.\n                                                Properties on this parameter override data in\n                                                the label parameter for this button state\n                                                only. All values except \"text\" from the label\n                                                parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The visual information about the down state. If\n                                          omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the\n                                                     image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x\n                                                           & y are how many pixels were\n                                                           trimmed off the left and right, and\n                                                           height & width are the untrimmed\n                                                           size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state.\n                                                Properties on this parameter override data in\n                                                the label parameter for this button state\n                                                only. All values except \"text\" from the label\n                                                parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The visual information about the disabled state.\n                                              If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within\n                                                         the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state,\n                                                               where x & y are how many pixels\n                                                               were trimmed off the left and\n                                                               right, and height & width are\n                                                               the untrimmed size of the\n                                                               button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state.\n                                                    Properties on this parameter override data\n                                                    in the label parameter for this button\n                                                    state only. All values except \"text\" from\n                                                    the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom\n                                                       state found in imageSettings.priority.\n                                                       Any state added this way has a property\n                                                       of the same name added to the button.\n                                                       Examples of previous states that have\n                                                       been moved to this system are\n                                                       \"selected\" and \"highlighted\".",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state\n                                                                  within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the\n                                                                        state, where x & y are\n                                                                        how many pixels were\n                                                                        trimmed off the left\n                                                                        and right, and height\n                                                                        & width are the\n                                                                        untrimmed size of the\n                                                                        button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to\n                                                             this state. Properties on this\n                                                             parameter override data in the\n                                                             label parameter for this button\n                                                             state only. All values except\n                                                             \"text\" from the label parameter\n                                                             may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button\n                                                    graphics, in case you want button\n                                                    positioning to not include a highlight\n                                                    glow, or any other reason you would want\n                                                    to offset the button art and label.",
                            "type": "createjs.Point",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this\n                             makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "font",
                            "description": "The font name and size to use on the label, as createjs.Text\n                             expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "The color of the text to use on the label, as createjs.Text\n                              expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "textBaseline",
                            "description": "The baseline for the label text, as\n                                              createjs.Text expects.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"middle\""
                        },
                        {
                            "name": "stroke",
                            "description": "The stroke to use for the label text, if desired, as\n                                    createjs.Text (springroll fork only) expects.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "shadow",
                            "description": "A shadow object to apply to the label text.",
                            "type": "createjs.Shadow",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to\n                                          the button. If omitted, \"center\" is used, which\n                                          attempts to horizontally center the label on the\n                                          button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to\n                                          the button. If omitted, \"center\" is used, which\n                                          attempts to vertically center the label on the\n                                          button. This may be unreliable - see documentation\n                                          for createjs.Text.getMeasuredLineHeight().",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "springroll.easeljs.DragManager": {
            "name": "springroll.easeljs.DragManager",
            "shortname": "DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 11,
            "description": "Drag manager is responsible for handling the dragging of stage elements.\nSupports click-n-stick (click to start, move mouse, click to release) and click-n-drag (standard dragging) functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "createjs.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        },
        "springroll.easeljs.SoundButton": {
            "name": "springroll.easeljs.SoundButton",
            "shortname": "SoundButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 11,
            "description": "A button with audio events for click and over mouse events",
            "extends": "springroll.easeljs.Button",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "The loaded image element, see springroll.easeljs.Button constructor",
                    "type": "DOMElement|object"
                },
                {
                    "name": "label",
                    "description": "See springroll.easeljs.Button constructor",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "If the button should be enabled by default",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "clickAlias",
                    "description": "The button click audio alias",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"ButtonClick\""
                },
                {
                    "name": "overAlias",
                    "description": "The button rollover audio alias",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"ButtonRollover\""
                }
            ]
        },
        "springroll.easeljs.BitmapUtils": {
            "name": "springroll.easeljs.BitmapUtils",
            "shortname": "BitmapUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Utilities",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/utils/BitmapUtils.js",
            "line": 12,
            "description": "Designed to provide utility related to Bitmaps."
        },
        "springroll.easeljs.DisplayAdapter": {
            "name": "springroll.easeljs.DisplayAdapter",
            "shortname": "DisplayAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 8,
            "description": "Provide a normalized way to get size, position, scale values\nas well as provide reference for different geometry classes."
        },
        "springroll.easeljs.EaselJSDisplay": {
            "name": "springroll.easeljs.EaselJSDisplay",
            "shortname": "EaselJSDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs",
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 13,
            "description": "EaselJSDisplay is a display plugin for the springroll Framework\nthat uses the EaselJS library for rendering.",
            "extends": "springroll.AbstractDisplay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the EaselJS stage.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "stageType",
                            "description": "If the stage should be a normal stage or a SpriteStage (use \"spriteStage\").",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"stage\""
                        },
                        {
                            "name": "clearView",
                            "description": "If the stage should wipe the canvas between renders.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "mouseOverRate",
                            "description": "How many times per second to check for mouseovers. To disable them, use 0 or -1.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ]
        },
        "springroll.native.Circle": {
            "name": "springroll.native.Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/geom/Circle.js",
            "line": 8,
            "description": "The Circle object can be used to specify a hit area for displayobjects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the framing rectangle of this circle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the framing rectangle of this circle",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle",
                    "type": "Number"
                }
            ]
        },
        "springroll.native.Ellipse": {
            "name": "springroll.native.Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 8,
            "description": "The Ellipse object can be used to specify a hit area for displayobjects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall width of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall height of this ellipse",
                    "type": "Number"
                }
            ]
        },
        "springroll.native.Point": {
            "name": "springroll.native.Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/geom/Point.js",
            "line": 8,
            "description": "The Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "position of the point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "position of the point",
                    "type": "Number"
                }
            ]
        },
        "springroll.native.Polygon": {
            "name": "springroll.native.Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/geom/Polygon.js",
            "line": 8,
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "This can be an array of Points that form the polygon,\n     a flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arguments passed can be\n     all the points of the polygon e.g. `new Polygon(new Point(), new Point(), ...)`, or the\n     arguments passed can be flat x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are\n     Numbers.",
                    "type": "Array<Point>|Array<Number>|Point...|Number...",
                    "multiple": true
                }
            ]
        },
        "springroll.native.Rectangle": {
            "name": "springroll.native.Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 8,
            "description": "the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall width of this rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall height of this rectangle",
                    "type": "Number"
                }
            ]
        },
        "springroll.native.DisplayAdapter": {
            "name": "springroll.native.DisplayAdapter",
            "shortname": "DisplayAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 8,
            "description": "Provide a normalized way to get size, position, scale values\nas well as provide reference for different geometry classes."
        },
        "springroll.native.NativeDisplay": {
            "name": "springroll.native.NativeDisplay",
            "shortname": "NativeDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Native Display",
            "namespace": "springroll.native",
            "file": "src/displays/native/NativeDisplay.js",
            "line": 10,
            "description": "NativeDisplay is a display plugin for doing native rendering. This represents\nthe bare minimum needed by the Application to render.",
            "extends": "springroll.AbstractDisplay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the display.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "contextId",
                            "description": "Valid options are \"2d\" and \"webgl\"",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"2d\""
                        }
                    ]
                }
            ]
        },
        "springroll.pixi.Animator": {
            "name": "springroll.pixi.Animator",
            "shortname": "Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI Animation",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 16,
            "description": "Animator for interacting with Spine animations",
            "static": 1
        },
        "springroll.pixi.AnimatorTimeline": {
            "name": "springroll.pixi.AnimatorTimeline",
            "shortname": "AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI Animation",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 13,
            "description": "Internal Animator class for keeping track of animations. AnimatorTimelines are pooled\ninternally, so please only keep references to them while they are actively playing an\nanimation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "clip",
                    "description": "The AnimatorTimeline's clip",
                    "type": "PIXI.MovieClip|Pixi.Spine"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the clip is finished playing",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which the clip should be played",
                    "type": "Number"
                },
                {
                    "name": "cancelledCallback",
                    "description": "The function to call if the clip's playback is\n                                    interrupted.",
                    "type": "Function"
                }
            ]
        },
        "springroll.pixi.ParallelSpineData": {
            "name": "springroll.pixi.ParallelSpineData",
            "shortname": "ParallelSpineData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI Animation",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/animation/ParallelSpineData.js",
            "line": 8,
            "description": "Class for assisting in creating an array of Spine animations to play at the same time\non one skeleton through Animator. Concurrent animations will play until one non-looping\nanimation ends.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "anim",
                    "description": "The name of the animation on the skeleton.",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "If this animation should loop.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "speed",
                    "description": "The speed at which this animation should be played.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "springroll.pixi.AssetManager": {
            "name": "springroll.pixi.AssetManager",
            "shortname": "AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI UI",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 18,
            "description": "AssetManager is responsible for managing different resolutions of assets and spritesheets\nbased on the resolution of the stage. This is a helpful optimization for PIXI because some\nlow-hardware devices have a problem keeping up with larger images, or just refuse large\nimages entirely. The AssetManager does not load assets itself, or keep track of what is\nloaded. It merely assists in loading the appropriate assets, as well as easily unloading\nassets when you are done using them."
        },
        "springroll.pixi.Button": {
            "name": "springroll.pixi.Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI UI",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/ui/Button.js",
            "line": 16,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both EaselJS and PIXI, but slightly differently in\ninitialization and callbacks.\nUse releaseCallback and overCallback to know about button clicks and mouse overs, respectively.",
            "extends": "PIXI.DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "up",
                            "description": "The texture for the up state of the button. This can be either the texture itself,\n       or an object with 'tex' and 'label' properties.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The texture for the over state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The texture for the down state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The texture for the disabled state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom state found in imageSettings.priority.\n       Any state added this way has a property of the same name added to the button. Examples of previous states that have been\n       moved to this system are \"selected\" and \"highlighted\".",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The texture for the custom state.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter \n       override data in the label parameter for this button state only. All values except \"text\" from the label parameter may be\n       overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button graphics, in case you want button \n       positioning to not include a highlight glow, or any other reason you would want to offset the button art and label.",
                            "type": "PIXI.Point",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "scale",
                            "description": "The scale to use for the textures. This allows smaller art assets than the designed size to be used.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                },
                {
                    "name": "[imageSettings.priority=null] The state priority order. If omitted, defaults to [\"disabled\", \"down\", \"over\", \"up\"].\n       Previous versions of Button used a hard coded order: [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"]",
                    "description": ".",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "type",
                            "description": "If label.type is \"bitmap\", then a PIXI.BitmapText text is created, otherwise a PIXI.Text is created for the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The style of the text field, in the format that PIXI.BitmapText and PIXI.Text expect.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to vertically center the label on the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "springroll.pixi.DragManager": {
            "name": "springroll.pixi.DragManager",
            "shortname": "DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI UI",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 14,
            "description": "Drag manager is responsible for handling the dragging of stage elements\nsupports click-n-stick and click-n-drag functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "PIXI.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        },
        "springroll.pixi.DisplayAdapter": {
            "name": "springroll.pixi.DisplayAdapter",
            "shortname": "DisplayAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI Display",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 8,
            "description": "Provide a normalized way to get size, position, scale values\nas well as provide reference for different geometry classes."
        },
        "springroll.pixi.PixiDisplay": {
            "name": "springroll.pixi.PixiDisplay",
            "shortname": "PixiDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PIXI Display",
            "namespace": "springroll.pixi",
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 14,
            "description": "PixiDisplay is a display plugin for the springroll Framework\nthat uses the Pixi library for rendering.",
            "extends": "springroll.AbstractDisplay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the Pixi stage.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "forceContext",
                            "description": "If a specific renderer should be used instead of\n                                            WebGL falling back to Canvas. Use \"webgl\" or\n                                            \"canvas2d\" to specify a renderer.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "clearView",
                            "description": "If the stage should wipe the canvas between\n                                           renders.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "backgroundColor",
                            "description": "The background color of the stage (if it is\n                                                 not transparent).",
                            "type": "Uint",
                            "optional": true,
                            "optdefault": "0x000000"
                        },
                        {
                            "name": "transparent",
                            "description": "If the stage should be transparent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "antiAlias",
                            "description": "If the WebGL renderer should use anti-aliasing.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "preMultAlpha",
                            "description": "If the WebGL renderer should draw with all\n                                              images as pre-multiplied alpha. In most cases,\n                                              you probably do not want to set this option to\n                                              true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "preserveDrawingBuffer",
                            "description": "Set this to true if you want to call\n                                                       toDataUrl on the WebGL rendering\n                                                       context.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "springroll.AbstractDisplay": {
            "name": "springroll.AbstractDisplay",
            "shortname": "AbstractDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/displays/AbstractDisplay.js",
            "line": 7,
            "description": "The display provides the base properties for all custom display. A display\nis a specialized view for the application. As the name suggests, this class\nshould not be instanciated directly.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the display.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "contextId",
                            "description": "Valid options are \"2d\" and \"webgl\"",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"2d\""
                        }
                    ]
                }
            ]
        },
        "springroll.EventDispatcher": {
            "name": "springroll.EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/events/EventDispatcher.js",
            "line": 7,
            "description": "The EventDispatcher mirrors the functionality of AS3 and EaselJS's EventDispatcher,\nbut is more robust in terms of inputs for the `on()` and `off()` methods.",
            "is_constructor": 1
        },
        "springroll.PropertyDispatcher": {
            "name": "springroll.PropertyDispatcher",
            "shortname": "PropertyDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/events/PropertyDispatcher.js",
            "line": 9,
            "description": "Event dispatcher with ability to detect whenever a property\nis changed.",
            "extends": "springroll.EventDispatcher",
            "is_constructor": 1
        },
        "springroll.AbstractHint": {
            "name": "springroll.AbstractHint",
            "shortname": "AbstractHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/AbstractHint.js",
            "line": 8,
            "description": "Abstract base class for hints used by HintPlayer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hints",
                    "description": "The instance of the hints",
                    "type": "springroll.HintsPlayer"
                },
                {
                    "name": "done",
                    "description": "called on hint complete",
                    "type": "Function"
                }
            ]
        },
        "springroll.AnimatorHint": {
            "name": "springroll.AnimatorHint",
            "shortname": "AnimatorHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/AnimatorHint.js",
            "line": 11,
            "description": "Handle the hinting played with the Animator, usually\na lip-synced animation.",
            "extends": "springroll.AbstractHint",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hints",
                    "description": "The instance of the hints",
                    "type": "springroll.HintsPlayer"
                },
                {
                    "name": "done",
                    "description": "called on hint complete",
                    "type": "Function"
                },
                {
                    "name": "instance",
                    "description": "The media instance to play",
                    "type": "createjs.MovieClip|*"
                },
                {
                    "name": "events",
                    "description": "The event or events to play",
                    "type": "String|object|Array"
                },
                {
                    "name": "onComplete",
                    "description": "Callback when finished",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "If the call is cancelled, true set onComplete\n       to also be the cancelled callback",
                    "type": "Function|boolean"
                }
            ]
        },
        "springroll.FunctionHint": {
            "name": "springroll.FunctionHint",
            "shortname": "FunctionHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/FunctionHint.js",
            "line": 11,
            "description": "Generic function to act as a hint",
            "extends": "springroll.AbstractHint",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hints",
                    "description": "The instance of the hints",
                    "type": "springroll.HintsPlayer"
                },
                {
                    "name": "done",
                    "description": "called on hint done",
                    "type": "Function"
                },
                {
                    "name": "onStart",
                    "description": "Function to call",
                    "type": "Function"
                }
            ]
        },
        "springroll.GroupHint": {
            "name": "springroll.GroupHint",
            "shortname": "GroupHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/GroupHint.js",
            "line": 14,
            "description": "Class to create tiered hinting or randomized hinting.\n   this.app.hints.group()\n   \t.vo('Something', onCompleted)\n   \t.vo('Another', onComplete)\n   \t.addTier()\n   \t.vo('DetailedSomething', onComplete)\n   \t.vo('DetailedAnother', onComplete);",
            "extends": "springroll.AbstractHint",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hints",
                    "description": "The instance of the hints",
                    "type": "springroll.HintsPlayer"
                },
                {
                    "name": "done",
                    "description": "called on hint done",
                    "type": "Function"
                }
            ]
        },
        "springroll.HintsPlayer": {
            "name": "springroll.HintsPlayer",
            "shortname": "HintsPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/HintsPlayer.js",
            "line": 15,
            "description": "Design to handle the setting and playing of hints",
            "is_constructor": 1,
            "params": [
                {
                    "name": "app",
                    "description": "Reference to the current app",
                    "type": "springroll.Application"
                }
            ]
        },
        "springroll.VOHint": {
            "name": "springroll.VOHint",
            "shortname": "VOHint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Hints",
            "namespace": "springroll",
            "file": "src/hints/VOHint.js",
            "line": 11,
            "description": "A hint designed to be played with the VOPlayer, typically\noff-screen voice-over.",
            "extends": "springroll.AbstractHint",
            "is_constructor": 1,
            "params": [
                {
                    "name": "hints",
                    "description": "The instance of the hints",
                    "type": "springroll.Application"
                },
                {
                    "name": "done",
                    "description": "called on hint complete",
                    "type": "Function"
                },
                {
                    "name": "idOrList",
                    "description": "",
                    "type": "String|Array"
                },
                {
                    "name": "onComplete",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "",
                    "type": "Function"
                }
            ]
        },
        "springroll.Languages": {
            "name": "springroll.Languages",
            "shortname": "Languages",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Languages",
            "namespace": "springroll",
            "file": "src/languages/Languages.js",
            "line": 11,
            "description": "Keeps track of the user locale, by auto-detecting the browser language, allowing a user\nselection, and automatically modifying any url that runs through the CacheManager.",
            "extends": "EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "The language settings to be used.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "default",
                            "description": "The default language name to use if asked for one that is\n                               not present.",
                            "type": "String"
                        },
                        {
                            "name": "languages",
                            "description": "An array of all supported languages, with entries being\n                                locale ids (dialects allowed). Locale ids should be lower\n                                case.",
                            "type": "Array"
                        },
                        {
                            "name": "replace",
                            "description": "A string to replace in urls with the current\n                                          language.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"%LANG%\""
                        }
                    ]
                }
            ]
        },
        "springroll.EventCatalog": {
            "name": "springroll.EventCatalog",
            "shortname": "EventCatalog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/EventCatalog.js",
            "line": 10,
            "description": "A map of all the event codes to the API method names"
        },
        "springroll.EventError": {
            "name": "springroll.EventError",
            "shortname": "EventError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/EventError.js",
            "line": 11,
            "description": "General errors when using the Learning Dispatcher",
            "extends": "springroll.LearningError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "eventCode",
                    "description": "The number of the event",
                    "type": "Int"
                }
            ]
        },
        "springroll.EventSignature": {
            "name": "springroll.EventSignature",
            "shortname": "EventSignature",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/EventSignature.js",
            "line": 11,
            "description": "Define the signature of the api",
            "is_constructor": 1,
            "params": [
                {
                    "name": "api",
                    "description": "The name of the API",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The list of arguments to be called",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "info",
                    "description": "The info description of the API",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "springroll.EventUtils": {
            "name": "springroll.EventUtils",
            "shortname": "EventUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/EventUtils.js",
            "line": 13,
            "description": "Utility class for handling events",
            "static": 1
        },
        "springroll.Learning": {
            "name": "springroll.Learning",
            "shortname": "Learning",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/Learning.js",
            "line": 20,
            "description": "The base game class",
            "extends": "springroll.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "app",
                    "description": "The application reference",
                    "type": "springroll.Application"
                },
                {
                    "name": "showTray",
                    "description": "Show the documentation at init or false (dev build only!)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "springroll.LearningError": {
            "name": "springroll.LearningError",
            "shortname": "LearningError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/LearningError.js",
            "line": 8,
            "description": "General errors when using the Learning Dispatcher",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "eventCode",
                    "description": "The number of the event",
                    "type": "Int"
                }
            ]
        },
        "springroll.LearningMedia": {
            "name": "springroll.LearningMedia",
            "shortname": "LearningMedia",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning Media",
            "namespace": "springroll",
            "file": "src/learning/LearningMedia.js",
            "line": 11,
            "description": "This class contains a bunch of media playing class\nto provide convenience around using the Learning Dispatcher"
        },
        "springroll.ValidationError": {
            "name": "springroll.ValidationError",
            "shortname": "ValidationError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Learning",
            "namespace": "springroll",
            "file": "src/learning/ValidationError.js",
            "line": 10,
            "description": "Error when validating value by Learning Dispatcher",
            "extends": "springroll.EventError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The name of the property",
                    "type": "String"
                }
            ]
        },
        "springroll.CacheManager": {
            "name": "springroll.CacheManager",
            "shortname": "CacheManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/loaders/CacheManager.js",
            "line": 12,
            "description": "Used for managing the browser cache of loading external elements\ncan easily load version manifest and apply it to the media loader\nsupports cache busting all media load requests\nuses the query string to bust browser versions."
        },
        "springroll.Loader": {
            "name": "springroll.Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/loaders/Loader.js",
            "line": 16,
            "description": "The Loader is the singleton loader for loading all assets\nincluding images, data, code and sounds. Loader supports cache-busting\nin the browser using dynamic query string parameters."
        },
        "springroll.LoaderQueueItem": {
            "name": "springroll.LoaderQueueItem",
            "shortname": "LoaderQueueItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 7,
            "description": "Represents a single item in the loader queue"
        },
        "springroll.LoaderResult": {
            "name": "springroll.LoaderResult",
            "shortname": "LoaderResult",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "springroll",
            "file": "src/loaders/LoaderResult.js",
            "line": 7,
            "description": "The return result of the Loader load",
            "is_constructor": 1,
            "params": [
                {
                    "name": "content",
                    "description": "The dynamic content loaded",
                    "type": "*"
                },
                {
                    "name": "url",
                    "description": "The url that was loaded",
                    "type": "String"
                },
                {
                    "name": "loader",
                    "description": "The LoadQueue that performed the load",
                    "type": "createjs.LoadQueue"
                }
            ]
        },
        "springroll.Captions": {
            "name": "springroll.Captions",
            "shortname": "Captions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Captions",
            "namespace": "springroll",
            "file": "src/media/Captions.js",
            "line": 12,
            "description": "A class that creates captioning for multimedia content. Captions are\ncreated from a dictionary of captions and can be played by alias.",
            "example": [
                "\n\t\tvar captionsData = {\n\t\t\t\"Alias1\": [\n\t\t\t\t{\"start\":0, \"end\":2000, \"content\":\"Ohh that looks awesome!\"}\n\t\t\t],\n\t\t\t\"Alias2\": [\n\t\t\t\t{\"start\":0, \"end\":2000, \"content\":\"Love it, absolutely love it!\"}\n\t\t\t]\n\t\t};\n\n\t\t// initialize the captions\n\t\tvar captions = new springroll.Captions();\n\t\tcaptions.data = captionsData;\n\t\tcaptions.textField = document.getElementById(\"captions\");\n\t\tcaptions.play(\"Alias1\");"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The captions dictionary",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "textField",
                    "description": "The output text field",
                    "type": "String|DOMElement",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "selfUpdate",
                    "description": "If the captions playback should update itself",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "springroll.Sound": {
            "name": "springroll.Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sound",
            "namespace": "springroll",
            "file": "src/media/Sound.js",
            "line": 21,
            "description": "Acts as a wrapper for SoundJS as well as adding lots of other functionality\nfor managing sounds."
        },
        "springroll.SoundContext": {
            "name": "springroll.SoundContext",
            "shortname": "SoundContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sound",
            "namespace": "springroll",
            "file": "src/media/SoundContext.js",
            "line": 8,
            "description": "A private class that represents a sound context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The name of the sound context.",
                    "type": "String"
                }
            ]
        },
        "springroll.SoundInstance": {
            "name": "springroll.SoundInstance",
            "shortname": "SoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sound",
            "namespace": "springroll",
            "file": "src/media/SoundInstance.js",
            "line": 10,
            "description": "A playing instance of a sound (or promise to play as soon as it loads). These can only\nbe created through springroll.Sound.instance.play()."
        },
        "springroll.SoundListTask": {
            "name": "springroll.SoundListTask",
            "shortname": "SoundListTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sound",
            "namespace": "springroll",
            "file": "src/media/SoundListTask.js",
            "line": 13,
            "description": "A task for loading a list of sounds. These can only\nbe created through Sound.instance.createPreloadTask().\nThis class is not created if the Task library is not loaded before the Sound library.",
            "extends": "{springroll.Task}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The unique id of this task",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "The collection of sounds",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Completed callback function",
                    "type": "Function"
                }
            ]
        },
        "springroll.VOPlayer": {
            "name": "springroll.VOPlayer",
            "shortname": "VOPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Sound",
            "namespace": "springroll",
            "file": "src/media/VOPlayer.js",
            "line": 14,
            "description": "A class for managing audio by only playing one at a time, playing a list, and even\nmanaging captions (Captions library) at the same time."
        },
        "window.Array": {
            "name": "window.Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/mixins/Array.js",
            "line": 7,
            "description": "Add methods to Array\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"
        },
        "window.Math": {
            "name": "window.Math",
            "shortname": "Math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/mixins/Math.js",
            "line": 7,
            "description": "Add methods to Math"
        },
        "window.Number": {
            "name": "window.Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/mixins/Number.js",
            "line": 7,
            "description": "Add methods to Number"
        },
        "window.Object": {
            "name": "window.Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/mixins/Object.js",
            "line": 7,
            "description": "Add methods to Object"
        },
        "window.String": {
            "name": "window.String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/mixins/String.js",
            "line": 7,
            "description": "Add methods to String\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"
        },
        "springroll.State": {
            "name": "springroll.State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "States",
            "namespace": "springroll",
            "file": "src/states/State.js",
            "line": 13,
            "description": "Defines the base functionality for a state used by the state manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "panel",
                    "description": "The panel to associate with\n \tthis state.",
                    "type": "createjs.Container|PIXI.DisplayObjectContainer"
                },
                {
                    "name": "options",
                    "description": "The list of options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "next",
                            "description": "The next state alias or function to call when going to the next state.",
                            "type": "String|Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "previous",
                            "description": "The previous state alias to call when going to the previous state.",
                            "type": "String|Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "delayLoad",
                            "description": "The number of frames to delay the loading for cases where\n   heavy object instaniation slow the game dramatically.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ]
        },
        "springroll.StateEvent": {
            "name": "springroll.StateEvent",
            "shortname": "StateEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "States",
            "namespace": "springroll",
            "file": "src/states/StateEvent.js",
            "line": 8,
            "description": "A state-related event used by the State Manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility,\n                                default to currentState",
                    "type": "BaseState"
                }
            ]
        },
        "springroll.StateManager": {
            "name": "springroll.StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "States",
            "namespace": "springroll",
            "file": "src/states/StateManager.js",
            "line": 14,
            "description": "The State Manager used for managing the different states of a game or site",
            "extends": "springroll.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "display",
                    "description": "The display on which the transition animation\n      is displayed.",
                    "type": "springroll.AbstractDisplay"
                },
                {
                    "name": "transitionSounds",
                    "description": "Data object with aliases and start times (seconds) for\n      transition in, loop and out sounds. Example: `{in:{alias:\"myAlias\", start:0.2}}`.\n      These objects are in the format for Animator from EaselJSDisplay or PixiDisplay,\n      so they can be just the sound alias instead of an object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "in",
                            "description": "The sound to play for transition in",
                            "type": "Object|String",
                            "optional": true
                        },
                        {
                            "name": "out",
                            "description": "The sound to play for transition out",
                            "type": "Object|String",
                            "optional": true
                        },
                        {
                            "name": "loading",
                            "description": "The sound to play for loading",
                            "type": "Object|String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "springroll.FunctionTask": {
            "name": "springroll.FunctionTask",
            "shortname": "FunctionTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/FunctionTask.js",
            "line": 11,
            "description": "A task to do a generic asynchronous function task.",
            "is_constructor": 1,
            "extends": "Task",
            "params": [
                {
                    "name": "id",
                    "description": "Alias for this task",
                    "type": "String"
                },
                {
                    "name": "serviceCall",
                    "description": "The function to start the asynchronous task. It  \nshould take a callback function as the first parameter, so the task knows when\nthe asynchronous call has been completed.",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                },
                {
                    "name": "arguments",
                    "description": "The additional arguments passed to the service call, \nafter the callback",
                    "type": "*"
                }
            ]
        },
        "springroll.ListTask": {
            "name": "springroll.ListTask",
            "shortname": "ListTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/ListTask.js",
            "line": 14,
            "description": "A task that performs a list of tasks",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for this ListTask",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "The list of tasks",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                }
            ]
        },
        "springroll.LoadTask": {
            "name": "springroll.LoadTask",
            "shortname": "LoadTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/LoadTask.js",
            "line": 13,
            "description": "Load task is a common type of task used for loading assets\nthrough the Loader",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for the task",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url from which to load the asset",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call once loading is complete",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "Optional call back to get load progress",
                    "type": "Function"
                },
                {
                    "name": "priority",
                    "description": "Media loader priority of the load",
                    "type": "Int"
                },
                {
                    "name": "data",
                    "description": "Opitonal loading options",
                    "type": "*"
                }
            ]
        },
        "springroll.PixiTask": {
            "name": "springroll.PixiTask",
            "shortname": "PixiTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/PixiTask.js",
            "line": 13,
            "description": "PixiTask loads things through PIXI.AssetLoader for pixi.js.\nThis means textures, spritesheets, and bitmap fonts.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "The urls to load using PIXI.AssetLoader",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the load is completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The optional callback to call each time\nan itemfinishes loading",
                    "type": "Function"
                }
            ]
        },
        "springroll.Task": {
            "name": "springroll.Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/Task.js",
            "line": 8,
            "description": "A task is used by the Task Manager to do an asyncronous task \n(like loading or playback)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for the task",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                }
            ]
        },
        "springroll.TaskEvent": {
            "name": "springroll.TaskEvent",
            "shortname": "TaskEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/TaskEvent.js",
            "line": 8,
            "description": "Task events are used by the task manager to communicate\nwhen tasks change",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "task",
                    "description": "The task this event relates to",
                    "type": "Task"
                },
                {
                    "name": "data",
                    "description": "description",
                    "type": "Object"
                }
            ]
        },
        "springroll.TaskManager": {
            "name": "springroll.TaskManager",
            "shortname": "TaskManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tasks",
            "namespace": "springroll",
            "file": "src/tasks/TaskManager.js",
            "line": 13,
            "description": "The task manager is responsible for doing a series\nof asyncronous tasks",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tasks",
                    "description": "The series of tasks to do",
                    "type": "Array"
                }
            ]
        },
        "springroll.Positioner": {
            "name": "springroll.Positioner",
            "shortname": "Positioner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "springroll",
            "file": "src/ui/Positioner.js",
            "line": 8,
            "description": "Initially layouts all interface elements",
            "static": 1
        },
        "springroll.ScaleItem": {
            "name": "springroll.ScaleItem",
            "shortname": "ScaleItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "springroll",
            "file": "src/ui/ScaleItem.js",
            "line": 11,
            "description": "A single UI item that needs to be resized,\nthis is an internal class that you would not need to interact with.",
            "params": [
                {
                    "name": "display",
                    "description": "The item to affect",
                    "type": "PIXI.DisplayObject|createjs.DisplayObject"
                },
                {
                    "name": "align",
                    "description": "The vertical-horizontal alignment shorthand",
                    "type": "String"
                },
                {
                    "name": "designedScreen",
                    "description": "The original screen the item was designed for",
                    "type": "springroll.ScreenSettings"
                },
                {
                    "name": "adapter",
                    "description": "The display adapter",
                    "type": "DisplayAdapter"
                }
            ]
        },
        "springroll.ScaleManager": {
            "name": "springroll.ScaleManager",
            "shortname": "ScaleManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "springroll",
            "file": "src/ui/ScaleManager.js",
            "line": 14,
            "description": "The UI scale is responsible for scaling UI components to help easy the burden of different\ndevice aspect ratios. The UI can expand either vertically or horizontally to fill excess\nspace.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "The dimensions of the Scaler",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "The designed width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "The designed height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "maxwidth",
                                    "description": "The designed max width",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "size.width"
                                },
                                {
                                    "name": "maxheight",
                                    "description": "The designed max height",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "size.height"
                                }
                            ]
                        },
                        {
                            "name": "items",
                            "description": "The items to load",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "container",
                            "description": "The container if\n                                                                            adding items",
                            "type": "PIXI.DisplayObjectContainer|createjs.Container",
                            "optional": true
                        },
                        {
                            "name": "display",
                            "description": "The current display",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "enabled",
                            "description": "If the scaler is enabled",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "window.extend": {
            "name": "window.extend",
            "shortname": "extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/utils/extend.js",
            "line": 5,
            "description": "Use to do class inheritence",
            "static": 1
        },
        "window.include": {
            "name": "window.include",
            "shortname": "include",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/utils/include.js",
            "line": 5,
            "description": "Used to include required classes by name",
            "static": 1
        },
        "window.mixin": {
            "name": "window.mixin",
            "shortname": "mixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/utils/mixin.js",
            "line": 5,
            "description": "Static class for mixing in functionality into objects.",
            "static": 1
        },
        "window.namespace": {
            "name": "window.namespace",
            "shortname": "namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "window",
            "file": "src/utils/namespace.js",
            "line": 5,
            "description": "Static class for namespacing objects and adding\nclasses to it.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/container/Container.js",
            "line": 40,
            "description": "The name of this class",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 46,
            "description": "The current iframe jquery object",
            "itemtype": "property",
            "name": "iframe",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 52,
            "description": "The DOM object for the iframe",
            "itemtype": "property",
            "name": "dom",
            "type": "Element",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 58,
            "description": "Reference to the help button",
            "itemtype": "property",
            "name": "helpButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 65,
            "description": "Reference to the captions button",
            "itemtype": "property",
            "name": "captionsButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 72,
            "description": "Reference to the all sound mute button",
            "itemtype": "property",
            "name": "soundButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 79,
            "description": "Reference to the music mute button",
            "itemtype": "property",
            "name": "musicButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 86,
            "description": "Reference to the sound effects mute button",
            "itemtype": "property",
            "name": "sfxButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 93,
            "description": "Reference to the voice-over mute button",
            "itemtype": "property",
            "name": "voButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 100,
            "description": "Reference to the pause application button",
            "itemtype": "property",
            "name": "pauseButton",
            "type": "Jquery",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 107,
            "description": "Communication layer between the container and application",
            "itemtype": "property",
            "name": "client",
            "type": "Bellhop",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 113,
            "description": "The current release data",
            "itemtype": "property",
            "name": "release",
            "type": "Object",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 119,
            "description": "Check to see if a application is loaded",
            "itemtype": "property",
            "name": "loaded",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 126,
            "description": "Check to see if a application is loading",
            "itemtype": "property",
            "name": "loading",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 133,
            "description": "The collection of captions styles",
            "itemtype": "property",
            "name": "_captionsStyles",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 144,
            "description": "Whether the Game is currently \"blurred\" (not focused) - for pausing/unpausing",
            "itemtype": "property",
            "name": "_appBlurred",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 152,
            "description": "Always keep the focus on the application iframe",
            "itemtype": "property",
            "name": "_keepFocus",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 160,
            "description": "Whether the Container is currently \"blurred\" (not focused) - for pausing/unpausing",
            "itemtype": "property",
            "name": "_containerBlurred",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 168,
            "description": "Delays pausing of application to mitigate issues with asynchronous communication\nbetween Game and Container",
            "itemtype": "property",
            "name": "_pauseTimer",
            "type": "Int",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 175,
            "description": "If the application is currently paused manually",
            "itemtype": "property",
            "name": "_isManualPause",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 183,
            "description": "If the current application is paused",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 191,
            "description": "Should we send bellhop messages for the mute (etc) buttons?",
            "itemtype": "property",
            "name": "sendMutes",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 245,
            "description": "Fired when the pause state is toggled",
            "itemtype": "event",
            "name": "pause",
            "params": [
                {
                    "name": "paused",
                    "description": "If the application is now paused",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 251,
            "description": "Fired when the application resumes from a paused state",
            "itemtype": "event",
            "name": "resumed",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 256,
            "description": "Fired when the application becomes paused",
            "itemtype": "event",
            "name": "paused",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 261,
            "description": "Fired when the application is unsupported",
            "itemtype": "event",
            "name": "unsupported",
            "params": [
                {
                    "name": "err",
                    "description": "The error message",
                    "type": "String"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 267,
            "description": "Fired when the API cannot be called",
            "itemtype": "event",
            "name": "remoteFailed",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 272,
            "description": "There was a problem with the API call",
            "itemtype": "event",
            "name": "remoteError",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 277,
            "description": "Event when the application gives the load done signal",
            "itemtype": "event",
            "name": "opened",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 282,
            "description": "Event when a application starts closing",
            "itemtype": "event",
            "name": "close",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 287,
            "description": "Event when a application closes",
            "itemtype": "event",
            "name": "closed",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 292,
            "description": "Event when a application start loading",
            "itemtype": "event",
            "name": "open",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 297,
            "description": "Fired when the enabled status of the help button changes",
            "itemtype": "event",
            "name": "helpEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "If the help button is enabled",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 303,
            "description": "The features supported by the application",
            "itemtype": "event",
            "name": "features",
            "params": [
                {
                    "name": "data.vo",
                    "description": "If VO vo context is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.music",
                    "description": "If music context is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.sound",
                    "description": "If Sound is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.sfx",
                    "description": "If SFX context is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.learning",
                    "description": "If learning dispatcher is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.captions",
                    "description": "If captions is supported",
                    "type": "Boolean"
                },
                {
                    "name": "data.hints",
                    "description": "If hinting is supported",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 315,
            "description": "Event when dispatching a Learning Dispatcher event",
            "itemtype": "event",
            "name": "learningEvent",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 321,
            "description": "Event when dispatching a Google Analytics event",
            "itemtype": "event",
            "name": "analyticEvent",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "category",
                            "description": "The event category",
                            "type": "String"
                        },
                        {
                            "name": "action",
                            "description": "The event action",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The optional label",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "description": "The optional value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 331,
            "description": "Open a application or path",
            "itemtype": "method",
            "name": "_internalOpen",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "path",
                    "description": "The full path to the application to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The open options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singlePlay",
                            "description": "If we should play in single play mode",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "playOptions",
                            "description": "The optional play options",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 381,
            "description": "Open a application or path",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "path",
                    "description": "The full path to the application to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The open options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singlePlay",
                            "description": "If we should play in single play mode",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "playOptions",
                            "description": "The optional play options",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 404,
            "description": "Open application based on an API Call to SpringRoll Connect",
            "itemtype": "method",
            "name": "openRemote",
            "params": [
                {
                    "name": "api",
                    "description": "The path to API call, this can be a full URL",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The open options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "singlePlay",
                            "description": "If we should play in single play mode",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "playOptions",
                            "description": "The optional play options",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "query",
                            "description": "The application query string options (e.g., \"?level=1\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 459,
            "description": "Set up communication layer between site and application.\nMay be called from subclasses if they create/destroy Bellhop instances.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "initClient",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 487,
            "description": "Removes the Bellhop communication layer altogether.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "destroyClient",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 501,
            "description": "Reset the mutes for audio and captions",
            "itemtype": "method",
            "name": "onLoadDone",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 537,
            "description": "Handle focus events sent from iFrame children",
            "itemtype": "method",
            "name": "onFocus",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 548,
            "description": "Handle focus events sent from container's window",
            "itemtype": "method",
            "name": "onContainerFocus",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 559,
            "description": "Handle blur events sent from container's window",
            "itemtype": "method",
            "name": "onContainerBlur",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 574,
            "description": "Focus on the iframe's contentWindow",
            "itemtype": "method",
            "name": "focus",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 583,
            "description": "Unfocus on the iframe's contentWindow",
            "itemtype": "method",
            "name": "blur",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 592,
            "description": "Manage the focus change events sent from window and iFrame",
            "itemtype": "method",
            "name": "manageFocus",
            "access": "protected",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 638,
            "description": "Track an event for springroll Learning",
            "itemtype": "method",
            "name": "onLearningEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The bellhop learningEvent",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 649,
            "description": "Handle the application features",
            "itemtype": "method",
            "name": "onFeatures",
            "params": [
                {
                    "name": "event",
                    "description": "The bellhop features",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 674,
            "description": "Handle the keep focus event for the window",
            "itemtype": "method",
            "name": "onKeepFocus",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 685,
            "description": "Reset the mutes for audio and captions",
            "itemtype": "method",
            "name": "onHelpEnabled",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 695,
            "description": "Track an event for Google Analtyics",
            "itemtype": "method",
            "name": "onAnalyticEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "Bellhop analyticEvent",
                    "type": "Event"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 734,
            "description": "Handler when the play hint button is clicked",
            "itemtype": "method",
            "name": "onPlayHelp",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 747,
            "description": "The application ended and destroyed itself",
            "itemtype": "method",
            "name": "onEndGame",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 759,
            "description": "Handler when the captions mute button is clicked",
            "itemtype": "method",
            "name": "onCaptionsToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 769,
            "description": "If the current application is paused",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 809,
            "description": "Set the captions are muted",
            "itemtype": "property",
            "name": "helpEnabled",
            "type": "Boolean",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 829,
            "description": "Handler when the sound mute button is clicked",
            "itemtype": "method",
            "name": "onSoundToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 843,
            "description": "Handler when the music mute button is clicked",
            "itemtype": "method",
            "name": "onMusicToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 854,
            "description": "Handler when the voice-over mute button is clicked",
            "itemtype": "method",
            "name": "onVOToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 865,
            "description": "Handler when the voice-over mute button is clicked",
            "itemtype": "method",
            "name": "onSFXToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 876,
            "description": "Check for when all mutes are muted or unmuted",
            "itemtype": "method",
            "name": "_checkSoundMute",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 886,
            "description": "Toggle the current paused state of the application",
            "itemtype": "method",
            "name": "onPauseToggle",
            "access": "private",
            "tagname": "",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 897,
            "description": "The name of the saved property if the captions are muted or not",
            "itemtype": "property",
            "name": "CAPTIONS_MUTED",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 906,
            "description": "The name of the saved property if the sound is muted or not",
            "itemtype": "property",
            "name": "SOUND_MUTED",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 915,
            "description": "The name of the saved property if the music is muted or not",
            "itemtype": "property",
            "name": "MUSIC_MUTED",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 924,
            "description": "The name of the saved property if the voice-over is muted or not",
            "itemtype": "property",
            "name": "VO_MUTED",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 933,
            "description": "The name of the saved property if the effects are muted or not",
            "itemtype": "property",
            "name": "SFX_MUTED",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 942,
            "description": "The name of the saved property for the captions styles",
            "itemtype": "property",
            "name": "CAPTIONS_STYLES",
            "type": "String",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 951,
            "description": "The map of the default caption style settings",
            "itemtype": "property",
            "name": "DEFAULT_CAPTIONS_STYLES",
            "type": "Object",
            "static": 1,
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 967,
            "description": "Abstract method to handle the muting",
            "itemtype": "method",
            "name": "_setMuteProp",
            "params": [
                {
                    "name": "prop",
                    "description": "The name of the property to save",
                    "type": "String"
                },
                {
                    "name": "button",
                    "description": "Reference to the jquery button",
                    "type": "Jquery"
                },
                {
                    "name": "muted",
                    "description": "If the button is muted",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 986,
            "description": "Set the captions styles",
            "itemtype": "method",
            "name": "setCaptionsStyles",
            "params": [
                {
                    "name": "styles",
                    "description": "The style options or the name of the\nproperty (e.g., \"color\", \"edge\", \"font\", \"background\", \"size\")",
                    "type": "Object|String",
                    "optional": true,
                    "props": [
                        {
                            "name": "color",
                            "description": "The text color, the default is white",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'white'"
                        },
                        {
                            "name": "edge",
                            "description": "The edge style, default is none",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'none'"
                        },
                        {
                            "name": "font",
                            "description": "The font style, default is arial",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'arial'"
                        },
                        {
                            "name": "background",
                            "description": "The background style, black semi-transparent",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'black-semi'"
                        },
                        {
                            "name": "size",
                            "description": "The font style default is medium",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'md'"
                        },
                        {
                            "name": "align",
                            "description": "The align style default is top of the window",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'top'"
                        }
                    ]
                },
                {
                    "name": "value",
                    "description": "If setting styles parameter as a string, this is the value of the property.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1052,
            "description": "Get the captions styles",
            "itemtype": "method",
            "name": "getCaptionsStyles",
            "params": [
                {
                    "name": "prop",
                    "description": "The optional property, values are \"size\", \"edge\", \"font\", \"background\", \"color\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The collection of styles, see setCaptionsStyles for more info.",
                "type": "Object"
            },
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1064,
            "description": "Reset the captions styles",
            "itemtype": "method",
            "name": "clearCaptionsStyles",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1075,
            "description": "Set the captions are enabled or not",
            "itemtype": "property",
            "name": "captionsMuted",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1093,
            "description": "Set the all sound is enabled or not",
            "itemtype": "property",
            "name": "soundMuted",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1111,
            "description": "Set the voice-over audio is muted",
            "itemtype": "property",
            "name": "voMuted",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1129,
            "description": "Set the music audio is muted",
            "itemtype": "property",
            "name": "musicMuted",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1147,
            "description": "Set the sound effect audio is muted",
            "itemtype": "property",
            "name": "sfxMuted",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1165,
            "description": "Reset all the buttons back to their original setting\nand clear the iframe.",
            "itemtype": "method",
            "name": "reset",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1193,
            "description": "Tell the application to start closing",
            "itemtype": "method",
            "name": "close",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1210,
            "description": "Disable a button",
            "itemtype": "method",
            "name": "disableButton",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "button",
                    "description": "The button to disable",
                    "type": "Jquery"
                }
            ],
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Container.js",
            "line": 1222,
            "description": "Destroy and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Container",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 22,
            "description": "The default play-mode for the application is continuous, if the application is\nrunning as part of a sequence is it considered in \"single play\" mode\nand the application will therefore close itself.",
            "itemtype": "property",
            "name": "options.singlePlay",
            "type": "Boolean",
            "readonly": "",
            "default": "false",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 32,
            "description": "The optional play options to use if the application is played in \"single play\"\nmode. These options are passed from the application container to specify\noptions that are used for this single play session. For instance,\nif you want the single play to focus on a certain level or curriculum\nsuch as `{ \"shape\": \"square\" }`",
            "itemtype": "property",
            "name": "options.playOptions",
            "type": "Object",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 43,
            "description": "Send a message to let the site know that this has\nbeen loaded, if the site is there",
            "itemtype": "property",
            "name": "container",
            "type": "Bellhop",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 51,
            "description": "This option tells the container to always keep focus on the iframe even\nwhen the focus is lost. This is useful mostly if your Application\nrequires keyboard input.",
            "itemtype": "property",
            "name": "options.keepFocus",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 81,
            "description": "The default play-mode for the application is continuous, if the application is\nrunning as part of a sequence is it considered in \"single play\" mode\nand the application will therefore close itself.",
            "itemtype": "property",
            "name": "singlePlay",
            "type": "Boolean",
            "readonly": "",
            "default": "false",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 91,
            "description": "The optional play options to use if the application is played in \"single play\"\nmode. These options are passed from the application container to specify\noptions that are used for this single play session. For instance,\nif you want the single play to focus on a certain level or curriculum\nsuch as `{ \"shape\": \"square\" }`",
            "itemtype": "property",
            "name": "playOptions",
            "type": "Object",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 102,
            "description": "When a application is in singlePlay mode it will end.\nIt's unnecessary to check `if (this.singlePlay)` just\ncall the method and it will end the application if it can.",
            "itemtype": "method",
            "name": "singlePlayEnd",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 116,
            "description": "Manually close the application, this can happen when playing through once",
            "itemtype": "method",
            "name": "endGame",
            "params": [
                {
                    "name": "exitType",
                    "description": "The type of exit",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'game_completed'"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 127,
            "description": "Track a Google Analytics event",
            "itemtype": "method",
            "name": "analyticEvent",
            "params": [
                {
                    "name": "action",
                    "description": "The action label",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The optional label for the event",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "The optional value for the event",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 222,
            "description": "When the container pauses the application",
            "itemtype": "method",
            "name": "onPause",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The Bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 234,
            "description": "Handler when the sound is muted",
            "itemtype": "method",
            "name": "onSoundMuted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 248,
            "description": "Handler when the captions are muted",
            "itemtype": "method",
            "name": "onCaptionsMuted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 262,
            "description": "Handler when the context is muted",
            "itemtype": "method",
            "name": "onContextMuted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the sound context",
                    "type": "String"
                },
                {
                    "name": "e",
                    "description": "The bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 277,
            "description": "The captions style is being set",
            "itemtype": "method",
            "name": "onCaptionsStyles",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 301,
            "description": "Handler when a application enters single play mode",
            "itemtype": "method",
            "name": "onPlayOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The Bellhop event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 312,
            "description": "Handler when a application enters single play mode",
            "itemtype": "method",
            "name": "onSinglePlay",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/ContainerPlugin.js",
            "line": 322,
            "description": "Game container requests closing the application",
            "itemtype": "method",
            "name": "onClose",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Container Client",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 15,
            "description": "If the browser has flash",
            "itemtype": "property",
            "name": "flash",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 42,
            "description": "If the browser has WebGL support",
            "itemtype": "property",
            "name": "webgl",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 57,
            "description": "If the browser has Canvas support",
            "itemtype": "property",
            "name": "canvas",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 67,
            "description": "If the browser has WebAudio API support",
            "itemtype": "property",
            "name": "webaudio",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 76,
            "description": "If the browser has Web Sockets API",
            "itemtype": "property",
            "name": "websockets",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 85,
            "description": "If the browser has Geolocation API",
            "itemtype": "property",
            "name": "geolocation",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 94,
            "description": "If the browser has Web Workers API",
            "itemtype": "property",
            "name": "webworkers",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 103,
            "description": "If the browser has touch",
            "itemtype": "property",
            "name": "touch",
            "type": "Boolean",
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 114,
            "description": "Test for basic browser compatiliblity",
            "itemtype": "method",
            "name": "basic",
            "static": 1,
            "return": {
                "description": "The error message, if fails",
                "type": "String"
            },
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/container/Features.js",
            "line": 133,
            "description": "See if the current bowser has the correct features",
            "itemtype": "method",
            "name": "test",
            "static": 1,
            "params": [
                {
                    "name": "capabilities",
                    "description": "The capabilities",
                    "type": "Object",
                    "props": [
                        {
                            "name": "features",
                            "description": "The features",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "webgl",
                                    "description": "WebGL required",
                                    "type": "Object"
                                },
                                {
                                    "name": "geolocation",
                                    "description": "Geolocation required",
                                    "type": "Object"
                                },
                                {
                                    "name": "webworkers",
                                    "description": "Web Workers API required",
                                    "type": "Object"
                                },
                                {
                                    "name": "webaudio",
                                    "description": "WebAudio API required",
                                    "type": "Object"
                                },
                                {
                                    "name": "websockets",
                                    "description": "WebSockets required",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "sizes",
                            "description": "The sizes",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "xsmall",
                                    "description": "Screens < 480",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "small",
                                    "description": "Screens < 768",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "medium",
                                    "description": "Screens < 992",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "large",
                                    "description": "Screens < 1200",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "xlarge",
                                    "description": "Screens >= 1200",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "ui",
                            "description": "The ui",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "touch",
                                    "description": "Touch capable",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "mouse",
                                    "description": "Mouse capable",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The error, or else returns null",
                "type": "String|null"
            },
            "class": "springroll.Features",
            "module": "Container",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/CombinedCallback.js",
            "line": 34,
            "description": "Creates a CombinedCallback for use.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "call",
                    "description": "The callback to call when everything is complete.",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object to check as an additional completion dependency.",
                    "type": "*"
                },
                {
                    "name": "prop",
                    "description": "The property to check on obj. If obj[prop] is false, then it is considered complete.",
                    "type": "String"
                },
                {
                    "name": "callProp",
                    "description": "The property to set on obj if obj[prop] is true when the CombinedCallback is called.",
                    "type": "String"
                }
            ],
            "class": "springroll.CombinedCallback",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 52,
            "description": "The function to call when the delay is completed.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 59,
            "description": "The delay time, in milliseconds.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_delay",
            "type": "Int",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 66,
            "description": "The timer counting down from _delay, in milliseconds.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_timer",
            "type": "Int",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 73,
            "description": "If the DelayedCall should repeat itself automatically.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_repeat",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 81,
            "description": "If the DelayedCall should destroy itself after completing",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_autoDestroy",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 89,
            "description": "If the DelayedCall should use frames instead of milliseconds for the delay.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_useFrames",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 97,
            "description": "If the DelayedCall is currently paused (not stopped).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 113,
            "description": "The callback supplied to the Application for an update each frame.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                }
            ],
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 140,
            "description": "Restarts the DelayedCall, whether it is running or not.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "restart",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 155,
            "description": "Stops the DelayedCall, without destroying it.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 166,
            "description": "If the DelayedCall is paused or not.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/DelayedCall.js",
            "line": 194,
            "description": "Stops and cleans up the DelayedCall. Do not use it after calling\ndestroy().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.DelayedCall",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/async/async.js",
            "line": 13,
            "description": "Process the next task",
            "itemtype": "method",
            "name": "setImmediate",
            "params": [
                {
                    "name": "fn",
                    "description": "The next process function to call",
                    "type": "Function"
                }
            ],
            "class": "window.async",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/core/async/async.js",
            "line": 23,
            "description": "Async waterfall",
            "itemtype": "method",
            "name": "waterfall",
            "params": [
                {
                    "name": "tasks",
                    "description": "Collection of functions",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback when all functions are called",
                    "type": "Function"
                }
            ],
            "class": "window.async",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/core/async/async.js",
            "line": 76,
            "description": "Async waterfall",
            "itemtype": "method",
            "name": "iterator",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "tasks",
                    "description": "Collection of functions",
                    "type": "Array"
                }
            ],
            "class": "window.async",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 23,
            "description": "The name of the value, for reflection or logging purposes.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "springroll.EnumValue",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 28,
            "description": "The integer value of this enum entry.",
            "itemtype": "property",
            "name": "_value",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.EnumValue",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 34,
            "description": "A string for toString() to return, instead of the name.",
            "itemtype": "property",
            "name": "_toString",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.EnumValue",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 42,
            "description": "The integer value of this enum entry.",
            "itemtype": "property",
            "name": "asInt",
            "type": "Int",
            "class": "springroll.EnumValue",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 95,
            "description": "A potentially sparse array of each enum value, stored by integer values.",
            "itemtype": "property",
            "name": "_byValue",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 107,
            "description": "The values that this Enum was initialized with. We save this so\nthat we can potentially pass this via Bellhop and re-initialize.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "rawEnumValues",
            "type": "Array",
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 173,
            "description": "The count of values the enum was initialized with.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "length",
            "type": "Int",
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 185,
            "description": "Retrieves the next EnumValue in the Enum (loops to first value at end).",
            "itemtype": "method",
            "name": "input",
            "type": "EnumValue",
            "return": {
                "description": "",
                "type": "EnumValue"
            },
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 206,
            "description": "Retrieves the first EnumValue in the Enum",
            "itemtype": "method",
            "name": "input",
            "type": "EnumValue",
            "return": {
                "description": "",
                "type": "EnumValue"
            },
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 218,
            "description": "Retrieves the last EnumValue in the Enum",
            "itemtype": "method",
            "name": "input",
            "type": "EnumValue",
            "return": {
                "description": "",
                "type": "EnumValue"
            },
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/Enum.js",
            "line": 231,
            "description": "Gets an enum value by integer value. If you have multiple enum values with the same integer\nvalue, this will always retrieve the first enum value.",
            "itemtype": "method",
            "name": "valueFromInt",
            "type": "Array",
            "params": [
                {
                    "name": "input",
                    "description": "The integer value to get an enum value for.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The EnumValue that represents the input integer.",
                "type": "EnumValue"
            },
            "class": "springroll.Enum",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 14,
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 17,
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 34,
            "description": "Remove a saved variable by name.",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to remove",
                    "type": "String"
                }
            ],
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 51,
            "description": "Save a variable.",
            "itemtype": "method",
            "name": "write",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to save",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to save. This will be run through JSON.stringify().",
                    "type": "Mixed"
                },
                {
                    "name": "tempOnly",
                    "description": "If the value should be saved only in the current browser session.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 85,
            "description": "Read the value of a saved variable",
            "itemtype": "method",
            "name": "read",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the variable",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value (run through `JSON.parse()`) or null if it doesn't exist",
                "type": "Mixed"
            },
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/SavedData.js",
            "line": 118,
            "description": "When restoring from JSON via `JSON.parse`, we may pass a reviver function.\nIn our case, this will check if the object has a specially-named property (`__classname`).\nIf it does, we will attempt to construct a new instance of that class, rather than using a\nplain old Object. Note that this recurses through the object.",
            "see": [
                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"
            ],
            "params": [
                {
                    "name": "key",
                    "description": "each key name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Object that we wish to restore",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object that was parsed - either cast to a class, or not",
                "type": "Object"
            },
            "class": "springroll.SavedData",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/TimeUtils.js",
            "line": 29,
            "description": "This method gets timestamp in micromilliseconds for doing performance\nintense operations. Fallback support is to `Date.now()`. We aren't overridding\n`performance.now()` incase dependencies on this actually demand \nthe optimization and accuracy that performance actually provides.",
            "static": 1,
            "itemtype": "method",
            "name": "now",
            "return": {
                "description": "The number of micromilliseconds of the current timestamp",
                "type": "Int"
            },
            "class": "springroll.TimeUtils",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/utils/WeightedRandom.js",
            "line": 33,
            "description": "Picks an item at random.",
            "itemtype": "method",
            "name": "random",
            "return": {
                "description": "The randomly chosen value.",
                "type": "String"
            },
            "class": "springroll.WeightedRandom",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 25,
            "description": "The user input options",
            "itemtype": "property",
            "name": "_options",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 32,
            "description": "Reference to the application",
            "itemtype": "property",
            "name": "_app",
            "type": "springroll.Application",
            "access": "private",
            "tagname": "",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 43,
            "description": "Initialize the values in the options",
            "itemtype": "method",
            "name": "init",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 103,
            "description": "Get the query string as an object",
            "itemtype": "property",
            "name": "getQueryString",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 138,
            "description": "Convert a string into a DOM Element",
            "access": "private",
            "tagname": "asDOMElement",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to fetch",
                    "type": "String"
                }
            ],
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 152,
            "description": "Override a default value",
            "access": "private",
            "tagname": "override",
            "params": [
                {
                    "name": "name",
                    "description": "The property name to fetch",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value",
                    "type": "*"
                }
            ],
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 167,
            "description": "The default Application options",
            "itemtype": "property",
            "name": "defaultOptions",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 174,
            "description": "Use Request Animation Frame API",
            "itemtype": "property",
            "name": "raf",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 181,
            "description": "The framerate to use for rendering the stage",
            "itemtype": "property",
            "name": "fps",
            "type": "Int",
            "default": "60",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 188,
            "description": "Use the query string parameters for options overrides",
            "itemtype": "property",
            "name": "useQueryString",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 195,
            "description": "The default display DOM ID name",
            "itemtype": "property",
            "name": "canvasId",
            "type": "String",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 201,
            "description": "The name of the class to automatically instantiate as the\ndisplay (e.g. `springroll.PixiDisplay`)",
            "itemtype": "property",
            "name": "display",
            "type": "Function",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 208,
            "description": "Display specific setup options",
            "itemtype": "property",
            "name": "displayOptions",
            "type": "Object",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 214,
            "description": "If using TweenJS, the Application will update the Tween itself.",
            "itemtype": "property",
            "name": "updateTween",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 221,
            "description": "Used by `springroll.PixiTask`, default behavior\nis to load assets from the same domain.",
            "itemtype": "property",
            "name": "crossOrigin",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationOptions.js",
            "line": 229,
            "description": "The name of the application",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "springroll.ApplicationOptions",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationPlugin.js",
            "line": 20,
            "description": "The priority of the plugin. Higher numbers handled first. This should be set\nin the constructor of the extending ApplicationPlugin.",
            "itemtype": "property",
            "name": "priority",
            "type": "Int",
            "default": "0",
            "class": "springroll.ApplicationPlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationPlugin.js",
            "line": 36,
            "description": "When the application is being initialized. This function is bound to the application.",
            "itemtype": "method",
            "name": "setup",
            "class": "springroll.ApplicationPlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationPlugin.js",
            "line": 45,
            "description": "The function to call right before the app is initailized. This function is bound to the application.",
            "itemtype": "method",
            "name": "preload",
            "params": [
                {
                    "name": "done",
                    "description": "The done function, takes one argument for an error.",
                    "type": "Function"
                }
            ],
            "class": "springroll.ApplicationPlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationPlugin.js",
            "line": 52,
            "description": "When the application is being destroyed. This function is bound to the application.",
            "itemtype": "method",
            "name": "teardown",
            "class": "springroll.ApplicationPlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ApplicationPlugin.js",
            "line": 61,
            "description": "Comparator function for sorting the plugins by priority",
            "itemtype": "method",
            "name": "prioritySort",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "First plugin",
                    "type": "springroll.ApplicationPlugin"
                },
                {
                    "name": "b",
                    "description": "Second plugin",
                    "type": "springroll.ApplicationPlugin"
                }
            ],
            "class": "springroll.ApplicationPlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 19,
            "description": "Callback when the page becomes visible",
            "itemtype": "property",
            "name": "_onFocus",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 26,
            "description": "Callback when the page loses visibility",
            "itemtype": "property",
            "name": "_onBlur",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 33,
            "description": "If this object is enabled.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 43,
            "description": "The visibility toggle listener function",
            "itemtype": "property",
            "name": "_onToggle",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 62,
            "description": "The name of the visibility change event for the browser",
            "itemtype": "property",
            "name": "_visibilityChange",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 90,
            "description": "If this object is enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibility.js",
            "line": 136,
            "description": "Disable the detection",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.PageVisibility",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibilityPlugin.js",
            "line": 17,
            "description": "Handles the page visiblity changes automatically\nto pause and unpause the application",
            "itemtype": "property",
            "name": "_visibility",
            "type": "springroll.PageVisibility",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibilityPlugin.js",
            "line": 29,
            "description": "The application pauses automatically when the window loses focus.",
            "itemtype": "property",
            "name": "options.autoPause",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibilityPlugin.js",
            "line": 45,
            "description": "Private listener for when the page is hidden.",
            "itemtype": "method",
            "name": "onHidden",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/PageVisibilityPlugin.js",
            "line": 55,
            "description": "Private listener for when the page is shown.",
            "itemtype": "method",
            "name": "onVisible",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 17,
            "description": "Dom element (or the window) to attach resize listeners and read the size from",
            "itemtype": "property",
            "name": "_resizeElement",
            "type": "DOMElement|Window|null",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 25,
            "description": "The maximum width of the primary display, compared to the original height.",
            "itemtype": "property",
            "name": "_maxWidth",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 32,
            "description": "The maximum height of the primary display, compared to the original width.",
            "itemtype": "property",
            "name": "_maxHeight",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 39,
            "description": "The original width of the primary display, used to calculate the aspect ratio.",
            "itemtype": "property",
            "name": "_originalWidth",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 46,
            "description": "The original height of the primary display, used to calculate the aspect ratio.",
            "itemtype": "property",
            "name": "_originalHeight",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 53,
            "description": "A helper object to avoid object creation each resize event.",
            "itemtype": "property",
            "name": "_resizeHelper",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 66,
            "description": "Fired when a resize is called",
            "itemtype": "event",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The width of the resize element",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height of the resize element",
                    "type": "Int"
                }
            ],
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 73,
            "description": "If doing uniform resizing, optional parameter to add\na maximum width relative to the original height. This\nallows for \"title-safe\" responsiveness. Must be greater\nthan the original width of the canvas.",
            "itemtype": "property",
            "name": "options.maxWidth",
            "type": "Int",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 82,
            "description": "If doing uniform resizing, optional parameter to add\na maximum height relative to the original width. This\nallows for \"title-safe\" responsiveness. Must be greater\nthan the original height of the canvas.",
            "itemtype": "property",
            "name": "options.maxHeight",
            "type": "Int",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 91,
            "description": "Whether to resize the displays to the original aspect ratio",
            "itemtype": "property",
            "name": "options.uniformResize",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 98,
            "description": "The element to resize the canvas to fit",
            "itemtype": "property",
            "name": "options.resizeElement",
            "type": "DOMElement|String",
            "default": "'frame'",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 127,
            "description": "Fire a resize event with the current width and height of the display",
            "itemtype": "method",
            "name": "triggerResize",
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/ResizePlugin.js",
            "line": 163,
            "description": "Calculates the resizing of displays. By default, this limits the new size\nto the initial aspect ratio of the primary display. Override this function\nif you need variable aspect ratios.",
            "itemtype": "method",
            "name": "calculateDisplaySize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "size",
                    "description": "A size object containing the width and height of the resized container.\n                     The size parameter is also the output of the function, so the size\n                     properties are edited in place.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "The width of the resized container.",
                            "type": "Int"
                        },
                        {
                            "name": "height",
                            "description": "The height of the resized container.",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "springroll.ResizePlugin",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/StringFilters.js",
            "line": 14,
            "description": "Dictionary of filters",
            "itemtype": "property",
            "name": "_filters",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.StringFilters",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/StringFilters.js",
            "line": 25,
            "description": "Register a filter",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "replace",
                    "description": "The string or regex to replace",
                    "type": "String|RegExp"
                },
                {
                    "name": "replacement",
                    "description": "String to repalce with",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "springroll.StringFilters",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/StringFilters.js",
            "line": 70,
            "description": "Test a string against all registered filters",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "springroll.StringFilters",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/StringFilters.js",
            "line": 91,
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "class": "springroll.StringFilters",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/core/StringFiltersPlugin.js",
            "line": 17,
            "description": "The StringFilters instance",
            "itemtype": "property",
            "name": "filters",
            "type": "springroll.StringFilters",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 21,
            "description": "If we have a console",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_hasConsole",
            "type": "Boolean",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 29,
            "description": "If the console supports coloring",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_consoleSupportsColors",
            "type": "Boolean",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 83,
            "description": "The levels of logging",
            "itemtype": "property",
            "name": "Levels",
            "type": "springroll.Enum",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 90,
            "description": "The most basic general log level",
            "itemtype": "property",
            "name": "Levels.GENERAL",
            "type": "Int",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 97,
            "description": "The debug log level, more priority than GENERAL",
            "itemtype": "property",
            "name": "Levels.DEBUG",
            "type": "Int",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 104,
            "description": "The info log level, more priority than DEBUG",
            "itemtype": "property",
            "name": "Levels.DEBUG",
            "type": "Int",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 111,
            "description": "The warn log level, more priority than WARN",
            "itemtype": "property",
            "name": "Levels.WARN",
            "type": "Int",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 118,
            "description": "The error log level, the most priority log level",
            "itemtype": "property",
            "name": "Levels.ERROR",
            "type": "Int",
            "static": 1,
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 126,
            "description": "The minimum log level to show, by default it's set to\nshow all levels of logging.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "minLogLevel",
            "type": "Int",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 135,
            "description": "Boolean to turn on or off the debugging",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 143,
            "description": "The DOM element to output debug messages to",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "output",
            "type": "DOMElement",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 152,
            "description": "Browser port for the websocket - browsers tend to block lower ports",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "NET_PORT",
            "type": "Int",
            "default": "1026",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 161,
            "description": "If the WebSocket is connected",
            "static": 1,
            "access": "private",
            "tagname": "",
            "default": "false",
            "itemtype": "property",
            "name": "_useSocket",
            "type": "Boolean",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 170,
            "description": "The socket connection",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_socket",
            "type": "WebSocket",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 178,
            "description": "The current message object being sent to the `WebSocket`",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_socketMessage",
            "type": "Object",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 186,
            "description": "The `WebSocket` message queue",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_socketQueue",
            "type": "Array",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 201,
            "description": "Methods names to use to strip out lines from stack traces\nin remote logging.",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "methodsToStrip",
            "type": "Array",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 242,
            "description": "Regular expression to get the line number and column from a stack trace line.",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "lineLocationFinder",
            "type": "RegEx",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 250,
            "description": "Connect to the `WebSocket`",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "host",
                    "description": "The remote address to connect to, IP address or host name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If a connection was attempted",
                "type": "Boolean"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 281,
            "description": "Disconnect from the `WebSocket`",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "disconnect",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 296,
            "description": "Callback when the `WebSocket` is connected",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "onConnect",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 326,
            "description": "Global window error handler, used for remote connections.",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "globalErrorHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "The url of the file",
                    "type": "String"
                },
                {
                    "name": "line",
                    "description": "The line within the file",
                    "type": "Int"
                },
                {
                    "name": "column",
                    "description": "The column within the line",
                    "type": "Int"
                },
                {
                    "name": "error",
                    "description": "The error itself",
                    "type": "Error"
                }
            ],
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 344,
            "description": "Callback for when the websocket is closed",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "onClose",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 363,
            "description": "Sent to the output",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "domOutput",
            "params": [
                {
                    "name": "level",
                    "description": "The log level",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Additional arguments",
                    "type": "String"
                }
            ],
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 379,
            "description": "Send a remote log message using the socket connection",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_remoteLog",
            "params": [
                {
                    "name": "message",
                    "description": "The message to send",
                    "type": "Array"
                },
                {
                    "name": "level",
                    "description": "The log level to send",
                    "type": "Level",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "stack",
                    "description": "A stack to use for the message. A stack will be created if stack\n                        is omitted.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 539,
            "description": "An array for preventing circular references",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "circularArray",
            "type": "Array",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 547,
            "description": "Strip out known circular references",
            "itemtype": "method",
            "name": "removeCircular",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to remove references from",
                    "type": "Object"
                }
            ],
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 631,
            "description": "Log something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 661,
            "description": "Debug something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to debug",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 702,
            "description": "Info something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to info",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 732,
            "description": "Warn something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to warn",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 762,
            "description": "Error something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to error",
                    "type": "*"
                }
            ],
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 791,
            "description": "Assert that something is true",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "truth",
                    "description": "As statement that is assumed true",
                    "type": "Boolean"
                },
                {
                    "name": "params",
                    "description": "The message to error if the assert is false",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 819,
            "description": "Method to describe an object in the console",
            "static": 1,
            "itemtype": "method",
            "name": "dir",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "The object to describe in the console",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 846,
            "description": "Method to clear the console",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 873,
            "description": "Generate a stack track in the output",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "trace",
            "params": [
                {
                    "name": "params",
                    "description": "Optional parameters to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 900,
            "description": "Starts a new logging group with an optional title. All console output that\noccurs after calling this method and calling `Debug.groupEnd()` appears in\nthe same visual group.",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "group",
            "params": [
                {
                    "name": "params",
                    "description": "Optional parameters to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 924,
            "description": "Creates a new logging group that is initially collapsed instead of open,\nas with `Debug.group()`.",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "groupCollapsed",
            "params": [
                {
                    "name": "params",
                    "description": "Optional parameters to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 947,
            "description": "Starts a new logging group with an optional title. All console output that\noccurs after calling this method and calling console.groupEnd() appears in\nthe same visual group.",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "groupEnd",
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 970,
            "description": "List of hex colors to create Debug shortcuts for.\nEach key will become a function Debug[key]() that outputs\nthe message in the specified color to the console if\nthe browsers allows colored logging.\nColor Palette pulled from \"Better CSS Defaults\"\n(https://github.com/mrmrs/colors)",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "_palette",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 983,
            "description": "Output a general log colored as navy",
            "itemtype": "method",
            "name": "navy",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 992,
            "description": "Output a general log colored as blue",
            "itemtype": "method",
            "name": "blue",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1001,
            "description": "Output a general log colored as aqua",
            "itemtype": "method",
            "name": "aqua",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1010,
            "description": "Output a general log colored as teal",
            "itemtype": "method",
            "name": "teal",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1019,
            "description": "Output a general log colored as olive",
            "itemtype": "method",
            "name": "olive",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1027,
            "description": "Output a general log colored as green",
            "itemtype": "method",
            "name": "green",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1036,
            "description": "Output a general log colored as lime",
            "itemtype": "method",
            "name": "lime",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1045,
            "description": "Output a general log colored as yellow",
            "itemtype": "method",
            "name": "yellow",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1054,
            "description": "Output a general log colored as orange",
            "itemtype": "method",
            "name": "orange",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1063,
            "description": "Output a general log colored as red",
            "itemtype": "method",
            "name": "red",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1072,
            "description": "Output a general log colored as pink",
            "itemtype": "method",
            "name": "pink",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1081,
            "description": "Output a general log colored as purple",
            "itemtype": "method",
            "name": "purple",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1090,
            "description": "Output a general log colored as maroon",
            "itemtype": "method",
            "name": "maroon",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1099,
            "description": "Output a general log colored as silver",
            "itemtype": "method",
            "name": "silver",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1108,
            "description": "Output a general log colored as gray",
            "itemtype": "method",
            "name": "gray",
            "static": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The instance of debug for chaining",
                "type": "Debug"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1118,
            "description": "Loop through each item in the _palette object and create\na static function in Debug via the key (the color name) that\noutputs a message to the console in key's value (a hex color).",
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/Debug.js",
            "line": 1131,
            "description": "Due to the way closures and variables work, _colorClosure returns\nthe color logging function needed for the color that you pass it.",
            "itemtype": "method",
            "name": "_colorClosure",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hex",
                    "description": "Hex value to apply to CSS color",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "springroll.Debug",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 14,
            "description": "The space between columns",
            "itemtype": "property",
            "name": "COLUMN_BUFFER",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "final": 1,
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 23,
            "description": "The collections of options",
            "itemtype": "property",
            "name": "_options",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 30,
            "description": "The maximum length of the label column",
            "itemtype": "property",
            "name": "_maxLabel",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 37,
            "description": "The maximum length of the type column",
            "itemtype": "property",
            "name": "_maxType",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 44,
            "description": "Config object for the CSS styles throughout",
            "itemtype": "property",
            "name": "CSS",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "final": 1,
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 58,
            "description": "The header for the final log",
            "itemtype": "property",
            "name": "HEADER",
            "type": "String",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "final": 1,
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 67,
            "description": "The map of different basic types of options.",
            "itemtype": "property",
            "name": "TYPES",
            "type": "String",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "final": 1,
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 81,
            "description": "Define a int query parameter.",
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "label",
                    "description": "The label for the options",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "Description of values the option can accept",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 94,
            "description": "Define a boolean query parameter",
            "itemtype": "method",
            "name": "boolean",
            "params": [
                {
                    "name": "label",
                    "description": "The label for the options",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "Description of values the option can accept",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 107,
            "description": "Define a string query parameter",
            "itemtype": "method",
            "name": "string",
            "params": [
                {
                    "name": "label",
                    "description": "The label for the options",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "Description of values the option can accept",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 120,
            "description": "Define a number query parameter",
            "itemtype": "method",
            "name": "number",
            "params": [
                {
                    "name": "label",
                    "description": "The label for the options",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "Description of values the option can accept",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 133,
            "description": "Define a number query parameter",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "label",
                    "description": "The label for the options",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of value the option accepts",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "Description of values the option can accept",
                    "type": "String",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 155,
            "description": "Build the log and final argument array for the\noptions output console.log();",
            "itemtype": "method",
            "name": "log",
            "static": 1,
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 220,
            "description": "Forget all the options that have been remembered",
            "itemtype": "method",
            "name": "reset",
            "static": 1,
            "return": {
                "description": "instance of this DebugOptions for chaining",
                "type": "springroll.DebugOptions"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugOptions.js",
            "line": 235,
            "description": "Generate a spacer slug. Returned object is concatenated\nspace character, i.e. ' ', to the specified count.",
            "itemtype": "method",
            "name": "spacer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "count",
                    "description": "How many characters the spacer needs",
                    "type": "Int"
                },
                {
                    "name": "str",
                    "description": "The input string to add spaces to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "springroll.DebugOptions",
            "module": "Debug",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugPlugin.js",
            "line": 19,
            "description": "Enable the Debug class. After initialization, this\nis a pass-through to Debug.enabled.",
            "itemtype": "property",
            "name": "options.debug",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugPlugin.js",
            "line": 27,
            "description": "Minimum log level from 0 to 4",
            "itemtype": "property",
            "name": "options.minLogLevel",
            "type": "Int",
            "default": "0",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugPlugin.js",
            "line": 34,
            "description": "The framerate container",
            "itemtype": "property",
            "name": "options.framerate",
            "type": "String|DOMElement",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugPlugin.js",
            "line": 40,
            "description": "The framerate container",
            "itemtype": "property",
            "name": "_framerate",
            "type": "DOMElement",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/debug/DebugPlugin.js",
            "line": 47,
            "description": "The host computer for remote debugging, the debug\nmodule must be included to use this feature. Can be an\nIP address or host name. After initialization, setting\nthis will still connect or disconect Debug for remote\ndebugging. This is a write-only property.",
            "itemtype": "property",
            "name": "options.debugRemote",
            "type": "String",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 23,
            "description": "If we fire debug statements",
            "itemtype": "property",
            "name": "debug",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 32,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "springroll.Captions",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 40,
            "description": "The collection of timelines",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 48,
            "description": "A collection of timelines for removal - kept out here so it doesn't need to be\nreallocated every frame",
            "itemtype": "property",
            "name": "_removedTimelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 57,
            "itemtype": "property",
            "name": "_timelinesMap",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 64,
            "description": "If the Animator is paused",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 72,
            "description": "Sets the variables of the Animator to their defaults. Use when _timelines is null,\nif the Animator data was cleaned up but was needed again later.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 90,
            "description": "Stops all animations and cleans up the variables used.",
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 106,
            "description": "Play an animation for a frame label event",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip or display object with the same API\n                                        to animate.",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "eventList",
                    "description": "One of or an array of the following\n* objects in the format:\n\n       {\n           anim:\"myAnim\",\n           start:0,\n           speed:1,\n           audio:{alias:\"MyAlias\", start:300}\n       }\n\n   * anim is the frame label of the animation to play, e.g. \"onClose\" to \"onClose_stop\".\n   * start is milliseconds into the animation to start (0 if omitted). A value of -1\n       starts from a random time in the animation.\n   * speed is a multiplier for the animation speed (1 if omitted).\n   * audio is audio to sync the animation to using springroll.Sound. audio can be a String\n       if you want the audio to start 0 milliseconds into the animation.\n* strings - frame labels, e.g. \"onClose\" to \"onClose_stop\".\n* numbers - milliseconds to wait.\n* functions - called upon reaching, followed immediately by the next item.",
                    "type": "String|Object|Array"
                },
                {
                    "name": "onComplete",
                    "description": "The callback function for when the animation is done.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancelled",
                    "description": "A callback function for when an animation is\n                                        stopped with Animator.stop() or to play another\n                                        animation. A value of 'true' uses onComplete for\n                                        onCancelled.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Timeline object that represents this play() call.",
                "type": "springroll.easeljs.AnimatorTimeline"
            },
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 222,
            "description": "Creates the AnimatorTimeline for a given animation",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance to animate",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "eventList",
                    "description": "List of animation events",
                    "type": "Array"
                },
                {
                    "name": "onComplete",
                    "description": "The function to callback when we're done",
                    "type": "Function"
                },
                {
                    "name": "onCancelled",
                    "description": "The function to callback when cancelled",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "springroll.easeljs.AnimatorTimeline"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 367,
            "description": "Determines if a given instance can be animated by Animator, to allow things that aren't\nMovieClips from EaselJS to be animated if they share the same API. Note - 'id' is a property\nwith a unique value for each createjs.DisplayObject. If a custom object is made that does\nnot inherit from DisplayObject, it needs to not have an id that is identical to anything\nfrom EaselJS.",
            "itemtype": "method",
            "name": "canAnimate",
            "params": [
                {
                    "name": "instance",
                    "description": "The object to check for animation properties.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "return": {
                "description": "If the instance can be animated or not.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 397,
            "description": "Checks if animation exists",
            "itemtype": "method",
            "name": "instanceHasAnimation",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to check",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose_stop\")",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "does this animation exist?",
                "type": "Boolean"
            },
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 433,
            "description": "Get duration of animation event (or sequence of events) in seconds",
            "itemtype": "method",
            "name": "getDuration",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to check",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event or array, in the format that play() uses.",
                    "type": "String|Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "Duration of animation event in milliseconds",
                "type": "Number"
            },
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 501,
            "description": "Stop the animation.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to stop the action on",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "removeCallbacks",
                    "description": "Completely disregard the on complete or\n                                         on cancelled callback of this animation.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 526,
            "description": "Stop all current Animator animations.\nThis is good for cleaning up all animation, as it doesn't do a callback on any of them.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "container",
                    "description": "Specify a container to stop timelines\n                                        contained within. This only checks one layer deep.",
                    "type": "createjs.Container",
                    "optional": true
                },
                {
                    "name": "removeCallbacks",
                    "description": "Completely disregard the on complete or\n                                         on cancelled callback of the current animations.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 559,
            "description": "Remove a timeline from the stack",
            "itemtype": "method",
            "name": "_remove",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "springroll.easeljs.AnimatorTimeline"
                },
                {
                    "name": "doCancelled",
                    "description": "If we do the on complete callback",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 623,
            "description": "Pause all tweens which have been excuted by Animator.play()",
            "itemtype": "method",
            "name": "pause",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 644,
            "description": "Resumes all tweens executed by the Animator.play()",
            "itemtype": "method",
            "name": "resume",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 666,
            "description": "Pauses or unpauses all timelines that are children of the specified DisplayObjectContainer.",
            "itemtype": "method",
            "name": "pauseInGroup",
            "params": [
                {
                    "name": "paused",
                    "description": "If this should be paused or unpaused",
                    "type": "Boolean"
                },
                {
                    "name": "container",
                    "description": "The container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 687,
            "description": "Get the timeline object for an instance",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "return": {
                "description": "The timeline",
                "type": "springroll.easeljs.AnimatorTimeline"
            },
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 706,
            "description": "Whether the Animator class is currently paused.",
            "itemtype": "method",
            "name": "getPaused",
            "return": {
                "description": "if we're paused or not",
                "type": "Boolean"
            },
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 717,
            "description": "Start the updating",
            "itemtype": "method",
            "name": "_startUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 730,
            "description": "Stop the updating",
            "itemtype": "method",
            "name": "_stopUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 743,
            "description": "The update every frame",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time in milliseconds since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 913,
            "description": "The sound has been started",
            "itemtype": "method",
            "name": "onSoundStarted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "springroll.easeljs.AnimatorTimeline"
                }
            ],
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 927,
            "description": "The sound is done",
            "itemtype": "method",
            "name": "onSoundDone",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "springroll.easeljs.AnimatorTimeline"
                }
            ],
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 945,
            "description": "Check to see if we have timeline",
            "itemtype": "method",
            "name": "_hasTimelines",
            "return": {
                "description": "if we have timelines",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/Animator.js",
            "line": 959,
            "description": "String representation of this class",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String"
            },
            "static": 1,
            "class": "springroll.easeljs.Animator",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 17,
            "description": "The function to call when we're done",
            "itemtype": "property",
            "name": "onComplete",
            "type": "Function",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 24,
            "description": "The function to call when stopped early.",
            "itemtype": "property",
            "name": "onCancelled",
            "type": "Function",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 31,
            "description": "An array of animations and pauses.",
            "itemtype": "property",
            "name": "eventList",
            "type": "Array",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 38,
            "description": "The index of the active animation in eventList.",
            "itemtype": "property",
            "name": "listIndex",
            "type": "Int",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 44,
            "description": "The instance of the timeline to animate",
            "itemtype": "property",
            "name": "instance",
            "type": "AnimatorTimeline",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 51,
            "description": "The frame number of the first frame of the current animation. If this is -1, then the\nanimation is currently a pause instead of an animation.",
            "itemtype": "property",
            "name": "firstFrame",
            "type": "Int",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 59,
            "description": "The frame number of the last frame of the current animation.",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "Int",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 66,
            "description": "If the current animation loops - determined by looking to see if it ends\n\t\tin \"_stop\" or \"_loop\"",
            "itemtype": "property",
            "name": "isLooping",
            "type": "Boolean",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 74,
            "description": "Length of current animation in frames.",
            "itemtype": "property",
            "name": "length",
            "type": "Int",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 81,
            "description": "If this timeline plays captions for the current sound.",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 89,
            "description": "If the timeline is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 97,
            "description": "The start time of the current animation on the movieclip's timeline.",
            "itemtype": "property",
            "name": "startTime",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 104,
            "description": "The current animation duration in seconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 111,
            "description": "The animation speed for the current animation. Default is 1.",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 118,
            "description": "The position of the current animation in seconds, or the current pause timer.",
            "itemtype": "property",
            "name": "_time_sec",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 125,
            "description": "Sound alias to sync to during the current animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 132,
            "description": "A sound instance object from springroll.Sound, used for tracking sound position for the\ncurrent animation.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 140,
            "description": "If the timeline will, but has yet to play a sound for the current animation.",
            "itemtype": "property",
            "name": "playSound",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 147,
            "description": "The time (seconds) into the current animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 154,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 161,
            "description": "If the timeline is complete. Looping timelines will never complete.",
            "itemtype": "property",
            "name": "complete",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 172,
            "description": "Advances to the next item in the list of things to play.",
            "itemtype": "method",
            "name": "_nextItem",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 248,
            "description": "The position of the current animation, or the current pause timer, in milliseconds.",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/AnimatorTimeline.js",
            "line": 258,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.AnimatorTimeline",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 74,
            "description": "Indicates whether this BitmapMovieClip should loop when it reaches the end of its timeline.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 82,
            "description": "The current frame of the movieclip.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 91,
            "description": "If true, the BitmapMovieClip's position will not advance when ticked.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 99,
            "description": "Boundaries of the animation, like the nominalBounds produced by Flash's HTML5 exporter.\nThis uses the full, untrimmed size of the first frame.",
            "itemtype": "property",
            "name": "nominalBounds",
            "type": "createjs.Rectangle",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 109,
            "description": "By default BitmapMovieClip instances advance one frame per tick. Specifying a framerate\nfor the BitmapMovieClip will cause it to advance based on elapsed time between ticks as\nappropriate to maintain the target framerate.",
            "itemtype": "property",
            "name": "_framerate",
            "type": "{Number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 121,
            "description": "When the BitmapMovieClip is framerate independent, this is the total time in seconds for\nthe animation.",
            "itemtype": "property",
            "name": "_duration",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 132,
            "description": "When the BitmapMovieClip is framerate independent, this is the time elapsed from frame 0 in\nseconds.",
            "itemtype": "property",
            "name": "_t",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 142,
            "itemtype": "property",
            "name": "_prevPosition",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 150,
            "description": "The Bitmap used to render the current frame of the animation.",
            "itemtype": "property",
            "name": "_bitmap",
            "type": "createjs.Bitmap",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 158,
            "description": "An array of frame labels.",
            "itemtype": "property",
            "name": "_labels",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 166,
            "description": "An array of event labels.",
            "itemtype": "property",
            "name": "_events",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 174,
            "description": "An array of textures.",
            "itemtype": "property",
            "name": "_frames",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 182,
            "description": "The current texture.",
            "itemtype": "property",
            "name": "_currentTexture",
            "type": "createjs.TextureAtlas.Texture",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 190,
            "description": "The origin point of the BitmapMovieClip.",
            "itemtype": "property",
            "name": "_origin",
            "type": "Point",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 198,
            "description": "A scale to apply to the images in the BitmapMovieClip\nto restore normal size (if spritesheet was exported at a smaller or larger size).",
            "itemtype": "property",
            "name": "_scale",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 221,
            "description": "By default BitmapMovieClip instances advance one frame per tick. Specifying a framerate for\nthe BitmapMovieClip will cause it to advance based on elapsed time between ticks as\nappropriate to maintain the target framerate.\n\nFor example, if a BitmapMovieClip with a framerate of 10 is placed on a Stage being updated\nat 40fps, then the BitmapMovieClip will advance roughly one frame every 4 ticks. This will\nnot be exact, because the time between each tick will vary slightly between frames.\n\nThis feature is dependent on the tick event object (or an object with an appropriate \"delta\"\nproperty) being passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "framerate",
            "type": "{Number}",
            "default": "0",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 254,
            "description": "When the BitmapMovieClip is framerate independent, this is the time elapsed from frame 0 in\nseconds.",
            "itemtype": "property",
            "name": "elapsedTime",
            "type": "Number",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 274,
            "description": "(Read-Only) The total number of frames in the timeline",
            "itemtype": "property",
            "name": "totalFrames",
            "type": "Int",
            "default": "0",
            "readonly": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 289,
            "description": "(Read-Only) The Texture of the current frame",
            "itemtype": "property",
            "name": "currentTexture",
            "type": "createjs.TextureAtlas.Texture",
            "readonly": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 305,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a\ncanvas. This does not account for whether it would be visible within the boundaries of the\nstage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 319,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and\ntransform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current\n                             cache. For example, used for drawing the cache (to prevent it\n                             from simply drawing an existing cache back into itself).",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 339,
            "description": "Sets paused to false.",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 348,
            "description": "Sets paused to true.",
            "itemtype": "method",
            "name": "stop",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 357,
            "description": "Advances this movie clip to the specified position or label and sets paused to false.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 368,
            "description": "Advances this movie clip to the specified position or label and sets paused to true.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation or frame name to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 379,
            "description": "To provide feature parity with the createjs.MovieClip mixin",
            "itemtype": "method",
            "name": "gotoAndCache",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 387,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "params": [
                {
                    "name": "time",
                    "description": "The amount of time in ms to advance by. If 0 or null, time is not\n                       advanced but the timeline is still updated.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "advance",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 414,
            "description": "Returns a sorted list of the labels defined on this BitmapMovieClip. Shortcut to TweenJS:\nTimeline.getLabels();",
            "itemtype": "method",
            "name": "getLabels",
            "return": {
                "description": "A sorted array of objects with label and position (aka frame)\n                        properties.",
                "type": "Array[Object]"
            },
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 426,
            "description": "Returns a sorted list of the labels which can be played with Animator.",
            "itemtype": "method",
            "name": "getEvents",
            "return": {
                "description": "A sorted array of objects with label, length and position (aka frame)\n    properties.",
                "type": "Array"
            },
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 437,
            "description": "Returns the name of the label on or immediately before the current frame. See TweenJS:\nTimeline.getCurrentLabel() for more information.",
            "itemtype": "method",
            "name": "getCurrentLabel",
            "return": {
                "description": "The name of the current label or null if there is no label.",
                "type": "String"
            },
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 457,
            "description": "Initializes or re-initializes the BitmapMovieClip.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "atlas",
                    "description": "The texture atlas to pull frames from.",
                    "type": "TextureAtlas"
                },
                {
                    "name": "data",
                    "description": "Initialization data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fps",
                            "description": "Framerate to play the movieclip at. Omitting this will use the\n                        current framerate.",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "labels",
                            "description": "A dictionary of the labels in the movieclip to assist in\n                              playing animations.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "The origin of the movieclip.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{x:0,y:0}"
                        },
                        {
                            "name": "frames",
                            "description": "An array of frame sequences to pull from the texture atlas.",
                            "type": "Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The name to use for the frame sequence. This should\n                                   include a \"#\" to be replaced with the image number.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "min",
                                    "description": "The first frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "max",
                                    "description": "The last frame number in the frame sequence.",
                                    "type": "Int",
                                    "optional": true
                                },
                                {
                                    "name": "digits",
                                    "description": "The maximum number of digits in the names of the frames,\n                                    e.g. myAnim0001 has 4 digits.",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "4"
                                }
                            ]
                        },
                        {
                            "name": "scale",
                            "description": "The scale at which the art was exported, e.g. a scale of 1.4\n                               means the art was increased in size to 140% before exporting\n                               and should be scaled back down before drawing to the screen.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ],
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 574,
            "description": "Copies the labels, textures, origin, and framerate from another BitmapMovieClip.\nThe labels and textures are copied by reference, instead of a deep copy.",
            "itemtype": "method",
            "name": "copyFrom",
            "params": [
                {
                    "name": "other",
                    "description": "The movieclip to copy data from.",
                    "type": "BitmapMovieClip"
                }
            ],
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 591,
            "description": "Clone a sprite. Creates a shallow copy of loaded element",
            "itemtype": "method",
            "name": "clone",
            "static": 1,
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to clone",
                    "type": "springroll.easeljs.BitmapMovieClip"
                },
                {
                    "name": "x",
                    "description": "The initial x position",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The initial y position",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "",
                "type": "springroll.easeljs.BitmapMovieClip"
            },
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 609,
            "description": "Destroys the BitmapMovieClip, removing all children and nulling all reference variables.",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 624,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "props",
                    "description": "Properties to copy to the DisplayObject {{#crossLink \"DisplayObject/tick\"}}{{/crossLink}} event object.\nfunction.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 636,
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 667,
            "itemtype": "method",
            "name": "_updateTimeline",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/BitmapMovieClip.js",
            "line": 698,
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.BitmapMovieClip",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 24,
            "description": "The animation clip to play",
            "itemtype": "property",
            "name": "clip",
            "type": "createjs.MovieClip",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 30,
            "description": "The framerate which to playback the clip",
            "itemtype": "property",
            "name": "frameRate",
            "type": "Int",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 36,
            "description": "The list of frame events",
            "itemtype": "property",
            "name": "frameDictionary",
            "type": "Object",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 49,
            "description": "Build a dictionary of all animations start and end\nframe positions'",
            "itemtype": "method",
            "name": "_buildDictionary",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 91,
            "description": "Play the specificied animation",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "label",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 108,
            "description": "Go to the previous frame of the animation",
            "itemtype": "method",
            "name": "goToPreviousFrame",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 123,
            "description": "Update the animation when framerate matches animation's framerate",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "Time in milleseconds since last frame update",
                    "type": "Number"
                }
            ],
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/ReversePlayback.js",
            "line": 138,
            "description": "End the frame update loop",
            "itemtype": "method",
            "name": "stop",
            "class": "springroll.easeljs.ReversePlayback",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 27,
            "description": "The an array of image elements (Image|HTMLCanvasElement) that frames in texture atlas use.",
            "itemtype": "property",
            "name": "_image",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 42,
            "description": "The dictionary of Textures that this atlas consists of.",
            "itemtype": "property",
            "name": "frames",
            "type": "Object",
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 48,
            "description": "The scale of the texture atlas, if available in spritesheet metadata. Defaults to 1,\notherwise",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 87,
            "description": "Gets a frame by name.",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "name",
                    "description": "The frame name to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The texture by that name, or null if it doesn't exist.",
                "type": "createjs.TextureAtlas.Texture"
            },
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 98,
            "description": "Get an array of Textures that match a specific name. If a frame in a sequence is not in the\natlas, the previous frame in the sequence is used in place of it.",
            "itemtype": "method",
            "name": "getFrames",
            "params": [
                {
                    "name": "name",
                    "description": "The base name of all frames to look for, like \"anim_#\" to search for an\n                     animation exported as anim_0001.png (the \".png\" is dropped when the\n                     TextureAtlas is loaded).",
                    "type": "String"
                },
                {
                    "name": "numberMin",
                    "description": "The number to start on while looking for frames. Flash PNG sequences\n                       generally start at 1.",
                    "type": "Int"
                },
                {
                    "name": "numberMax",
                    "description": "The number to go until while looking for frames. If your animation runs\n                       from frame 0001 to frame 0014, numberMax would be 14.",
                    "type": "Int"
                },
                {
                    "name": "maxDigits",
                    "description": "Maximum number of digits, like 4 for an animation exported as\n                           anim_0001.png",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "outArray",
                    "description": "If already using an array, this can fill it instead of creating a\n                          new one.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The collection of createjs.TextureAtlas.Textures.",
                "type": "Array"
            },
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 171,
            "description": "Destroys the TextureAtlas by nulling the image and frame dictionary references.",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.TextureAtlas",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 191,
            "description": "The image element that this texture references.",
            "itemtype": "property",
            "name": "image",
            "type": "Image|HTMLCanvasElement",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 196,
            "description": "If this texture has been rotated (90 degrees clockwise).",
            "itemtype": "property",
            "name": "rotated",
            "type": "Boolean",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 203,
            "description": "The frame rectangle within the image.",
            "itemtype": "property",
            "name": "frame",
            "type": "createjs.Rectangle",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 210,
            "description": "If this texture has been trimmed.",
            "itemtype": "property",
            "name": "trimmed",
            "type": "Boolean",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 215,
            "description": "The offset that the trimmed sprite should be placed at to restore it to the untrimmed position.",
            "itemtype": "property",
            "name": "offset",
            "type": "createjs.Point",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 220,
            "description": "The width of the untrimmed texture.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/animation/TextureAtlas.js",
            "line": 225,
            "description": "The height of the untrimmed texture.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "springroll.easeljs.Texture",
            "module": "EaselJS Animation",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 55,
            "description": "When the cutscene is ready to use",
            "itemtype": "property",
            "name": "isReady",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 62,
            "description": "The framerate the cutscene should play at.",
            "itemtype": "property",
            "name": "framerate",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 69,
            "description": "Reference to the display we are drawing on",
            "itemtype": "property",
            "name": "display",
            "type": "Display",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 78,
            "description": "The source url for the config until it is loaded, then the config object.",
            "itemtype": "property",
            "name": "config",
            "type": "String|Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 85,
            "description": "The scaling value for all images.",
            "itemtype": "property",
            "name": "imageScale",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 92,
            "description": "A string found in the paths of images that should be replaced with another value.",
            "itemtype": "property",
            "name": "pathReplaceTarg",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 99,
            "description": "The string to use when replacing options.pathReplaceTarg.",
            "itemtype": "property",
            "name": "pathReplaceVal",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 106,
            "description": "The TaskManager used to load up assets.",
            "itemtype": "property",
            "name": "_taskMan",
            "type": "TaskManager",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 113,
            "description": "The time elapsed in seconds.",
            "itemtype": "property",
            "name": "_elapsedTime",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 120,
            "description": "All audio aliases used by this Cutscene, for preloading and later unloading.",
            "itemtype": "property",
            "name": "_audioAliases",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 127,
            "description": "Time sorted list of audio that needs to be played, as well as information on if they\nshould be synced or not.",
            "itemtype": "property",
            "name": "_audio",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 135,
            "description": "Index of the sound that is next up in _audio.",
            "itemtype": "property",
            "name": "_audioIndex",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 142,
            "description": "Time sorted list of audio that needs to be played, as well as information on if they\nshould be synced or not.",
            "itemtype": "property",
            "name": "_audio",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 150,
            "description": "The clip that is being animated.",
            "itemtype": "property",
            "name": "_clip",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 157,
            "description": "The queue of sound instances of playing audio that the animation should be synced to.\nOnly the most recent active one will be synced to.",
            "itemtype": "property",
            "name": "_activeSyncAudio",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 165,
            "description": "The time in seconds into the animation that the current synced audio started.",
            "itemtype": "property",
            "name": "_soundStartTime",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 172,
            "description": "Array of active SoundInstances that are not the currently synced one.",
            "itemtype": "property",
            "name": "_activeAudio",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 179,
            "description": "If the animation has finished playing.",
            "itemtype": "property",
            "name": "_animFinished",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 186,
            "description": "If the audio has finished playing.",
            "itemtype": "property",
            "name": "_audioFinished",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 193,
            "description": "The Captions object to use to manage captions.",
            "itemtype": "property",
            "name": "_captionsObj",
            "type": "Captions",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 203,
            "description": "The function to call when loading is complete.",
            "itemtype": "property",
            "name": "_loadCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 210,
            "description": "The function to call when playback is complete.",
            "itemtype": "property",
            "name": "_endCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 217,
            "description": "Names of library (window.lib) items to delete when the cutscene is destroyed.",
            "itemtype": "property",
            "name": "_libItemsToUnload",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 224,
            "description": "Names of image (window.images) entries to unload when the cutscene is destroyed.",
            "itemtype": "property",
            "name": "_imagesToUnload",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 240,
            "description": "Called from the constructor to complete setup and start loading.",
            "itemtype": "method",
            "name": "setup",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 259,
            "description": "Callback for when the config file is loaded.",
            "itemtype": "method",
            "name": "onConfigLoaded",
            "params": [
                {
                    "name": "result",
                    "description": "The loaded result.",
                    "type": "LoaderResult"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 320,
            "description": "Callback for when the audio has been preloaded.",
            "itemtype": "method",
            "name": "onAudioLoaded",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 330,
            "description": "Callback for when all art assets have been loaded.",
            "itemtype": "method",
            "name": "onArtLoaded",
            "params": [
                {
                    "name": "results",
                    "description": "The loaded results.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 412,
            "description": "Callback for when all loading is complete.",
            "itemtype": "method",
            "name": "onLoadComplete",
            "params": [
                {
                    "name": "evt",
                    "description": "An event",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 452,
            "description": "Listener for when the Application is resized.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The new width of the display.",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The new height of the display.",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 484,
            "description": "Starts playing the cutscene.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when playback is complete.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 535,
            "description": "Callback for when the audio has finished playing.",
            "itemtype": "method",
            "name": "_audioCallback",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 579,
            "description": "Listener for frame updates.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "Time in milliseconds",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 671,
            "description": "Stops playback of the cutscene.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the end callback should be performed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/cutscene/Cutscene.js",
            "line": 695,
            "description": "Destroys the cutscene.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.Cutscene",
            "module": "EaselJS Cutscene",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 19,
            "description": "Interactable DisplayObject",
            "itemtype": "property",
            "name": "target",
            "type": "createjs.DisplayObject",
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 30,
            "description": "name of this timer",
            "itemtype": "property",
            "name": "",
            "type": "String",
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 36,
            "description": "Reference to Learning Dispatcher",
            "itemtype": "property",
            "name": "learning",
            "type": "springroll.Learning",
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 53,
            "description": "minimum length of dwell time necessary to fire event",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 59,
            "description": "start timer on mouseover",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse Event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 83,
            "description": "Dwell ended - fire event if dwelled long enough",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse Event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 103,
            "description": "Remove all listeners and whatnot",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 124,
            "description": "Setup a DwellTimer for a DisplayObject.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Clickable DisplayObject",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/DwellTimer.js",
            "line": 136,
            "description": "If exists, cleanup and remove DwellTimer from object",
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "DisplayObject with DwellTimer to cleanup",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "springroll.easeljs.DwellTimer",
            "module": "EaselJS Learning",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 18,
            "description": "The last interactive position",
            "itemtype": "property",
            "name": "_currentPosition",
            "type": "createjs.Point",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 25,
            "description": "Helper point for normalizing position",
            "itemtype": "property",
            "name": "_helperPoint",
            "type": "createjs.Point",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 40,
            "description": "Some games need to send additional parameters to the tracker's\noffClick event. They may set them here as needed. These parameters are appended\nto the normal offClick data.",
            "itemtype": "property",
            "name": "offClickParams",
            "type": "Array",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 48,
            "description": "Keep track of the last Pointer ID",
            "itemtype": "property",
            "name": "_lastPointerID",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 55,
            "description": "For learning events, we want to send consistent data when sending\npositions. This helper method generates that data.\nIn the future, we may return an object with known properties,\nbut for now we are returning an object of {x:int, y:int,\nstage_width:int, stage_height:int} in unscaled numbers.",
            "itemtype": "method",
            "name": "normalizePosition",
            "params": [
                {
                    "name": "pos",
                    "description": "A display object or point to use.",
                    "type": "createjs.DisplayObject|createjs.Point"
                },
                {
                    "name": "coordSpace",
                    "description": "The coordinate space the position is in, so\n                                             it can be converted to global space. If\n                                             omitted and <code>pos</code> is a\n                                             DisplayObject, <code>pos.parent</code> will\n                                             be used.",
                    "type": "createjs.DisplayObject",
                    "optional": true
                }
            ],
            "return": {
                "description": "{x:int, y:int, stage_width:int, stage_height:int}",
                "type": "Object"
            },
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 72,
            "description": "For learning events, we want to send consistent data when sending\npositions. This helper method generates that data.\nIn the future, we may return an object with known properties,\nbut for now we are returning an object of {x:int, y:int,\nstage_width:int, stage_height:int} in unscaled numbers.",
            "itemtype": "method",
            "name": "normalizePosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position",
                    "type": "Number"
                },
                {
                    "name": "coordSpace",
                    "description": "The coordinate space the position is in, so\n                                             it can be converted to global space.",
                    "type": "createjs.DisplayObject",
                    "optional": true
                }
            ],
            "return": {
                "description": "{x:int, y:int, stage_width:int, stage_height:int}",
                "type": "Object"
            },
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 112,
            "description": "For learning events, we want to send consistent data when sending\nPosition. This helper method generates that data for the\ncurrent stage position of mouse or touch. We are returning an object of\n`{x:int, y:int, stage_width:int, stage_height:int}` in unscaled numbers.",
            "itemtype": "method",
            "name": "currentPosition",
            "return": {
                "description": "`{x:int, y:int, stage_width:int, stage_height:int}`",
                "type": "Object"
            },
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 158,
            "description": "Fires event whenever the mouse is moved",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/learning/OffClickPlugin.js",
            "line": 170,
            "description": "Fires OffClick event if click on unhandled object",
            "class": "springroll.Application",
            "module": "EaselJS Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/mixins/Container.js",
            "line": 21,
            "description": "Does a cache by the nominalBounds set from flash",
            "itemtype": "method",
            "name": "cacheByBounds",
            "params": [
                {
                    "name": "buffer",
                    "description": "The space around the nominal bounds to include in cache image",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "15"
                }
            ],
            "class": "createjs.Container",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/MovieClip.js",
            "line": 21,
            "description": "Combines gotoAndStop and cache in createjs to cache right away",
            "itemtype": "method",
            "name": "gotoAndCacheByBounds",
            "params": [
                {
                    "name": "frame",
                    "description": "The 0-index frame number or frame label",
                    "type": "String|int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "buffer",
                    "description": "The space around the nominal bounds to include in cache image",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "15"
                }
            ],
            "class": "createjs.MovieClip",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 16,
            "description": "Returns the dot product between this point and another one.",
            "itemtype": "method",
            "name": "dotProd",
            "params": [
                {
                    "name": "other",
                    "description": "The point to form a dot product with",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The dot product between the two points."
            },
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 27,
            "description": "Returns the length (or magnitude) of this point.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The length of this point."
            },
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 37,
            "description": "Returns the squared length (or magnitude) of this point. This is faster than length().",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "The length squared of this point."
            },
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 47,
            "description": "Reduces the point to a length of 1.",
            "itemtype": "method",
            "name": "normalize",
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 58,
            "description": "Subtracts the x and y values of a point from this point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "other",
                    "description": "The point to subtract from this one",
                    "type": "Point"
                }
            ],
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 69,
            "description": "Adds the x and y values of a point to this point.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "other",
                    "description": "The point to add to this one",
                    "type": "Point"
                }
            ],
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 80,
            "description": "Truncate the length of the point to a maximum.",
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "maxLength",
                    "description": "The maximum length to allow in this point.",
                    "type": "Number"
                }
            ],
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 96,
            "description": "Multiplies the x and y values of this point by a value.",
            "itemtype": "method",
            "name": "scaleBy",
            "params": [
                {
                    "name": "value",
                    "description": "The value to scale by.",
                    "type": "Number"
                }
            ],
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 107,
            "description": "Calculates the distance between this and another point.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "other",
                    "description": "The point to calculate the distance to.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The distance.",
                "type": "Number"
            },
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/mixins/Point.js",
            "line": 120,
            "description": "Calculates the squared distance between this and another point.",
            "itemtype": "method",
            "name": "distanceSq",
            "params": [
                {
                    "name": "other",
                    "description": "The point to calculate the distance to.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The distance squared.",
                "type": "Number"
            },
            "class": "createjs.Point",
            "module": "EaselJS Display",
            "namespace": "createjs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 31,
            "description": "Reference to the app",
            "itemtype": "property",
            "name": "app",
            "type": "Application",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 37,
            "description": "Reference to the app",
            "itemtype": "property",
            "name": "game",
            "type": "Application",
            "deprecated": true,
            "deprecationMessage": "Use 'app' instead",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 44,
            "description": "Reference to the app's config",
            "itemtype": "property",
            "name": "config",
            "type": "Object",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 50,
            "description": "All panel should probably have a background image",
            "itemtype": "property",
            "name": "background",
            "type": "createjs.Bitmap",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 60,
            "description": "Should be called whenever a state enters this panel, Implementation-specific",
            "itemtype": "method",
            "name": "setup",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 69,
            "description": "Should be called whenever a state exits this panel, the default\nbehavior is to remove all children of the panel. It will stop\nany movieclip, destroy any objects, remove DwellTimers, etc.",
            "itemtype": "method",
            "name": "teardown",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 81,
            "description": "Removes a collection of objects from the stage and destroys them if we cant.",
            "example": [
                " this.removeChildren(this.skipButton, this.character);"
            ],
            "itemtype": "method",
            "name": "cleanupChildren",
            "params": [
                {
                    "name": "children",
                    "description": "Assets to clean can either be individual children or collections of children",
                    "type": "Array|*"
                }
            ],
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BasePanel.js",
            "line": 126,
            "description": "Destroy and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.BasePanel",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 62,
            "description": "Reference to the main app",
            "itemtype": "property",
            "name": "app",
            "type": "Application",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 70,
            "description": "Reference to the main app",
            "itemtype": "property",
            "name": "app",
            "type": "Application",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "deprecationMessage": "Use the property 'app' instead",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 79,
            "description": "The instance of the VOPlayer",
            "itemtype": "property",
            "name": "voPlayer",
            "type": "springroll.VOPlayer",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 87,
            "description": "The instance of the Sound",
            "itemtype": "property",
            "name": "sound",
            "type": "springroll.Sound",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 95,
            "description": "Reference to the main config object",
            "itemtype": "property",
            "name": "config",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 103,
            "description": "Reference to the scaling object",
            "itemtype": "property",
            "name": "scaling",
            "type": "springroll.UIScaler",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 111,
            "description": "The items to scale on the panel, see `UIScaler.addItems` for\nmore information. If no options are set in the State's constructor\nthen it will try to find an object on the app config on `scaling` property\nmatching the same state alias. For instance `config.scaling.title` if\n`title` is the state alias. If no scalingItems are set, will scale\nand position the panal itself.",
            "itemtype": "property",
            "name": "scalingItems",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "default": "null",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 125,
            "description": "The assets to load each time",
            "itemtype": "property",
            "name": "manifest",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 132,
            "description": "Check to see if the assets have finished loading",
            "itemtype": "property",
            "name": "assetsLoaded",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 140,
            "description": "If a manifest specific to this state should be automatically loaded by default.",
            "itemtype": "property",
            "name": "useManifest",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 154,
            "description": "Enter the state, when the panel is fully hidden\nby the transition",
            "itemtype": "method",
            "name": "enter",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 192,
            "description": "Extend the internal exit",
            "itemtype": "method",
            "name": "_internalExit",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 219,
            "description": "Implementation specific for override. When you need to add additional preload\ntasks to your state, override this function.",
            "itemtype": "method",
            "name": "addTasks",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "tasks",
                    "description": "The list of preload tasks",
                    "type": "Array"
                }
            ],
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 231,
            "description": "Implementation specific for override. When all the assets have been loaded\ncan possible add options for loading assets.\nfrom the TaskManager.",
            "itemtype": "method",
            "name": "onAssetsLoaded",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 243,
            "description": "The internal call for on assets loaded",
            "itemtype": "method",
            "name": "_onLoaded",
            "access": "protected",
            "tagname": "",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/BaseState.js",
            "line": 292,
            "description": "Don't use after calling this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.BaseState",
            "module": "EaselJS States",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/states/ManifestsPlugin.js",
            "line": 22,
            "description": "Event when the manifest is finished loading",
            "itemtype": "event",
            "name": "manifestLoaded",
            "params": [
                {
                    "name": "manager",
                    "description": "The task manager",
                    "type": "springroll.TaskManager"
                }
            ],
            "class": "springroll.Application",
            "module": "EaselJS States",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/states/ManifestsPlugin.js",
            "line": 28,
            "description": "The path to the concatinated FLA exported manifests. It's useful\nto load all the manifests at once. This JSON object contains a\ndictionary of state alias and contains an array of manifest assets\n(e.g. `{\"id\": \"PlayButton\", \"src\": \"assets/images/button.png\"}`.\nSet to null and no manifest will be auto-loaded.",
            "itemtype": "property",
            "name": "options.manifestsPath",
            "type": "String",
            "readonly": "",
            "default": "null",
            "class": "springroll.Application",
            "module": "EaselJS States",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/states/ManifestsPlugin.js",
            "line": 50,
            "description": "The collection of loading assets by state",
            "itemtype": "property",
            "name": "_manifests",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "EaselJS States",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/states/ManifestsPlugin.js",
            "line": 57,
            "description": "Read-only getter to return _manifests",
            "itemtype": "property",
            "name": "manifests",
            "type": "Object",
            "readonly": "",
            "class": "springroll.Application",
            "module": "EaselJS States",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/states/ManifestsPlugin.js",
            "line": 90,
            "description": "Callback to when manifests have been loaded",
            "itemtype": "method",
            "name": "onManifestsLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "tasks",
                    "description": "The collection of preload tasks",
                    "type": "Array"
                }
            ],
            "class": "springroll.Application",
            "module": "EaselJS States",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 23,
            "description": "If asset collisions (lib.X is used by multiple assets) should have a warning logged.",
            "itemtype": "property",
            "name": "warnOnCollisions",
            "type": "Boolean",
            "static": 1,
            "default": "false",
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 33,
            "description": "For unminifed library only, add verbose console logs for loading/loaded assets",
            "itemtype": "property",
            "name": "verbose",
            "type": "Boolean",
            "static": 1,
            "default": "false",
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 42,
            "description": "Array of asset ids that have been loaded by AssetManager.",
            "itemtype": "property",
            "name": "loadedAssets",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 50,
            "description": "Dictionary of object definitions in the 'lib' dictionary. Each key is the name of a\ndefinition, with the value being the id of the asset that loaded it.",
            "itemtype": "property",
            "name": "loadedLibAssets",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 59,
            "description": "There dynamic loaded code asset.",
            "itemtype": "property",
            "name": "loadedLibs",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 67,
            "description": "Dictionary of TextureAtlas objects, stored by asset id.",
            "itemtype": "property",
            "name": "textureAtlases",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 75,
            "description": "Dictionary of BitmapMovieClip configuration objects, stored by asset id.",
            "itemtype": "property",
            "name": "BMCConfigs",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 83,
            "description": "Intializes AssetManager.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 108,
            "description": "Loads all files need to make a BitmapMovieClip, given that the files are in the same\nlocation with a specific naming convention:\n\nBitmapMovieClip config file: &lt;assetId&gt;.json <br />\nBitmapMovieClip textureAtlas json: &lt;assetId&gt;Sprite.json <br />\nBitmapMovieClip textureAtlas image: &lt;assetId&gt;Sprite.png",
            "itemtype": "method",
            "name": "loadBitmapMovieClip",
            "static": 1,
            "params": [
                {
                    "name": "label",
                    "description": "The asset id for the BitmapMovieClip",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "The path for all 3 required files.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'assets/sprites/'"
                },
                {
                    "name": "callback",
                    "description": "A callback for when the BitmapMovieClip assets have finished\n                             loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "taskList",
                    "description": "An array or TaskManager to add a ListTask to for\n                                      loading. If omitted, loads immediately with an internal\n                                      TaskManager.",
                    "type": "Array|TaskManager",
                    "optional": true
                }
            ],
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 149,
            "description": "Unload an asset or list of assets.",
            "itemtype": "method",
            "name": "extractAssetName",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "assetId",
                    "description": "The asset id from the manifest, which might include an identifier\n                        marking it as belonging to a spritesheet.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The proper asset id",
                "type": "String"
            },
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 178,
            "description": "Loads a list of assets. All javascript files will be parsed so that they can be unloaded\nlater. Additionally, AssetManager will handle spritesheets automatically. AssetManager looks\nfor special manifest items that would otherwise be invalid to handle spritesheets or images\nthat have been split into alpha and color images.\nA manifest item for a TextureAtlas - this will create a TextureAtlas instance, accessible via\nAssetManager.getAtlas(\"myAssetId\"):\n\n    {\n        \"id\":\"myAssetId\",\n        \"atlasData\":\"path/asset.json\",\n        \"atlasImage\":\"path/asset.png\"\n    }\n\nA manifest item for a spritesheet that should be run through BitmapUtils.loadSpriteSheet()\nso that the individual sprites can be accessed via the global 'lib' dictionary:\n\n    {\n        \"id\":\"myAssetId\",\n        \"atlasData\":\"path/asset.json\",\n        \"atlasImage\":\"path/asset.png\",\n        \"splitForEaselJS\":true\n    }\n\nA manifest item for a single image that has been split into color and alpha images that\nshould be recombined upon loading:\n\n    {\n        \"id\":\"myAssetId\",\n        \"color\":\"path/asset-color.jpg\",\n        \"alpha\":\"path/asset-alpha.png\"\n    }\n\nA manifest item for a TextureAtlas or spritesheet that has been split into color and\nalpha images:\n\n    {\n        \"id\":\"myAssetId\",\n        \"atlasData\":\"path/asset.json\",\n        \"color\":\"path/asset-color.jpg\",\n        \"alpha\":\"path/asset-alpha.png\"\n    }\n\nA manifest item for a JSON that is configuration data for a BitmapMovieClip - it can be\nretrieved via AssetManager.getBitmapMovieClipConfig(\"myAssetId\"):\n\n    {\n        \"id\":\"myAssetId\",\n        \"src\":\"path/asset.json\",\n        \"bmcConfig\":true\n    }",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "manifest",
                    "description": "The collection of asset manifests",
                    "type": "Array"
                },
                {
                    "name": "callbackOrTaskList",
                    "description": "A function to call when load is complete",
                    "type": "Function|Array|TaskManager"
                },
                {
                    "name": "taskList",
                    "description": "An array or TaskManager to add a ListTask to for\n                                      loading. If omitted, loads immediately with an internal\n                                      TaskManager.",
                    "type": "Array|TaskManager",
                    "optional": true
                }
            ],
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 559,
            "description": "Pulled from EaselJS's SpriteSheetUtils.\nMerges the rgb channels of one image with the alpha channel of another. This can be used to\ncombine a compressed JPEG image containing color data with a PNG32 monochromatic image\ncontaining alpha data. With certain types of images (those with detail that lend itself to\nJPEG compression) this can provide significant file size savings versus a single RGBA PNG32.\nThis method is very fast (generally on the order of 1-2 ms to run).",
            "itemtype": "method",
            "name": "mergeAlpha",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "rbgImage",
                    "description": "The image (or canvas) containing the RGB channels to use.",
                    "type": "Image"
                },
                {
                    "name": "alphaImage",
                    "description": "The image (or canvas) containing the alpha channel to use.",
                    "type": "Image"
                },
                {
                    "name": "canvas",
                    "description": "If specified, this canvas will be used and returned. If not, a new\n                         canvas will be created.",
                    "type": "Canvas",
                    "optional": true
                }
            ],
            "return": {
                "description": "A canvas with the combined image data. This can be used as a source for a\n                 Texture.",
                "type": "Canvas"
            },
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 590,
            "description": "Returns a TextureAtlas that was loaded by the specified asset id.",
            "itemtype": "method",
            "name": "getAtlas",
            "static": 1,
            "params": [
                {
                    "name": "asset",
                    "description": "The id of the TextureAtlas to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The TextureAtlas that was loaded under the specified asset id.",
                "type": "TextureAtlas"
            },
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 602,
            "description": "Returns a configuration object for a BitmapMovieClip.",
            "itemtype": "method",
            "name": "getBitmapMovieClipConfig",
            "static": 1,
            "params": [
                {
                    "name": "asset",
                    "description": "The id of the config object to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The TextureAtlas that was loaded under the specified asset id.",
                "type": "TextureAtlas"
            },
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 614,
            "description": "Unload an asset or list of assets.",
            "itemtype": "method",
            "name": "unload",
            "static": 1,
            "params": [
                {
                    "name": "assetOrAssets",
                    "description": "The collection of asset ids or single asset id. As an\n                                    array, it can be a manifest with {id:\"\", src:\"\"} objects.",
                    "type": "Array|String"
                }
            ],
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/AssetManager.js",
            "line": 682,
            "description": "Unloads all assets loaded by AssetManager.",
            "itemtype": "method",
            "name": "unloadAll",
            "static": 1,
            "class": "springroll.easeljs.AssetManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 165,
            "description": "The sprite that is the body of the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "back",
            "type": "createjs.Bitmap",
            "readonly": "",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 173,
            "description": "The text field of the button. The label is centered by both width and height on the\nbutton.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "label",
            "type": "createjs.Text",
            "readonly": "",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 183,
            "description": "Callback for mouse over, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_overCB",
            "type": "Function",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 190,
            "description": "Callback for mouse out, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_outCB",
            "type": "Function",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 197,
            "description": "Callback for mouse down, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_downCB",
            "type": "Function",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 204,
            "description": "Callback for press up, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upCB",
            "type": "Function",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 211,
            "description": "Callback for click, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_clickCB",
            "type": "Function",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 218,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 225,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was\n[\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 234,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 243,
            "description": "The width of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 250,
            "description": "The height of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 257,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the\nbutton.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "createjs.Point",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 425,
            "description": "An event for when the button is pressed (while enabled).",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_PRESS",
            "type": "String",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 467,
            "description": "The width of the button, based on the width of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 483,
            "description": "The height of the button, based on the height of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 499,
            "description": "Sets the text of the label. This does nothing if the button was not initialized with a label.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The text to set the label to.",
                    "type": "String"
                }
            ],
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 533,
            "description": "Whether or not the button is enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 571,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 597,
            "description": "Updates back based on the current button state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateState",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 665,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseDown",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 678,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseUp",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 693,
            "description": "The callback for when the button the button is clicked or tapped on. This is\nthe most reliable way of detecting mouse up/touch end events that are on this button\nwhile letting the pressup event handle the mouse up/touch ends on and outside the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onClick",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 705,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOver",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 716,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOut",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 727,
            "description": "Destroys the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 747,
            "description": "Generates a desaturated up state as a disabled state, and an update with a solid colored\nglow for a highlighted state.",
            "itemtype": "method",
            "name": "generateDefaultStates",
            "static": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image to use for all of the button states, in the\n                                       standard up/over/down format.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "disabledSettings",
                    "description": "The settings object for the disabled state. If omitted, no\n                                   disabled state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "saturation",
                            "description": "The saturation adjustment for the disabled\n                                              state. 100 is fully saturated, 0 is unchanged,\n                                              -100 is desaturated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "brightness",
                            "description": "The brightness adjustment for the disabled\n                                              state. 100 is fully bright, 0 is unchanged, -100\n                                              is completely dark.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "contrast",
                            "description": "The contrast adjustment for the disabled state.\n                                            100 is full contrast, 0 is unchanged, -100 is no\n                                            contrast.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "highlightSettings",
                    "description": "The settings object for the highlight state. If omitted,\n                                    no state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "How many pixels to make the glow, eg 8 for an 8 pixel\n                                         increase on each side.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "red",
                            "description": "The red value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "The green value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "The blue value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "The alpha value for the glow, from 0 to 255,\n                                              with 0 being transparent and 255 fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "255"
                        },
                        {
                            "name": "rgba",
                            "description": "An array of values to use for red, green, blue, and\n                                        optionally alpha that can be used instead of providing\n                                        separate properties on highlightSettings.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "An object for use as the 'imageSettings' parameter on a new Button.",
                "type": "Object"
            },
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/Button.js",
            "line": 929,
            "description": "Generates an 'imageSettings' from a TextureAtlas, a base name for all frames, and a list\nof state priorities.",
            "itemtype": "method",
            "name": "generateSettingsFromAtlas",
            "static": 1,
            "params": [
                {
                    "name": "atlas",
                    "description": "The TextureAtlas to pull all frames from.",
                    "type": "TextureAtlas"
                },
                {
                    "name": "baseName",
                    "description": "The base name for all frames in the atlas.",
                    "type": "String"
                },
                {
                    "name": "statePriority",
                    "description": "The state order, as well as determining frame names in the\n                             atlas. Each state frame name in the atlas should be\n                             <code>baseName + \"_\" + statePriority[i]</code>.",
                    "type": "Array"
                }
            ],
            "class": "springroll.easeljs.Button",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragData.js",
            "line": 16,
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 28,
            "description": "The object that's being dragged, or a dictionary of DragData being dragged\nby id if multitouch is true.",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "createjs.DisplayObject|Dictionary",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 37,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 45,
            "description": "The position x, y of the mouse down on the stage. This is only used\nwhen multitouch is false - the DragData has it when multitouch is true.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "Object",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 56,
            "description": "The position x, y of the object when interaction with it started. If multitouch is\ntrue, then this will only be set during a drag stop callback, for the object that just\nstopped getting dragged.",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "Object",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 67,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 75,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 84,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 93,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 102,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 121,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "CreatejsStage",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 128,
            "description": "The offset from the dragged object's position that the initial mouse event\nwas at. This is only used when multitouch is false - the DragData has\nit when multitouch is true.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "createjs.Point",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 137,
            "description": "Callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 144,
            "description": "Callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 156,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 163,
            "description": "A point for reuse instead of lots of object creation.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_helperPoint",
            "type": "createjs.Point",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 170,
            "description": "If this DragManager is using multitouch for dragging.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_multitouch",
            "type": "Boolean",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 178,
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 181,
            "description": "If the DragManager allows multitouch dragging. Setting this stops any current\ndrags.",
            "itemtype": "property",
            "name": "multitouch",
            "type": "Boolean",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 212,
            "description": "Manually starts dragging an object. If a mouse down event is not\nsupplied as the second argument, it defaults to a held drag, that ends as\nsoon as the mouse is released. When using multitouch, passing a mouse event is\nrequired.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "ev",
                    "description": "A mouse down event that should be considered to have\n                                started the drag, to determine what type of drag should be\n                                used.",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 229,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine\n                                 what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 307,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse down event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 322,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse down event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 353,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 370,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "obj",
                    "description": "A specific object to stop dragging, if multitouch\n                                      is true. If this is omitted, it stops all drags.",
                    "type": "createjs.DisplayObject",
                    "optional": true
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 396,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse up event",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 469,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse move event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 520,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same\n                                      space as the dragged object.",
                    "type": "createjs.Point"
                },
                {
                    "name": "dragOffset",
                    "description": "The drag offset for the dragged object.",
                    "type": "createjs.Point"
                },
                {
                    "name": "obj",
                    "description": "The object to snap.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 600,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on\nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function),\n_dragMan (springroll.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "bounds",
                    "description": "The rectangle bounds. 'right' and 'bottom' properties\n                                     will be added to this object.",
                    "type": "createjs.Rectangle",
                    "optional": true
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 632,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 651,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/DragManager.js",
            "line": 683,
            "class": "springroll.easeljs.DragManager",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 26,
            "description": "The audio alias to use for click events",
            "itemtype": "property",
            "name": "clickAlias",
            "type": "String",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 32,
            "description": "The audio alias to use for mouse over events",
            "itemtype": "property",
            "name": "overAlias",
            "type": "String",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 38,
            "description": "If the audio is enabled",
            "itemtype": "property",
            "name": "_audioEnabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 58,
            "description": "Handler for the BUTTON_PRESS event",
            "itemtype": "method",
            "name": "_onButtonPress",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 71,
            "description": "Handler for rollover event.",
            "itemtype": "method",
            "name": "_onRollover",
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 84,
            "description": "If audio should be played for this button.",
            "itemtype": "property",
            "name": "audioEnabled",
            "type": "Boolean",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/ui/SoundButton.js",
            "line": 117,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.easeljs.SoundButton",
            "module": "EaselJS UI",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/utils/BitmapUtils.js",
            "line": 18,
            "description": "Replaces Bitmaps in the global lib dictionary with a faux Bitmap\nthat pulls the image from a spritesheet. This function should be\ncalled after you have loaded up javascript assets exported from Flash,\nbut before you have instantiated those assets.",
            "itemtype": "method",
            "name": "loadSpriteSheet",
            "static": 1,
            "params": [
                {
                    "name": "spritesheetData",
                    "description": "The JSON object describing the frames in the atlas. This is\n                                expected to fit the JSON Hash format as exported from\n                                TexturePacker.",
                    "type": "Object"
                },
                {
                    "name": "spritesheetImage",
                    "description": "The spritesheet image that contains all of\n                                                  the frames.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "scale",
                    "description": "The scale to apply to all sprites from the spritesheet. For example,\n                          a half sized spritesheet should have a scale of 2.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "springroll.easeljs.BitmapUtils",
            "module": "EaselJS Utilities",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/utils/BitmapUtils.js",
            "line": 114,
            "description": "Creates a faux Bitmap from a TextureAtlas entry.",
            "itemtype": "method",
            "name": "bitmapFromTexture",
            "static": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture from a TextureAtlas to create the Bitmap analogue from.",
                    "type": "Texture"
                },
                {
                    "name": "scale",
                    "description": "A scale for the spritesheet to undo, e.g. a half sized spritesheet\n                      gets a scale of 2 to restore it to normal size.",
                    "type": "[type]"
                }
            ],
            "class": "springroll.easeljs.BitmapUtils",
            "module": "EaselJS Utilities",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/utils/BitmapUtils.js",
            "line": 147,
            "description": "Replaces Bitmaps in the global lib dictionary with a faux Bitmap\nthat uses a scaled bitmap, so you can load up smaller bitmaps behind\nthe scenes that are scaled back up to normal size, or high res bitmaps\nthat are scaled down.",
            "itemtype": "method",
            "name": "replaceWithScaledBitmap",
            "static": 1,
            "params": [
                {
                    "name": "idOrDict",
                    "description": "A dictionary of Bitmap ids to replace, or a single id.",
                    "type": "String|Object"
                },
                {
                    "name": "scale",
                    "description": "The scale to apply to the image(s).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "springroll.easeljs.BitmapUtils",
            "module": "EaselJS Utilities",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 15,
            "description": "The geometry class for Circle",
            "itemtype": "property",
            "name": "Circle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Circle",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 24,
            "description": "The geometry class for Ellipse",
            "itemtype": "property",
            "name": "Ellipse",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Ellipse",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 33,
            "description": "The geometry class for Rectangle",
            "itemtype": "property",
            "name": "Rectangle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Rectangle",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 42,
            "description": "The geometry class for Sector",
            "itemtype": "property",
            "name": "Sector",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Sector",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 51,
            "description": "The geometry class for point",
            "itemtype": "property",
            "name": "Point",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Point",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 60,
            "description": "The geometry class for Polygon",
            "itemtype": "property",
            "name": "Polygon",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Polygon",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 69,
            "description": "If the rotation is expressed in radians",
            "itemtype": "property",
            "name": "useRadians",
            "type": "Boolean",
            "readonly": "",
            "static": 1,
            "default": "false",
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 78,
            "description": "Gets the object's boundaries in its local coordinate space, without any scaling or\nrotation applied.",
            "itemtype": "method",
            "name": "getLocalBounds",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "return": {
                "description": "A rectangle with additional right and bottom properties.",
                "type": "createjs.Rectangle"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 128,
            "description": "Normalize the object scale",
            "itemtype": "method",
            "name": "getScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" to return a specific value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A scale object with x and y keys or a single number if direction is set",
                "type": "Object|Number"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 148,
            "description": "Normalize the object position setting",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "position",
                    "description": "The position object or the value\nif the direction is set.",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 176,
            "description": "Normalize the object position getting",
            "itemtype": "method",
            "name": "getPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\", default is an object of both",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position as an object with x and y keys if \nno direction value is set, or the value of the specific direction",
                "type": "Object|Number"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 197,
            "description": "Normalize the object scale setting",
            "itemtype": "method",
            "name": "setScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "scale",
                    "description": "The scaling object or scale value for x and y",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" if setting a specific value, default\nsets both the scale x and scale y.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 220,
            "description": "Set the pivot or registration point of an object",
            "itemtype": "method",
            "name": "setPivot",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "pivot",
                    "description": "The object pivot point or the value if the direction is set",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the pivot point",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y position of the pivot point",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" the value for specific direction, \ndefault will set using the object.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 243,
            "description": "Set the hit area of the shape",
            "itemtype": "method",
            "name": "setHitArea",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "shape",
                    "description": "The geometry object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 257,
            "description": "Get the original size of a bitmap",
            "itemtype": "method",
            "name": "getBitmapSize",
            "static": 1,
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap to measure",
                    "type": "createjs.Bitmap"
                }
            ],
            "return": {
                "description": "The width (w) and height (h) of the actual bitmap size",
                "type": "Object"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 297,
            "description": "Remove all children from a display object",
            "itemtype": "method",
            "name": "removeChildren",
            "static": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The display object container",
                    "type": "createjs.Container"
                }
            ],
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/DisplayAdapter.js",
            "line": 308,
            "description": "If a container contains a child",
            "params": [
                {
                    "name": "container",
                    "description": "The container",
                    "type": "createjs.Container"
                },
                {
                    "name": "child",
                    "description": "The object to test",
                    "type": "createjs.DisplayObject"
                }
            ],
            "return": {
                "description": "If the child contained within the container",
                "type": "Boolean"
            },
            "class": "springroll.easeljs.DisplayAdapter",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 38,
            "description": "The rate at which EaselJS calculates mouseover events, in times/second.",
            "itemtype": "property",
            "name": "mouseOverRate",
            "type": "Int",
            "access": "public",
            "tagname": "",
            "default": "30",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 46,
            "description": "If the display should keep mouse move events running when the display is disabled.",
            "itemtype": "property",
            "name": "keepMouseover",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 60,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "stage",
            "type": "createjs.Stage|createjs.SpriteStage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 77,
            "description": "An internal helper to avoid creating an object each render\nwhile telling EaselJS the amount of time elapsed.",
            "itemtype": "property",
            "name": "DELTA_HELPER",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 88,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 128,
            "description": "Updates the stage and draws it. This is only called by the Application.\nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                },
                {
                    "name": "force",
                    "description": "Will re-render even if the game is paused or not visible",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/easeljs/EaselJSDisplay.js",
            "line": 145,
            "description": "Destroys the display. This method is called by the Application and should\nnot be called directly, use Application.removeDisplay(id).\nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "springroll.easeljs.EaselJSDisplay",
            "module": "EaselJS Display",
            "namespace": "springroll.easeljs"
        },
        {
            "file": "src/displays/native/geom/Circle.js",
            "line": 19,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Circle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Circle.js",
            "line": 26,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Circle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Circle.js",
            "line": 33,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Circle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Circle.js",
            "line": 43,
            "description": "Creates a clone of this Circle instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Circle"
            },
            "class": "springroll.native.Circle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Circle.js",
            "line": 54,
            "description": "Checks if the x, and y coords passed to this function are contained within this circle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "springroll.native.Circle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 20,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 27,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 34,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 41,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 51,
            "description": "Creates a clone of this Ellipse instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the ellipse",
                "type": "Ellipse"
            },
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Ellipse.js",
            "line": 62,
            "description": "Checks if the x, and y coords passed to this function are contained within this ellipse",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this ellipse",
                "type": "Boolean"
            },
            "class": "springroll.native.Ellipse",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 18,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 25,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 35,
            "description": "Creates a clone of this point",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the point",
                "type": "Point"
            },
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 46,
            "description": "Returns the dot product between this point and another one.",
            "itemtype": "method",
            "name": "dotProd",
            "params": [
                {
                    "name": "other",
                    "description": "The point to form a dot product with",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "The dot product between the two points."
            },
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 57,
            "description": "Returns the length (or magnitude) of this point.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The length of this point."
            },
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 67,
            "description": "Returns the squared length (or magnitude) of this point. This is faster than length().",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "The length squared of this point."
            },
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 77,
            "description": "Reduces the point to a length of 1.",
            "itemtype": "method",
            "name": "normalize",
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 88,
            "description": "Subtracts the x and y values of a point from this point.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "other",
                    "description": "The point to subtract from this one",
                    "type": "Point"
                }
            ],
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 99,
            "description": "Adds the x and y values of a point to this point.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "other",
                    "description": "The point to add to this one",
                    "type": "Point"
                }
            ],
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 110,
            "description": "Truncate the length of the point to a maximum.",
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "maxLength",
                    "description": "The maximum length to allow in this point.",
                    "type": "Number"
                }
            ],
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 126,
            "description": "Multiplies the x and y values of this point by a value.",
            "itemtype": "method",
            "name": "scaleBy",
            "params": [
                {
                    "name": "value",
                    "description": "The value to scale by.",
                    "type": "Number"
                }
            ],
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 137,
            "description": "creates a serializable form of this object so it may be saved or passed via Bellhop.\nNote that it adds a special property named `__classname` to tell the Reviver\nhow to restore a pristine `Object`",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "serializable object",
                "type": "Object"
            },
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Point.js",
            "line": 152,
            "description": "Works with a reviver function to restore from a native Object \nto an instance of this type.",
            "params": [
                {
                    "name": "inputObj",
                    "description": "serialized object",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "fromJSON",
            "class": "springroll.native.Point",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Polygon.js",
            "line": 40,
            "description": "Creates a clone of this polygon",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Polygon"
            },
            "class": "springroll.native.Polygon",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Polygon.js",
            "line": 56,
            "description": "Checks if the x, and y coords passed to this function are contained within this polygon",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "springroll.native.Polygon",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 20,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 27,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 34,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 41,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 51,
            "description": "Creates a clone of this Rectangle",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the rectangle",
                "type": "Rectangle"
            },
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/geom/Rectangle.js",
            "line": 62,
            "description": "Checks if the x, and y coords passed to this function are contained within this Rectangle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this Rectangle",
                "type": "Boolean"
            },
            "class": "springroll.native.Rectangle",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 15,
            "description": "The geometry class for Circle",
            "itemtype": "property",
            "name": "Circle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Circle",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 24,
            "description": "The geometry class for Ellipse",
            "itemtype": "property",
            "name": "Ellipse",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Ellipse",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 33,
            "description": "The geometry class for Rectangle",
            "itemtype": "property",
            "name": "Rectangle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Rectangle",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 42,
            "description": "The geometry class for Sector",
            "itemtype": "property",
            "name": "Sector",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Sector",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 51,
            "description": "The geometry class for point",
            "itemtype": "property",
            "name": "Point",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Point",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 60,
            "description": "The geometry class for Polygon",
            "itemtype": "property",
            "name": "Polygon",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Polygon",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 69,
            "description": "If the rotation is expressed in radians",
            "itemtype": "property",
            "name": "useRadians",
            "type": "Boolean",
            "readonly": "",
            "static": 1,
            "default": "true",
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 78,
            "description": "Gets the object's boundaries in its local coordinate space, without any scaling or\nrotation applied.",
            "itemtype": "method",
            "name": "getLocalBounds",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "return": {
                "description": "A rectangle with additional right and bottom properties.",
                "type": "createjs.Rectangle"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 92,
            "description": "Normalize the object scale",
            "itemtype": "method",
            "name": "getScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" to return a specific value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A scale object with x and y keys or a single number if direction is set",
                "type": "Object|Number"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 106,
            "description": "Normalize the object position setting",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "position",
                    "description": "The position object or the value\n \t\tif the direction is set.",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "DisplayObject"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 124,
            "description": "Normalize the object position getting",
            "itemtype": "method",
            "name": "getPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\", default is an object of both",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position as an object with x and y keys if no direction\n\t\tvalue is set, or the value of the specific direction",
                "type": "Object|Number"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 138,
            "description": "Normalize the object scale setting",
            "itemtype": "method",
            "name": "setScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The Display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "scale",
                    "description": "The scaling object or scale value for x and y",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" if setting a specific value, default\n \t\tsets both the scale x and scale y.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "DisplayObject"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 153,
            "description": "Set the pivot or registration point of an object",
            "itemtype": "method",
            "name": "setPivot",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The Display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "pivot",
                    "description": "The object pivot point or the value if the direction is set",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the pivot point",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y position of the pivot point",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" the value for specific direction, default\n \t\twill set using the object.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "DisplayObject"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 170,
            "description": "Set the hit area of the shape",
            "itemtype": "method",
            "name": "setHitArea",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The  Display object",
                    "type": "DisplayObject"
                },
                {
                    "name": "shape",
                    "description": "The geometry object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "DisplayObject"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 183,
            "description": "Get the original size of a bitmap",
            "itemtype": "method",
            "name": "getBitmapSize",
            "static": 1,
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap to measure",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The width (w) and height (h) of the actual bitmap size",
                "type": "Object"
            },
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/DisplayAdapter.js",
            "line": 198,
            "description": "Remove all children from a display object",
            "itemtype": "method",
            "name": "removeChildren",
            "static": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The display object container",
                    "type": "DisplayObjectContainer"
                }
            ],
            "class": "springroll.native.DisplayAdapter",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/native/NativeDisplay.js",
            "line": 27,
            "description": "The main rendering context, typically either `CanvasRenderingContext2d` \nor `WebGLRenderingContext`",
            "itemtype": "property",
            "name": "",
            "type": "RenderingContext",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.native.NativeDisplay",
            "module": "Native Display",
            "namespace": "springroll.native"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 23,
            "description": "The collection of AnimatorTimelines that are playing",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 30,
            "description": "The number of animations",
            "itemtype": "property",
            "name": "_numAnims",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 38,
            "description": "Stored collection of AnimatorTimelines. This is internal to Animator and can't be accessed externally.",
            "itemtype": "property",
            "name": "_animPool",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 46,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "springroll.Captions",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 53,
            "description": "Initializes the singleton instance of Animator.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 66,
            "description": "Play a specified animation",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "clip",
                    "description": "The clip to play. Animation options vary depending on\n                                        object type.",
                    "type": "PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "animData",
                    "description": "One of or an array of the following\n  * objects in the format:\n\n      {\n          anim:<string|array of strings|array of ParallelSpineData|array of Textures>,\n          start:0,\n          speed:1,\n          loop:false,\n          audio:{alias:\"MyAlias\", start:300}\n      }\n\n      * anim is the data about the animation to play. See below for more info\n      * start is milliseconds into the animation to start (0 if omitted). A value of -1\n          starts from a random time in the animation.\n      * speed is a multiplier for the animation speed (1 if omitted).\n      * loop is if the animation should loop (false if omitted).\n      * audio is audio to sync the animation to using springroll.Sound. audio can be a String\n          if you want the audio to start 0 milliseconds into the animation.\n  * strings - A single animation to play on a Spine skeleton.\n  * arrays of strings - An array of animations to play sequentially on a Spine skeleton.\n  * arrays of ParallelSpineData - An array of animations to play at the same time on a\n      Spine skeleton.\n  * arrays of Textures - An array of textures to play on a MovieClip.\n  * numbers - milliseconds to wait.\n  * functions - called upon reaching, followed immediately by the next item.",
                    "type": "String|Array"
                },
                {
                    "name": "onComplete",
                    "description": "The function to call once the animation has finished.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancelled",
                    "description": "A callback function for when an animation is stopped with\n                                Animator.stop() or to play another animation.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The timeline object",
                "type": "springroll.pixi.AnimatorTimeline"
            },
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 169,
            "description": "Creates the AnimatorTimeline for a given animation",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "clip",
                    "description": "The instance to animate",
                    "type": "PIXI.Spine|PIXI.MovieClip"
                },
                {
                    "name": "animData",
                    "description": "List of animation events.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to callback when we're done",
                    "type": "Function"
                },
                {
                    "name": "cancelledCallback",
                    "description": "The function to callback when cancelled",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "springroll.pixi.AnimatorTimeline"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 282,
            "description": "Determines if a given instance can be animated by Animator.",
            "itemtype": "method",
            "name": "canAnimate",
            "params": [
                {
                    "name": "instance",
                    "description": "The object to check for animation properties.",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "return": {
                "description": "If the instance can be animated or not.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 302,
            "description": "Get duration of animation (or sequence of animations) in seconds",
            "itemtype": "method",
            "name": "getDuration",
            "params": [
                {
                    "name": "clip",
                    "description": "The display object that the animation matches.",
                    "type": "PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "animData",
                    "description": "The animation data or array, in the format that play() uses.",
                    "type": "String|Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "Duration of animation event in milliseconds",
                "type": "Number"
            },
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 409,
            "description": "Checks to see if a Spine animation includes a given animation alias",
            "itemtype": "method",
            "name": "instanceHasAnimation",
            "params": [
                {
                    "name": "instance",
                    "description": "The animation to search. This has to be a Spine animation.",
                    "type": "PIXI.Spine"
                },
                {
                    "name": "anim",
                    "description": "The animation alias to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the animation is found",
                "type": "Boolean"
            },
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 424,
            "description": "Checks to see if a Spine animation includes a given animation alias",
            "itemtype": "method",
            "name": "checkSpineForAnimation",
            "params": [
                {
                    "name": "clip",
                    "description": "The spine to search",
                    "type": "PIXI.Spine"
                },
                {
                    "name": "anim",
                    "description": "The animation alias to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the animation is found",
                "type": "Boolean"
            },
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 437,
            "description": "Stop a clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "clip",
                    "description": "The clip to stop",
                    "type": "PIXI.MovieClip|PIXI.Spine"
                }
            ],
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 463,
            "description": "Stops all current animations",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "params": [
                {
                    "name": "doCancelled",
                    "description": "We if should do the cancelled callback, if available.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 488,
            "description": "Put an AnimatorTimeline back into the general pool after it's done playing\nor has been manually stopped.",
            "itemtype": "method",
            "name": "_repool",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "springroll.pixi.AnimatorTimeline"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 508,
            "description": "Update each frame",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 793,
            "description": "Called when a movie clip is done playing, calls the AnimatorTimeline's\ncallback if it has one",
            "itemtype": "method",
            "name": "_onMovieClipDone",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "pixi.AnimatorTimeline"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/Animator.js",
            "line": 818,
            "description": "Destroy this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.pixi.Animator",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 37,
            "description": "Initialize the AnimatorTimeline",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "clip",
                    "description": "The AnimatorTimeline's clip",
                    "type": "PIXI.MovieClip|Pixi.Spine"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the clip is finished playing",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which the clip should be played",
                    "type": "Number"
                },
                {
                    "name": "cancelledCallback",
                    "description": "The function to call if the clip's playback is\n                                    interrupted.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Animator.AnimatorTimeline"
            },
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 50,
            "description": "The clip for this AnimTimeLine",
            "itemtype": "property",
            "name": "clip",
            "type": "PIXI.MovieClip|PIXI.Spine",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 57,
            "description": "Whether the clip is a PIXI.Spine",
            "itemtype": "property",
            "name": "isSpine",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 64,
            "description": "The function to call when the clip is finished playing",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 71,
            "description": "The function to call if the clip's playback is interrupted.",
            "itemtype": "property",
            "name": "cancelledCallback",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 78,
            "description": "The current animation duration in seconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 85,
            "description": "A speed multiplier for the current animation. Concurrent Spine animations use\nspineSpeeds instead.",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 93,
            "description": "A list of animation, audio, functions, and/or pauses to play.",
            "itemtype": "property",
            "name": "eventList",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 100,
            "description": "The index of the active animation in eventList.",
            "itemtype": "property",
            "name": "listIndex",
            "type": "Int",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 106,
            "itemtype": "property",
            "name": "spineStates",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 112,
            "description": "If the current animation loops",
            "itemtype": "property",
            "name": "isLooping",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 119,
            "description": "The position of the animation in seconds",
            "itemtype": "property",
            "name": "_time_sec",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 126,
            "description": "Sound alias to sync to during the animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 133,
            "description": "A sound instance object from Sound, used for tracking sound position.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 140,
            "description": "If the timeline will, but has yet to, play a sound",
            "itemtype": "property",
            "name": "playSound",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 147,
            "description": "The time (seconds) into the animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 154,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 161,
            "description": "If this timeline plays captions",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 169,
            "description": "If this animation is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 176,
            "description": "If the timeline is actively playing an animation, instead of a pause timer.",
            "itemtype": "property",
            "name": "isAnim",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 184,
            "description": "If the timeline is complete. Looping timelines will never complete.",
            "itemtype": "property",
            "name": "complete",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 195,
            "description": "Advances to the next item in the list of things to play.",
            "itemtype": "method",
            "name": "_nextItem",
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 337,
            "description": "The position of the current animation, or the current pause timer, in milliseconds.",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/animation/AnimatorTimeline.js",
            "line": 347,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.AnimatorTimeline",
            "module": "PIXI Animation",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 30,
            "description": "Dictionary of scales by asset id. Use this to return your asset to normal size.\nAssets are only added to this dictionary after a url has been retrieved with getUrl().",
            "itemtype": "property",
            "name": "scales",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 39,
            "description": "The available size definitions, e.g., {\"maxSize\":400, \"order\": [\"tiny\", \"sd\"]}",
            "itemtype": "property",
            "name": "sizes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 47,
            "description": "Dictionary of assets by asset id",
            "itemtype": "property",
            "name": "assets",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 55,
            "description": "The cache of asset url paths",
            "itemtype": "property",
            "name": "assetUrlCache",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 63,
            "description": "The scaling value for each asset size id, e.g., {\"sd\" : 1, \"tiny\" : 0.5}",
            "itemtype": "property",
            "name": "scales",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 71,
            "description": "The paths to each resolution folder, e.g., {\"sd\":\"images/sd/\", \"tiny\":\"images/tiny/\"}",
            "itemtype": "property",
            "name": "paths",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 79,
            "description": "The collection of perferred size to load",
            "itemtype": "property",
            "name": "sizeOrder",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 87,
            "description": "If we should use low hardware, if we know we're on a slow device",
            "itemtype": "property",
            "name": "lowHW",
            "type": "Boolean",
            "static": 1,
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 94,
            "description": "Initialize the asset manager. The asset manager is capable of taking different paths for\neach size of image as well as an animation file path for Spine animations. Image assets\ndo not have to exist in each size. Fonts are marked for unloading purposes.\nExample config file:\n\n\t\t\t{\n\t\t\t\t\"path\": {\n\t\t\t\t\t\"sd\": \"images/sd/\",\n\t\t\t\t\t\"tiny\": \"images/tiny/\",\n\t\t\t\t\t\"anim\": \"anims/\"\n\t\t\t\t},\n\t\t\t\t\"scale\": {\n\t\t\t\t\t\"sd\": 1,\n\t\t\t\t\t\"tiny\": 2\n\t\t\t\t},\n\t\t\t\t\"sizing\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"maxSize\": 400,\n\t\t\t\t\t\t\"order\": [\n\t\t\t\t\t\t\t\"tiny\",\n\t\t\t\t\t\t\t\"sd\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"maxSize\": 10000,\n\t\t\t\t\t\t\"order\": [\n\t\t\t\t\t\t\t\"sd\",\n\t\t\t\t\t\t\t\"tiny\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"assets\": {\n\t\t\t\t\t\"transition\": {\n\t\t\t\t\t\t\"src\": \"transition.json\",\n\t\t\t\t\t\t\"anim\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"TransitionSheet\": {\n\t\t\t\t\t\t\"src\": \"ui/TransitionSheet.json\",\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":true\n\t\t\t\t\t},\n\t\t\t\t\t\"FoodTruck_Title\": {\n\t\t\t\t\t\t\"src\": \"backgrounds/FoodTruck_Title.jpg\",\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":true\n\t\t\t\t\t},\n\t\t\t\t\t\"StartButton\": {\n\t\t\t\t\t\t\"src\": \"ui/StartButton.png\",\n\t\t\t\t\t\t\"split\": {\n\t\t\t\t\t\t\t\"srcReplace\":\".png\",\n\t\t\t\t\t\t\t\"alpha\":\"-alpha.png\",\n\t\t\t\t\t\t\t\"color\":\"-color.jpg\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":false\n\t\t\t\t\t},\n\t\t\t\t\t\"LevelTitleFont\": {\n\t\t\t\t\t\t\"src\": \"ui/LevelTitleFont.xml\",\n\t\t\t\t\t\t\"sd\": true,\n\t\t\t\t\t\t\"tiny\": false,\n\t\t\t\t\t\t\"isFont\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"AnAssetCollection\": {\n\t\t\t\t\t\t\"format\": {\n\t\t\t\t\t\t\t\"src\": \"backgrounds/%NAME%.jpg\",\n\t\t\t\t\t\t\t\"sd\": true,\n\t\t\t\t\t\t\t\"tiny\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"assets\": [\n\t\t\t\t\t\t\t\"Select_Background\",\n\t\t\t\t\t\t\t\"Result_Background\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "The configuration file which contains keys for \"path\", \"scale\",\n                       \"sizing\", \"assets\"",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "The stage width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The stage height",
                    "type": "Number"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 209,
            "description": "Get the alias of the preferred size to use",
            "itemtype": "method",
            "name": "getPreferredSize",
            "static": 1,
            "return": {
                "description": "The alias for the preferred size",
                "type": "String"
            },
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 220,
            "description": "Get the preferred scale amount",
            "itemtype": "method",
            "name": "getPreferredScale",
            "static": 1,
            "return": {
                "description": "The scale amount associated with the preferred size",
                "type": "Number"
            },
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 231,
            "description": "Pick the preferred scale based on the screen resolution",
            "itemtype": "method",
            "name": "pickScale",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The stage width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The stage height",
                    "type": "Number"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 253,
            "description": "Get a asset url by asset id",
            "itemtype": "method",
            "name": "getUrl",
            "static": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "The unique asset id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The url of the asset at the appropriate size."
            },
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 295,
            "description": "Loads an asset or list of assets, attempting to correctly apply texture resolution to all\nloaded textures, as well as recombining images that have been split into alpha and color\nportions. Currently the alpha/color split will only work when loading with a task list.",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "assetOrAssets",
                    "description": "The collection of asset ids or single asset id",
                    "type": "Array|String"
                },
                {
                    "name": "callback",
                    "description": "A function to call when load is complete",
                    "type": "Function"
                },
                {
                    "name": "taskList",
                    "description": "An array or TaskManager to add a PixiTask to for\n                                      loading. If omitted, loads immediately with\n                                      PIXI.AssetLoader.",
                    "type": "Array|TaskManager",
                    "optional": true
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 454,
            "description": "Callback for when a pair of split images are loaded to be reassembled.",
            "itemtype": "method",
            "name": "onSplitLoaded",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "results",
                    "description": "Dictionary of LoaderResults.",
                    "type": "Object"
                },
                {
                    "name": "task",
                    "description": "The ListTask that loaded the manifest.",
                    "type": "ListTask"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 471,
            "description": "Callback for when all split textures have been loaded and recombined. This starts the loading\nof assets within PixiJS.",
            "itemtype": "method",
            "name": "onAllSplitsLoaded",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixiTask",
                    "description": "The PixiTask to load up all assets for PixiJS.",
                    "type": "PixiTask"
                },
                {
                    "name": "results",
                    "description": "Dictionary of LoaderResults.",
                    "type": "Object"
                },
                {
                    "name": "task",
                    "description": "The ListTask that loaded the manifest.",
                    "type": "ListTask"
                },
                {
                    "name": "taskManager",
                    "description": "The TaskManager that should run pixiTask.",
                    "type": "TaskManager"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 487,
            "description": "Callback for when assets are loaded, to automatically apply the resolution of textures.",
            "itemtype": "method",
            "name": "onLoaded",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "assetList",
                    "description": "Array of asset ids that were just loaded.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The user callback for the load.",
                    "type": "Function"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 514,
            "description": "Unload an asset or list of assets.",
            "itemtype": "method",
            "name": "unload",
            "static": 1,
            "params": [
                {
                    "name": "assetOrAssets",
                    "description": "The collection of asset ids or single asset id",
                    "type": "Array|String"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 536,
            "description": "Unload an asset",
            "itemtype": "method",
            "name": "unloadAsset",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "asset",
                    "description": "The asset id to unload",
                    "type": "String"
                }
            ],
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 572,
            "description": "Assemble a dictionary of Texture arrays representing animations from the PixiJS\ntexture cache.\nExample of a getAnims() call:\n\n\t\t\tvar animationDictionary = AssetManager.getAnims(\n\t\t\t\t{\n\t\t\t\t\t\"bobIdleHappy\":{\"name\":\"bob_idle_happy#\", \"numberMin\":1, \"numberMax\":139},\n\t\t\t\t\t\"bobIdleNeutral\":{\"name\":\"bob_idle_neutral#\", \"numberMin\":1, \"numberMax\":140},\n\t\t\t\t\t\"bobIdleMad\":{\"name\":\"bob_idle_mad#\", \"numberMin\":1, \"numberMax\":140},\n\t\t\t\t\t\"bobPos\":{\"name\":\"bob_react_pos#\", \"numberMin\":1, \"numberMax\":23},\n\t\t\t\t\t\"bobNeg\":{\"name\":\"bob_react_neg#\", \"numberMin\":1, \"numberMax\":31},\n\t\t\t\t},\n\t\t\t\t4);",
            "itemtype": "method",
            "name": "getAnims",
            "static": 1,
            "params": [
                {
                    "name": "anims",
                    "description": "The dictionary of animation assets",
                    "type": "Object"
                },
                {
                    "name": "maxDigits",
                    "description": "Maximum number of digits, like 4 for an animation exported\n                           as anim_0001.png",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "outObj",
                    "description": "If already using an return object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An collection of PIXI.Textures for each animation id suitable for\n                 use in PIXI.MovieClip",
                "type": "Object"
            },
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/AssetManager.js",
            "line": 654,
            "description": "Pulled from EaselJS's SpriteSheetUtils.\nMerges the rgb channels of one image with the alpha channel of another. This can be used to\ncombine a compressed JPEG image containing color data with a PNG32 monochromatic image\ncontaining alpha data. With certain types of images (those with detail that lend itself to\nJPEG compression) this can provide significant file size savings versus a single RGBA PNG32.\nThis method is very fast (generally on the order of 1-2 ms to run).",
            "itemtype": "method",
            "name": "mergeAlpha",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "rbgImage",
                    "description": "The image (or canvas) containing the RGB channels to use.",
                    "type": "Image"
                },
                {
                    "name": "alphaImage",
                    "description": "The image (or canvas) containing the alpha channel to use.",
                    "type": "Image"
                },
                {
                    "name": "canvas",
                    "description": "If specified, this canvas will be used and returned. If not, a new\n                         canvas will be created.",
                    "type": "Canvas",
                    "optional": true
                }
            ],
            "return": {
                "description": "A canvas with the combined image data. This can be used as a source for a\n                 Texture.",
                "type": "Canvas"
            },
            "class": "springroll.pixi.AssetManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 91,
            "description": "The function that should be called when the button is released.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "releaseCallback",
            "type": "Function",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 98,
            "description": "The function that should be called when the button is moused over.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "overCallback",
            "type": "Function",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 105,
            "description": "The function that should be called when mouse leaves the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "outCallback",
            "type": "Function",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 112,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 119,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 127,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 136,
            "description": "The current style for the label, to avoid setting this if it is unchanged.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentLabelStyle",
            "type": "Object",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 143,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "PIXI.Point",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 179,
            "description": "Callback for mouse up outside, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upOutCB",
            "type": "Function",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 222,
            "description": "Constructor for the button when using PIXI.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 487,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 593,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onOver",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 606,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onOut",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 619,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onDown",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 634,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onUp",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/Button.js",
            "line": 652,
            "description": "The callback for when the mouse/touch is released outside the button when the button was held down.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onUpOutside",
            "class": "springroll.pixi.Button",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragData.js",
            "line": 16,
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 33,
            "description": "The object that's being dragged, or a dictionary of DragData being dragged\nby id if multitouch is true.",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "PIXI.DisplayObject|Dictionary",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 42,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 50,
            "description": "The position x, y of the mouse down on the stage. This is only used\nwhen multitouch is false - the DragData has it when multitouch is true.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "PIXI.Point",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 58,
            "description": "The position x, y of the object when interaction with it started. If multitouch is\ntrue, then this will only be set during a drag stop callback, for the object that just\nstopped getting dragged.",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "PIXI.Point",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 66,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Bool",
            "default": "true",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 74,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Bool",
            "default": "false",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 83,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Bool",
            "default": "false",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 92,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Bool",
            "default": "false",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 101,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 120,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "PIXI.Stage",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 127,
            "description": "The offset from the dragged object's position that the initial mouse event\nwas at. This is only used when multitouch is false - the DragData has\nit when multitouch is true.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "PIXI.Point",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 136,
            "description": "External callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 143,
            "description": "External callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 155,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 162,
            "description": "If this DragManager is using multitouch for dragging.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_multitouch",
            "type": "Boolean",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 172,
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 175,
            "description": "If the DragManager allows multitouch dragging. Setting this stops any current\ndrags.",
            "itemtype": "property",
            "name": "multitouch",
            "type": "Boolean",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 200,
            "description": "Manually starts dragging an object. If a mouse down event is not supplied\nas the second argument, it defaults to a held drag, that ends as soon as\nthe mouse is released. When using multitouch, passing a interaction data is\nrequired.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "interactionData",
                    "description": "The interaction data about\n                                              the input event that triggered this.",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 216,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "interactionData",
                    "description": "The interaction data about\n                                               the input event that triggered this.",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 291,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "params": [
                {
                    "name": "interactionData",
                    "description": "The interaction data about\n                                               the input event that triggered this.",
                    "type": "PIXI.InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 309,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "interactionData",
                    "description": "The ineraction data about the moved mouse",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 339,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "params": [
                {
                    "name": "interactionData",
                    "description": "The ineraction data about the moved mouse",
                    "type": "PIXI.InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 362,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called.",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "obj",
                    "description": "A specific object to stop dragging, if multitouch\n                                      is true. If this is omitted, it stops all drags.",
                    "type": "PIXI.DisplayObject",
                    "optional": true
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 388,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "interactionData",
                    "description": "The ineraction data about the moved mouse",
                    "type": "PIXI.InteractionData"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Bool"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 459,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "interactionData",
                    "description": "Mouse move event",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 517,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same space as the dragged object.",
                    "type": "PIXI.Point"
                },
                {
                    "name": "dragOffset",
                    "description": "The drag offset for the dragged object.",
                    "type": "PIXI.Point"
                },
                {
                    "name": "obj",
                    "description": "The object to snap.",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 561,
            "description": "Simple clamp function",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 587,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on\nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function), _dragMan (springroll.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "bounds",
                    "description": "The rectangle bounds. 'right' and 'bottom' properties\n                                     will be added to this object.",
                    "type": "PIXI.Rectangle",
                    "optional": true
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 618,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 639,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/ui/DragManager.js",
            "line": 669,
            "class": "springroll.pixi.DragManager",
            "module": "PIXI UI",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 15,
            "description": "The geometry class for Circle",
            "itemtype": "property",
            "name": "Circle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Circle",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 24,
            "description": "The geometry class for Ellipse",
            "itemtype": "property",
            "name": "Ellipse",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Ellipse",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 33,
            "description": "The geometry class for Rectangle",
            "itemtype": "property",
            "name": "Rectangle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Rectangle",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 42,
            "description": "The geometry class for Sector",
            "itemtype": "property",
            "name": "Sector",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Sector",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 51,
            "description": "The geometry class for point",
            "itemtype": "property",
            "name": "Point",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Point",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 60,
            "description": "The geometry class for Polygon",
            "itemtype": "property",
            "name": "Polygon",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Polygon",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 69,
            "description": "If the rotation is expressed in radians",
            "itemtype": "property",
            "name": "useRadians",
            "type": "Boolean",
            "readonly": "",
            "static": 1,
            "default": "true",
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 78,
            "description": "Gets the object's boundaries in its local coordinate space, without any scaling or\nrotation applied.",
            "itemtype": "method",
            "name": "getLocalBounds",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "return": {
                "description": "A rectangle with additional right and bottom properties.",
                "type": "PIXI.Rectangle"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 104,
            "description": "Normalize the object scale",
            "itemtype": "method",
            "name": "getScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" to return a specific value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A scale object with x and y keys or a single number if direction is set",
                "type": "Object|Number"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 121,
            "description": "Normalize the object position setting",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "position",
                    "description": "The position object or the value\n \t\tif the direction is set.",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 147,
            "description": "Normalize the object position getting",
            "itemtype": "method",
            "name": "getPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\", default is an object of both",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position as an object with x and y keys if no direction\n\t\tvalue is set, or the value of the specific direction",
                "type": "Object|Number"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 165,
            "description": "Normalize the object scale setting",
            "itemtype": "method",
            "name": "setScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "scale",
                    "description": "The scaling object or scale value for x and y",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" if setting a specific value, default\n \t\tsets both the scale x and scale y.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 188,
            "description": "Set the pivot or registration point of an object",
            "itemtype": "method",
            "name": "setPivot",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "pivot",
                    "description": "The object pivot point or the value if the direction is set",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the pivot point",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y position of the pivot point",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" the value for specific direction, default\n \t\twill set using the object.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 210,
            "description": "Set the hit area of the shape",
            "itemtype": "method",
            "name": "setHitArea",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "shape",
                    "description": "The geometry object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 224,
            "description": "Get the original size of a bitmap",
            "itemtype": "method",
            "name": "getBitmapSize",
            "static": 1,
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap to measure",
                    "type": "PIXI.Bitmap"
                }
            ],
            "return": {
                "description": "The width (w) and height (h) of the actual bitmap size",
                "type": "Object"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 239,
            "description": "Remove all children from a display object",
            "itemtype": "method",
            "name": "removeChildren",
            "static": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The display object container",
                    "type": "PIXI.DisplayObjectContainer"
                }
            ],
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 250,
            "description": "If a container contains a child",
            "params": [
                {
                    "name": "container",
                    "description": "The container",
                    "type": "PIXI.DisplayObjectContainer"
                },
                {
                    "name": "child",
                    "description": "The object to test",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "return": {
                "description": "If the child contained within the container",
                "type": "Boolean"
            },
            "class": "springroll.pixi.DisplayAdapter",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 46,
            "description": "If the display should keep mouse move events running when the display is disabled.",
            "itemtype": "property",
            "name": "keepMouseover",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 53,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "stage",
            "type": "PIXI.Stage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 61,
            "description": "The Pixi renderer.",
            "itemtype": "property",
            "name": "renderer",
            "type": "PIXI.CanvasRenderer|PIXI.WebGLRenderer",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 103,
            "description": "If Pixi is being rendered with WebGL.",
            "itemtype": "property",
            "name": "isWebGL",
            "type": "Boolean",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 119,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 148,
            "description": "Resizes the canvas and the renderer. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 161,
            "description": "Updates the stage and draws it. This is only called by the Application.\nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "force",
                    "description": "Will re-render even if the game is paused or not visible",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 177,
            "description": "Destroys the display. This method is called by the Application and should\nnot be called directly, use Application.removeDisplay(id).",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "springroll.pixi.PixiDisplay",
            "module": "PIXI Display",
            "namespace": "springroll.pixi"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 22,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 30,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 38,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 47,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 56,
            "description": "The main rendering context or the root display object or stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Mixed",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 64,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 72,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 79,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 92,
            "description": "The Animator class to use when using this display. Other modules\nuses this to determine what Animator to use, for instance states\nuses Animator when playing transition animations.",
            "itemtype": "property",
            "name": "animator",
            "type": "Animator",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "default": "null",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 103,
            "description": "Some of the modules require a special display adapter to provide\ncommon methods for managing display objects.",
            "itemtype": "property",
            "name": "adapter",
            "type": "DisplayAdapter",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "default": "null",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 116,
            "description": "If input is enabled on the stage for this display. The default is true.\nWithout a rendering library, this does not actually have an effect.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 130,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 144,
            "description": "Resizes the canvas. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 157,
            "description": "Updates the stage and draws it. This is only called by the Application. \nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                },
                {
                    "name": "force",
                    "description": "For the re-render",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/displays/AbstractDisplay.js",
            "line": 170,
            "description": "Destroys the display. This method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "springroll.AbstractDisplay",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 16,
            "description": "The collection of listeners",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 23,
            "description": "If the dispatcher is destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 34,
            "description": "If the dispatcher is destroyed",
            "itemtype": "property",
            "name": "destroyed",
            "type": "Boolean",
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 46,
            "description": "Dispatch an event",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to trigger",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "Additional parameters for the listener functions.",
                    "type": "*"
                }
            ],
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 81,
            "description": "Add an event listener but only handle it one time.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "name",
                    "description": "The type of event (can be multiple events separated by spaces),\n        or a map of events to handlers",
                    "type": "String|object"
                },
                {
                    "name": "callback",
                    "description": "The callback function when event is fired or an array of callbacks.",
                    "type": "Function|Array*"
                },
                {
                    "name": "priority",
                    "description": "The priority of the event listener. Higher numbers are handled first.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Return this EventDispatcher for chaining calls.",
                "type": "EventDispatcher"
            },
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 96,
            "description": "Add an event listener. The parameters for the listener functions depend on the event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "The type of event (can be multiple events separated by spaces),\n        or a map of events to handlers",
                    "type": "String|object"
                },
                {
                    "name": "callback",
                    "description": "The callback function when event is fired or an array of callbacks.",
                    "type": "Function|Array*"
                },
                {
                    "name": "priority",
                    "description": "The priority of the event listener. Higher numbers are handled first.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Return this EventDispatcher for chaining calls.",
                "type": "EventDispatcher"
            },
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 164,
            "description": "Remove the event listener",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "The type of event string separated by spaces, if no name is specifed remove all listeners.",
                    "type": "String*"
                },
                {
                    "name": "callback",
                    "description": "The listener function or collection of callback functions",
                    "type": "Function|Array*"
                }
            ],
            "return": {
                "description": "Return this EventDispatcher for chaining calls.",
                "type": "EventDispatcher"
            },
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 221,
            "description": "Checks if the EventDispatcher has a specific listener or any listener for a given event.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the single event type to check for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function to check for. If omitted, checks for any listener.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the EventDispatcher has the specified listener.",
                "type": "Boolean"
            },
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 240,
            "description": "Destroy and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 250,
            "description": "Return type of the value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The type",
                "type": "String"
            },
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 272,
            "description": "Adds EventDispatcher methods and properties to an object or object prototype.",
            "itemtype": "method",
            "name": "mixIn",
            "params": [
                {
                    "name": "object",
                    "description": "The object or prototype",
                    "type": "Object"
                },
                {
                    "name": "callConstructor",
                    "description": "If the EventDispatcher constructor should be called as well.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "springroll.EventDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 20,
            "description": "The map of property values to store",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_properties",
            "type": "Object",
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 32,
            "description": "Generic setter for an option",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "prop",
                    "description": "The property name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Mixed"
                }
            ],
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 54,
            "description": "Generic setter for an option",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "prop",
                    "description": "The option name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the option",
                "type": "Mixed"
            },
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 73,
            "description": "Add a new property to allow deteching",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "prop",
                    "description": "The property name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The default value",
                    "type": "Mixed",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "readOnly",
                    "description": "If the property is readonly",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The instance for chaining",
                "type": "PropertyDispatcher"
            },
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 107,
            "description": "Turn on read-only for properties",
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "prop",
                    "description": "The property or properties to make readonly",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The instance for chaining",
                "type": "PropertyDispatcher"
            },
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 128,
            "description": "Whenever a property is get a responder is called",
            "itemtype": "method",
            "name": "respond",
            "params": [
                {
                    "name": "name",
                    "description": "The property name",
                    "type": "String"
                },
                {
                    "name": "responder",
                    "description": "Function to call when getting property",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The instance for chaining",
                "type": "PropertyDispatcher"
            },
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 153,
            "description": "Internal class for managing the property",
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/events/PropertyDispatcher.js",
            "line": 174,
            "description": "Clean-up all references, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.PropertyDispatcher",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AbstractHint.js",
            "line": 17,
            "description": "The reference to the hint play",
            "itemtype": "property",
            "name": "_hints",
            "type": "springroll.HintsPlayer",
            "class": "springroll.AbstractHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AbstractHint.js",
            "line": 28,
            "description": "Run the hint",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.AbstractHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AbstractHint.js",
            "line": 38,
            "description": "Handle when the media completes",
            "itemtype": "method",
            "name": "_onPlayComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "original",
                    "description": "The original callback, either complete or cancelled",
                    "type": "Function"
                }
            ],
            "class": "springroll.AbstractHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AbstractHint.js",
            "line": 53,
            "description": "Clean-up the hint, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.AbstractHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AnimatorHint.js",
            "line": 39,
            "description": "Run the hint",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.AnimatorHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/AnimatorHint.js",
            "line": 54,
            "description": "Clean-up the hint, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.AnimatorHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/FunctionHint.js",
            "line": 30,
            "description": "Start function hint",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.FunctionHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/FunctionHint.js",
            "line": 40,
            "description": "Clean-up the hint, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.FunctionHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 32,
            "description": "The collection of tiers",
            "itemtype": "property",
            "name": "tiers",
            "type": "Array",
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 40,
            "description": "The current tier index",
            "itemtype": "property",
            "name": "_current",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 47,
            "description": "The current tier selected",
            "itemtype": "property",
            "name": "_tier",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 61,
            "description": "Run the hint",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 72,
            "description": "Add a VO hint to the player.",
            "itemtype": "method",
            "name": "setVO",
            "params": [
                {
                    "name": "idOrList",
                    "description": "The list of VO element, see VOPlayer.play",
                    "type": "String|array",
                    "optional": true
                },
                {
                    "name": "onComplete",
                    "description": "Call when the VO is done playing",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "Call when the VO is cancelled playing,\n       a value of true sets onComplete to also be the onCancelled callback.",
                    "type": "Function|boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.VOHint"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 93,
            "description": "Add an animator hint to the player",
            "itemtype": "method",
            "name": "setAnim",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance of the clip to play with Animator",
                    "type": "createjs.MovieClip|*"
                },
                {
                    "name": "events",
                    "description": "The event aliases to play, see Animator.play",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "Call when the VO is done playing",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "Call when the VO is cancelled playing,\n       a value of true sets onComplete to also be the onCancelled callback.",
                    "type": "Function|boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.AnimatorHint"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 116,
            "description": "Add an animator hint to the player. If you use this hinting method, you\nNEED to re-enable the hinting when it's done. Whereas the VO and ANIM methods\nwith automatically re-enable the hinting button.",
            "itemtype": "method",
            "name": "setFunc",
            "params": [
                {
                    "name": "onStart",
                    "description": "The instance of the clip to play with Animator",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.FunctionHint"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 133,
            "description": "Add a new timeout tier of hinting",
            "itemtype": "method",
            "name": "addTier",
            "return": {
                "description": "The instance of the group hint, for chaining",
                "type": "springroll.GroupHint"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 145,
            "description": "Advance to the next tier of hints.",
            "itemtype": "method",
            "name": "nextTier",
            "return": {
                "description": "The instance of the group hint, for chaining",
                "type": "springroll.GroupHint"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 164,
            "description": "Reset the current tier to be the first",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/GroupHint.js",
            "line": 175,
            "description": "Clean-up the hint, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.GroupHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 25,
            "description": "Reference to the current app",
            "itemtype": "property",
            "name": "_app",
            "type": "springroll.Application",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 32,
            "description": "The currently selected hint",
            "itemtype": "property",
            "name": "_hint",
            "type": "springroll.AbstractHint",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 39,
            "description": "The total number of milliseconds until playing",
            "itemtype": "property",
            "name": "_duration",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 46,
            "description": "The countdown in milliseconds",
            "itemtype": "property",
            "name": "_timer",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 53,
            "description": "Time in ms between timeout lines",
            "itemtype": "property",
            "name": "timerDuration",
            "type": "Number",
            "default": "12000",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 65,
            "description": "If a hint is currently playing",
            "itemtype": "property",
            "name": "_playing",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 73,
            "description": "Contains previously set hints to be cleaned up after the new hint plays,\nto prevent erasing callbacks too soon.",
            "itemtype": "property",
            "name": "_oldHints",
            "type": "Array",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 85,
            "description": "Play an animation event",
            "itemtype": "event",
            "name": "anim",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "instance",
                            "description": "The movieclip instance",
                            "type": "createjs.MovieClip"
                        },
                        {
                            "name": "events",
                            "description": "The Animator events",
                            "type": "String|Array"
                        },
                        {
                            "name": "complete",
                            "description": "Callback when complete",
                            "type": "Function"
                        },
                        {
                            "name": "cancel",
                            "description": "Callback when canceled",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 95,
            "description": "Play an Voice-Over event",
            "itemtype": "event",
            "name": "vo",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "events",
                            "description": "The VO alias or array of aliases/times/etc",
                            "type": "String|Array"
                        },
                        {
                            "name": "complete",
                            "description": "Callback when complete",
                            "type": "Function"
                        },
                        {
                            "name": "cancel",
                            "description": "Callback when canceled",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 104,
            "description": "Event when the enabled status of the hint changes",
            "itemtype": "event",
            "name": "enabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "If the player is enabled",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 110,
            "description": "Add a VO hint to the player.",
            "itemtype": "method",
            "name": "vo",
            "params": [
                {
                    "name": "idOrList",
                    "description": "The list of VO element, see VOPlayer.play",
                    "type": "String|Array"
                },
                {
                    "name": "onComplete",
                    "description": "Call when the VO is done playing",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "Call when the VO is cancelled playing,\n       a value of true sets onComplete to also be the onCancelled callback.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.VOHint"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 130,
            "description": "Add an animator hint to the player",
            "itemtype": "method",
            "name": "anim",
            "params": [
                {
                    "name": "instance",
                    "description": "The instance of the clip to play with Animator",
                    "type": "createjs.MovieClip|*"
                },
                {
                    "name": "events",
                    "description": "The event aliases to play, see Animator.play",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "Call when the VO is done playing",
                    "type": "Function"
                },
                {
                    "name": "onCancel",
                    "description": "Call when the VO is cancelled playing,\n       a value of true sets onComplete to also be the onCancelled callback.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.AnimatorHint"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 152,
            "description": "Add an animator hint to the player. If you use this hinting method, you\nNEED to re-enable the hinting when it's done. Whereas the VO and ANIM methods\nwith automatically re-enable the hinting button.",
            "itemtype": "method",
            "name": "func",
            "params": [
                {
                    "name": "onStart",
                    "description": "The instance of the clip to play with Animator",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The newly added hint",
                "type": "springroll.FunctionHint"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 165,
            "description": "Create the new group hint for randomizing hints or for tiered hinting.\nYou can save this group hint for later and assign using HintsPlayer.set()",
            "itemtype": "method",
            "name": "group",
            "return": {
                "description": "The new group hint",
                "type": "springroll.GroupHint"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 176,
            "description": "Set the current method to use",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "hint",
                    "description": "The new hint to add",
                    "type": "springroll.AbstractHint"
                }
            ],
            "return": {
                "description": "Instance of the player, for chaining",
                "type": "springroll.AbstractHint"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 191,
            "description": "Removes the current hint",
            "itemtype": "method",
            "name": "clear",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 207,
            "description": "Manually play the current hint",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "instance of the player for chaining",
                "type": "springroll.HintsPlayer"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 229,
            "description": "Start a timer",
            "itemtype": "method",
            "name": "startTimer",
            "params": [
                {
                    "name": "duration",
                    "description": "The number of milliseconds before playing hint",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "12000"
                }
            ],
            "return": {
                "description": "instance of the player for chaining",
                "type": "springroll.HintsPlayer"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 242,
            "description": "Stop the timer and remove update listener",
            "itemtype": "method",
            "name": "stopTimer",
            "return": {
                "description": "instance of the player for chaining",
                "type": "springroll.HintsPlayer"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 248,
            "description": "Stop the timer and remove update listener.\nAlias for stopTimer",
            "itemtype": "method",
            "name": "removeTimer",
            "return": {
                "description": "instance of the player for chaining",
                "type": "springroll.HintsPlayer"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 261,
            "description": "Reset the timer to start over",
            "itemtype": "method",
            "name": "resetTimer",
            "return": {
                "description": "instance of the player for chaining",
                "type": "springroll.HintsPlayer"
            },
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 273,
            "description": "If the help button is enabled",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 285,
            "description": "Handle the update function",
            "itemtype": "method",
            "name": "_update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "Number of milliseconds since the last update",
                    "type": "Int"
                }
            ],
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 307,
            "description": "Internal callback when a hint is done playing",
            "itemtype": "method",
            "name": "_done",
            "access": "private",
            "tagname": "",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 327,
            "description": "destroys old hints",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlayer.js",
            "line": 342,
            "description": "Destroy, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.HintsPlayer",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlugin.js",
            "line": 20,
            "description": "The hint player API",
            "itemtype": "property",
            "name": "hints",
            "type": "springroll.HintsPlayer",
            "class": "springroll.Application",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlugin.js",
            "line": 76,
            "description": "Handle the VO event",
            "itemtype": "method",
            "name": "onVOHint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The VO data",
                    "type": "Object"
                }
            ],
            "class": "springroll.Application",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/HintsPlugin.js",
            "line": 102,
            "description": "Handle the animator event",
            "itemtype": "method",
            "name": "onAnimatorHint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The animator data",
                    "type": "Object"
                }
            ],
            "class": "springroll.Application",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/VOHint.js",
            "line": 36,
            "description": "Run the hint",
            "itemtype": "method",
            "name": "play",
            "class": "springroll.VOHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/hints/VOHint.js",
            "line": 50,
            "description": "Clean-up the hint, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.VOHint",
            "module": "Hints",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 37,
            "description": "The value to replace with the current language in URLS.",
            "itemtype": "property",
            "name": "_replace",
            "type": "String",
            "access": "private",
            "tagname": "",
            "default": "\"%LANG%\"",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 45,
            "description": "The current language.",
            "itemtype": "property",
            "name": "_current",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 52,
            "description": "The default language.",
            "itemtype": "property",
            "name": "_default",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 59,
            "description": "Available languages.",
            "itemtype": "property",
            "name": "languages",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 66,
            "description": "A dictionary of translated strings, set with setStringTable().",
            "itemtype": "property",
            "name": "_stringTable",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 78,
            "description": "Fired when the chosen language has changed.",
            "itemtype": "event",
            "name": "changed",
            "params": [
                {
                    "name": "language",
                    "description": "The newly chosen language.",
                    "type": "String"
                }
            ],
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 84,
            "description": "Configure",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "config",
                    "description": "The language settings to be used.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "default",
                            "description": "The default language name to use if asked for one that is\n                               not present.",
                            "type": "String"
                        },
                        {
                            "name": "languages",
                            "description": "An array of all supported languages, with entries being\n                                locale ids (dialects allowed). Locale ids should be lower\n                                case.",
                            "type": "Array"
                        },
                        {
                            "name": "replace",
                            "description": "A string to replace in urls with the current\n                                           language.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"%LANG%\""
                        }
                    ]
                }
            ],
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 115,
            "description": "Get the singleton instance of the Languages object.",
            "itemtype": "property",
            "name": "instance",
            "type": "springroll.Languages",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 130,
            "description": "The current language.",
            "itemtype": "property",
            "name": "current",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 144,
            "description": "Gets the preferred languages from the browser.",
            "itemtype": "method",
            "name": "getPreferredLanguages",
            "return": {
                "description": "The list of preferred languages in order of preference.",
                "type": "Array"
            },
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 168,
            "description": "Sets the current language, based on specified preferences and what is available.",
            "itemtype": "method",
            "name": "setLanguage",
            "params": [
                {
                    "name": "languageList",
                    "description": "The list of preferred languages in order of preference,\n                                  or a single language.",
                    "type": "Array|String"
                }
            ],
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 211,
            "description": "Sets the string table for later reference.",
            "itemtype": "method",
            "name": "setStringTable",
            "params": [
                {
                    "name": "dictionary",
                    "description": "The string table, with keys that you would use to reference\n                              the translations.",
                    "type": "Dictionary"
                }
            ],
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 222,
            "description": "Gets a string from the current string table.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the string to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translated string.",
                "type": "String"
            },
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 233,
            "description": "Gets a formatted string from the current string table. See String.format() in the Core\nmodule.",
            "itemtype": "method",
            "name": "getFormattedString",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the string to get.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "An array or list of arguments for formatting.",
                    "type": "Array|*"
                }
            ],
            "return": {
                "description": "The translated string.",
                "type": "String"
            },
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 250,
            "description": "Modifies a url, replacing a specified value with the current language.",
            "itemtype": "method",
            "name": "modifyUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The url to modify to a language specific version.",
                    "type": "String"
                }
            ],
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/Languages.js",
            "line": 262,
            "description": "Destroys the Languages object.",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Languages",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/LanguagesPlugin.js",
            "line": 21,
            "description": "The StringFilters instance",
            "itemtype": "property",
            "name": "languages",
            "type": "springroll.Languages",
            "class": "springroll.Application",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/LanguagesPlugin.js",
            "line": 27,
            "description": "Force a specific language",
            "itemtype": "property",
            "name": "options.language",
            "type": "String",
            "default": "null",
            "class": "springroll.Application",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/languages/LanguagesPlugin.js",
            "line": 34,
            "description": "The path to the languages configuration file",
            "itemtype": "property",
            "name": "options.languagesPath",
            "type": "String",
            "default": "null",
            "class": "springroll.Application",
            "module": "Languages",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 16,
            "description": "The collection of all codes map to events",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 26,
            "description": "The map of event codes to method names",
            "itemtype": "property",
            "name": "defaultEvents",
            "type": "Object",
            "static": 1,
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 63,
            "description": "The list of global argument names common to all events. This will\nignore any event spec arguments matching these names because\nthey are automatically submitted with event calls.",
            "itemtype": "property",
            "name": "globals",
            "type": "Array",
            "static": 1,
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 76,
            "description": "Look up an event code by API name",
            "itemtype": "method",
            "name": "loopkup",
            "params": [
                {
                    "name": "api",
                    "description": "The name of the API method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matching event code",
                "type": "String"
            },
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 94,
            "description": "Add additional apis",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "map",
                    "description": "The map of event codes to API names",
                    "type": "Object"
                }
            ],
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 138,
            "description": "The built-in argument overrides, provides consistent arguments\norder for common API calls.",
            "itemtype": "property",
            "name": "args",
            "type": "Object",
            "static": 1,
            "readonly": "",
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventCatalog.js",
            "line": 168,
            "description": "Destroy this catalog, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.EventCatalog",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventError.js",
            "line": 23,
            "description": "The name of the property erroring on",
            "itemtype": "property",
            "name": "eventCode",
            "type": "Int",
            "class": "springroll.EventError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventError.js",
            "line": 29,
            "description": "The name of the API method errored on",
            "itemtype": "property",
            "name": "api",
            "type": "String",
            "class": "springroll.EventError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventError.js",
            "line": 35,
            "description": "The definition of the API and all it's arguments",
            "itemtype": "property",
            "name": "signature",
            "type": "springroll.EventSignature",
            "class": "springroll.EventError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventError.js",
            "line": 48,
            "description": "To string override",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string representation of the error",
                "type": "String"
            },
            "class": "springroll.EventError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 21,
            "description": "The event code",
            "itemtype": "property",
            "name": "eventCode",
            "type": "String",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 27,
            "description": "The name of the method",
            "itemtype": "property",
            "name": "api",
            "type": "String",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 33,
            "description": "The arguments to be called by the API",
            "itemtype": "property",
            "name": "args",
            "type": "Array",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 39,
            "description": "The arguments required by the spec",
            "itemtype": "property",
            "name": "eventArgs",
            "type": "Array",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 45,
            "description": "The API description",
            "itemtype": "property",
            "name": "info",
            "type": "String",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 55,
            "description": "See if the event args or the api args has an property by name",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the argument",
                    "type": "String"
                },
                {
                    "name": "isEventArg",
                    "description": "If we're checking on the event args, default\n       checks on the API arguments.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "If the property is found",
                "type": "Boolean"
            },
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 83,
            "description": "Generate documentation, development build only!",
            "itemtype": "method",
            "name": "docs",
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 104,
            "description": "Create the markup for the arguments",
            "itemtype": "method",
            "name": "_argsDocs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "The list of arguments",
                    "type": "Array"
                },
                {
                    "name": "ignoreNames",
                    "description": "Ignore any name matching these collection of string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The markup",
                "type": "String"
            },
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 172,
            "description": "Get the api signature of a method",
            "itemtype": "method",
            "name": "_format",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "The API arguments",
                    "type": "Array"
                },
                {
                    "name": "indent",
                    "description": "The indentation",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\\t\""
                }
            ],
            "return": {
                "description": "The signature api",
                "type": "String"
            },
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventSignature.js",
            "line": 221,
            "description": "Get the string representation of the signature",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string version of the signature",
                "type": "String"
            },
            "class": "springroll.EventSignature",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventUtils.js",
            "line": 20,
            "description": "Convert an array of input arguments into a data map",
            "itemtype": "method",
            "name": "argsMap",
            "static": 1,
            "params": [
                {
                    "name": "allArgs",
                    "description": "All the event arguments",
                    "type": "Array"
                },
                {
                    "name": "inputs",
                    "description": "The data to validate",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The validated event data object",
                "type": "Object"
            },
            "class": "springroll.EventUtils",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventUtils.js",
            "line": 58,
            "description": "Validate arguments",
            "itemtype": "method",
            "name": "validate",
            "static": 1,
            "params": [
                {
                    "name": "args",
                    "description": "The event arguments",
                    "type": "Array"
                },
                {
                    "name": "inputs",
                    "description": "The data to validate",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The validated event data object",
                "type": "Object"
            },
            "class": "springroll.EventUtils",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/EventUtils.js",
            "line": 92,
            "description": "Do the actual type validation on a specific value",
            "itemtype": "method",
            "name": "_validate",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of value, if an array a set of valid items",
                    "type": "String|Array"
                },
                {
                    "name": "value",
                    "description": "The value to test against",
                    "type": "*"
                },
                {
                    "name": "args",
                    "description": "The list of properties to validate if a typed object",
                    "type": "Array"
                }
            ],
            "class": "springroll.EventUtils",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 32,
            "description": "Create a new instance of the event catalog",
            "itemtype": "property",
            "name": "catalog",
            "type": "springroll.EventCatalog",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 46,
            "description": "The documentation dom element, development build only!",
            "itemtype": "property",
            "name": "_tray",
            "type": "Element",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 55,
            "description": "The toggle handle dom element, development build only!",
            "itemtype": "property",
            "name": "_handle",
            "type": "Element",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 69,
            "description": "The body dom element, development build only!",
            "itemtype": "property",
            "name": "_body",
            "type": "Element",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 82,
            "description": "The collection of timers",
            "itemtype": "property",
            "name": "_timers",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 92,
            "description": "The reference to the application",
            "itemtype": "property",
            "name": "_app",
            "type": "springroll.Application",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 99,
            "description": "The saved feedback or instructions",
            "itemtype": "property",
            "name": "_feedback",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 106,
            "description": "The saved data for movie events",
            "itemtype": "property",
            "name": "_movie",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 113,
            "description": "The collection of api methods called",
            "itemtype": "property",
            "name": "_history",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 120,
            "description": "The current level number if support, null if unsupported",
            "itemtype": "property",
            "name": "_round",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 128,
            "description": "The current round number if support, null if unsupported",
            "itemtype": "property",
            "name": "_round",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 136,
            "description": "Keep track of the round a feedback event was started on\nthe ending event should dispatch the same round.",
            "itemtype": "property",
            "name": "_feedbackStartRound",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 153,
            "description": "If the Learning should throw errors",
            "itemtype": "property",
            "name": "throwErrors",
            "type": "Boolean",
            "static": 1,
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 164,
            "description": "An event is tracked",
            "itemtype": "event",
            "name": "learningEvent",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "game_id",
                            "description": "The unique game id",
                            "type": "String"
                        },
                        {
                            "name": "event_id",
                            "description": "The unique event id",
                            "type": "String"
                        },
                        {
                            "name": "event_data",
                            "description": "The data attached to event",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "event_code",
                                    "description": "The code of the event",
                                    "type": "Int"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 175,
            "description": "An api method was called, this happens before any validation",
            "itemtype": "event",
            "name": "called",
            "params": [
                {
                    "name": "api",
                    "description": "The name of the api method called",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 182,
            "description": "Handle errors",
            "itemtype": "method",
            "name": "_handleError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "The error to handle",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 223,
            "description": "The map of API event name overrides",
            "itemtype": "method",
            "name": "addMap",
            "params": [
                {
                    "name": "eventDictionary",
                    "description": "The collection of game-specific APIs, this is a map\n       of the eventCode to the name of the API method",
                    "type": "Object"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 244,
            "description": "The tracking specification",
            "itemtype": "property",
            "name": "spec",
            "type": "Object",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll",
            "subprops": [
                {
                    "name": "gameId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "events",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        {
            "file": "src/learning/Learning.js",
            "line": 317,
            "description": "When clicking on a method name",
            "itemtype": "method",
            "name": "_toggleRowCollapse",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The click event",
                    "type": "Event"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 328,
            "description": "Toogle the display of the documentation",
            "itemtype": "method",
            "name": "toggleDocs",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 344,
            "description": "Show the documentation panel, development build only!",
            "itemtype": "property",
            "name": "showTray",
            "type": "Boolean",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 379,
            "description": "Convenience function for measuring the duration which is common\nfor many events. These timers respect the application being paused\nand should be use instead of implementing Date.now() or some other\nDate-based method.",
            "itemtype": "method",
            "name": "startTimer",
            "params": [
                {
                    "name": "alias",
                    "description": "A unique alias for this timer",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 397,
            "description": "Check the current progress of a timer, this will not destory the timer",
            "itemtype": "method",
            "name": "pollTimer",
            "params": [
                {
                    "name": "alias",
                    "description": "The unique alias for this timer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The timer in milliseconds",
                "type": "Int"
            },
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 413,
            "description": "Get the amount of time since the start of the game",
            "itemtype": "method",
            "name": "gameTime",
            "return": {
                "description": "The time since the beginning of the game in milliseconds",
                "type": "Int"
            },
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 423,
            "description": "Stop a timer and get the final duration to send with an event. This\nwill clean-up and discard the timer and it can't be used again.",
            "itemtype": "method",
            "name": "stopTimer",
            "params": [
                {
                    "name": "alias",
                    "description": "The unique alias for this timer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The timer in milliseconds",
                "type": "Int"
            },
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 437,
            "description": "This will clean-up and discard the timer and it can't be used again.",
            "itemtype": "method",
            "name": "removeTimer",
            "params": [
                {
                    "name": "alias",
                    "description": "The unique alias for this timer",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 450,
            "description": "Handle the frame update",
            "itemtype": "method",
            "name": "updateTimers",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The number of milliseconds since the last update",
                    "type": "Int"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 464,
            "description": "Override for start game event",
            "itemtype": "method",
            "name": "startGame",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 502,
            "description": "Override for the end game event",
            "itemtype": "method",
            "name": "endGame",
            "params": [
                {
                    "name": "exitType",
                    "description": "The exit type for certain games",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 532,
            "description": "Basic method for starting a feedback or instruction",
            "itemtype": "method",
            "name": "_startFeedback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "The event method to call",
                    "type": "String"
                },
                {
                    "name": "description",
                    "description": "Description of the instruction",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "A unique identifier",
                    "type": "String"
                },
                {
                    "name": "mediaType",
                    "description": "Either audio animation or other",
                    "type": "String"
                },
                {
                    "name": "totalDuration",
                    "description": "The estimated time of instruction in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 561,
            "description": "Basic method for starting a feedback or instruction",
            "itemtype": "method",
            "name": "_startFeedback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "The event method to call",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 582,
            "description": "Start the system initiated instruction",
            "itemtype": "method",
            "name": "startInstruction",
            "params": [
                {
                    "name": "description",
                    "description": "The text description of the instruction",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "A unique identifier for this peice of instruction",
                    "type": "String"
                },
                {
                    "name": "mediaType",
                    "description": "The type of media, audio animation or other",
                    "type": "String"
                },
                {
                    "name": "total_duration",
                    "description": "The estimated duration of the media in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 595,
            "description": "End the system initiated instruction",
            "itemtype": "method",
            "name": "endInstruction",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 605,
            "description": "Start the incorrect feedback",
            "itemtype": "method",
            "name": "startIncorrectFeedback",
            "params": [
                {
                    "name": "description",
                    "description": "The text description of the instruction",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "A unique identifier for this peice of instruction",
                    "type": "String"
                },
                {
                    "name": "mediaType",
                    "description": "The type of media, audio animation or other",
                    "type": "String"
                },
                {
                    "name": "total_duration",
                    "description": "The estimated duration of the media in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 618,
            "description": "End the incorrect feedback",
            "itemtype": "method",
            "name": "endIncorrectFeedback",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 628,
            "description": "Start the correct feedback event",
            "itemtype": "method",
            "name": "startCorrectFeedback",
            "params": [
                {
                    "name": "description",
                    "description": "The text description of the instruction",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "A unique identifier for this peice of instruction",
                    "type": "String"
                },
                {
                    "name": "mediaType",
                    "description": "The type of media, audio animation or other",
                    "type": "String"
                },
                {
                    "name": "total_duration",
                    "description": "The estimated duration of the media in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 647,
            "description": "End the correct feedback event",
            "itemtype": "method",
            "name": "endCorrectFeedback",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 657,
            "description": "The movie started",
            "itemtype": "method",
            "name": "startMovie",
            "params": [
                {
                    "name": "movieId",
                    "description": "The identifier for the movie that's playing",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The duration of the media playback in milliseconds",
                    "type": "Int"
                },
                {
                    "name": "description",
                    "description": "The text or description of the instruction",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 680,
            "description": "The user decided to skip the movie playback by clicking a skip button",
            "itemtype": "method",
            "name": "skipMovie",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 699,
            "description": "The movie ended",
            "itemtype": "method",
            "name": "endMovie",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 719,
            "description": "Handler when an api is called",
            "itemtype": "method",
            "name": "_onCalled",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "The name of the API method called",
                    "type": "String"
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 737,
            "description": "Generic method to track an event based on the spec, the arguments\nmirror the arguments in the event spec.",
            "itemtype": "method",
            "name": "_specTrack",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "The name of the api",
                    "type": "String"
                },
                {
                    "name": "extraArgs",
                    "description": "The Additional arguments",
                    "type": "*",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 773,
            "description": "Generic method to track an event based on the spec, the arguments\nmirror the arguments in the event spec.",
            "itemtype": "method",
            "name": "_track",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "api",
                    "description": "The name of the api",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "The collection of argument values",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "round",
                    "description": "The explicit round to add the track event for",
                    "type": "Int",
                    "optional": true
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 871,
            "description": "Display an error in the tray",
            "itemtype": "method",
            "name": "_showError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "String"
                },
                {
                    "name": "api",
                    "description": "The name of the api",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "Optional property",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 902,
            "description": "Require that an api has been called",
            "itemtype": "method",
            "name": "requires",
            "params": [
                {
                    "name": "api",
                    "description": "The names of the method or API call",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the api was called before",
                "type": "Boolean"
            },
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/Learning.js",
            "line": 918,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Learning",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningError.js",
            "line": 20,
            "description": "The error message",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "class": "springroll.LearningError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningError.js",
            "line": 26,
            "description": "The stack trace",
            "itemtype": "property",
            "name": "stack",
            "type": "String",
            "class": "springroll.LearningError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningError.js",
            "line": 39,
            "description": "To string override",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string representation of the error",
                "type": "String"
            },
            "class": "springroll.LearningError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 18,
            "description": "Reference to the StringFilters",
            "itemtype": "property",
            "name": "filters",
            "type": "springroll.StringFilters",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 24,
            "description": "Reference to the Learning Dispatcher",
            "itemtype": "property",
            "name": "learning",
            "type": "springroll.Learning",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 30,
            "description": "Reference to the VO Player",
            "itemtype": "property",
            "name": "voPlayer",
            "type": "springroll.VOPlayer",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 36,
            "description": "Reference to the main display",
            "itemtype": "property",
            "name": "display",
            "type": "createjs.Display",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 46,
            "description": "Intiailize the media",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "app",
                    "description": "",
                    "type": "springroll.Application"
                }
            ],
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 59,
            "description": "Plays animation or list of animations using springroll.Animator,\nfiring startMovie and endMovie or skipMovie Learning events.",
            "itemtype": "method",
            "name": "playMovie",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to animate.",
                    "type": "MovieClip"
                },
                {
                    "name": "events",
                    "description": "Event or list of events to animate. See\n                                   springroll.Animator.play() docs for details.",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "VO/Animation Ended callback",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancel",
                    "description": "VO/Animation Cancelled (interrupted) callback.\n                                       If set to 'true' (Boolean), will use same callback as 'onComplete'\n                                       If omited, no callback will be fired on interruption.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "AnimatorTimeline of the played animation.",
                "type": "springroll.AnimatorTimeline"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 92,
            "description": "Plays events/aliases using Animator or VOPlayer, and fires startInstruction and endInstruction Learning events\n\nExample Animator usage:\ngame.playInstruction(someMovieClip, {\"anim\":\"frameLabel\", \"audio\":\"soundAlias\"}, doneFunction, interruptedFunction);\n\nExample VOPlayer usage:\ngame.playInstruction(\"soundAlias\", doneFunction, interruptedFunction);",
            "itemtype": "method",
            "name": "playInstruction",
            "params": [
                {
                    "name": "instance",
                    "description": "createjs.MovieClip instance to play with Animator.\n                               Omit this parameter to play alias(es) with VOPlayer instead",
                    "type": "MovieClip",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "If 'instance' is omitted, Alias or Array of aliases for VO lines to play with VOPlayer.\n                                       See VOPlayer.play docs for options.\n                                       If 'instance' is present, Event or list of events to animate with createjs.Animator.\n                                       See springroll.Animator.play() docs for options",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "VO/Animation Ended callback",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancel",
                    "description": "VO/Animation Cancelled (interrupted) callback.\n                                      If set to 'true' (Boolean), will use same callback as 'onComplete'\n                                      If omited, no callback will be fired on interruption.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "AnimatorTimeline of the played animation, or nothing if VO only.",
                "type": "springroll.AnimatorTimeline|undefined"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 162,
            "description": "Plays events/aliases using Animator or VOPlayer, and fires startIncorrectFeedback and endIncorrectFeedback Learning events\n\nExample Animator usage:\ngame.playIncorrectFeedback(someMovieClip, {\"anim\":\"frameLabel\", \"audio\":\"soundAlias\"}, doneFunction, interruptedFunction);\n\nExample VOPlayer usage:\ngame.playIncorrectFeedback(\"soundAlias\", doneFunction, interruptedFunction);",
            "itemtype": "method",
            "name": "playIncorrectFeedback",
            "params": [
                {
                    "name": "instance",
                    "description": "createjs.MovieClip instance to play with Animator.\n                               Omit this parameter to play alias(es) with VOPlayer instead",
                    "type": "MovieClip",
                    "optional": true
                },
                {
                    "name": "events",
                    "description": "If 'instance' is omitted, Alias or Array of aliases for VO lines to play with VOPlayer.\n                                       See VOPlayer.play docs for options.\n                                       If 'instance' is present, Event or list of events to animate with createjs.Animator.\n                                       See springroll.Animator.play() docs for options",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "VO/Animation Ended callback",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancel",
                    "description": "VO/Animation Cancelled (interrupted) callback.\n                                      If set to 'true' (Boolean), will use same callback as 'onComplete'\n                                      If omited, no callback will be fired on interruption.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "AnimatorTimeline of the played animation, or nothing if VO only.",
                "type": "springroll.easeljs.AnimatorTimeline|undefined"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 233,
            "description": "Plays events/aliases using Animator or VOPlayer, and fires startCorrectFeedback and endCorrectFeedback Learning events\n\nExample Animator usage:\ngame.playCorrectFeedback(someMovieClip, {\"anim\":\"frameLabel\", \"audio\":\"soundAlias\"}, doneFunction, interruptedFunction);\n\nExample VOPlayer usage:\ngame.playCorrectFeedback(\"soundAlias\", doneFunction, interruptedFunction);",
            "itemtype": "method",
            "name": "playCorrectFeedback",
            "params": [
                {
                    "name": "instance",
                    "description": "createjs.MovieClip instance to play with Animator.\n                               Omit this parameter to play alias(es) with VOPlayer instead",
                    "type": "MovieClip",
                    "optional": true
                },
                {
                    "name": "event",
                    "description": "If 'instance' is omitted, Alias or Array of aliases for VO lines to play with VOPlayer.\n                                       See VOPlayer.play docs for options.\n                                       If 'instance' is present, Event or list of events to animate with createjs.Animator.\n                                       See springroll.Animator.play() docs for options",
                    "type": "String|Array|Object"
                },
                {
                    "name": "onComplete",
                    "description": "VO/Animation Ended callback",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancel",
                    "description": "VO/Animation Cancelled (interrupted) callback.\n                                      If set to 'true' (Boolean), will use same callback as 'onComplete'.\n                                      If omited, no callback will be fired on interruption.",
                    "type": "Function|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "AnimatorTimeline of the played animation, or nothing if VO only.",
                "type": "springroll.easeljs.AnimatorTimeline|undefined"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 304,
            "description": "Generalized method for playing either feedback or instructions",
            "itemtype": "method",
            "name": "triggerVOPlay",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "Alias or Array of aliases for VO lines to play",
                    "type": "String|Array"
                },
                {
                    "name": "learningStart",
                    "description": "The learning to call while starting",
                    "type": "Function"
                },
                {
                    "name": "learningEnd",
                    "description": "The learning call to call after finishing/canceling VO",
                    "type": "Function"
                },
                {
                    "name": "onComplete",
                    "description": "VO Ended callback",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onCancel",
                    "description": "VO Cancelled (interrupted) callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 358,
            "description": "Handles learning events for triggered Animator calls.",
            "itemtype": "method",
            "name": "triggerMoviePlay",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to animate.",
                    "type": "MovieClip"
                },
                {
                    "name": "events",
                    "description": "Event or list of events to animate. See\n                            springroll.Animator.play() docs for details.",
                    "type": "String|Array"
                },
                {
                    "name": "options",
                    "description": "Additional options. See springroll.Animator.play() docs\n                        for details.",
                    "type": "Object"
                },
                {
                    "name": "learningEvent",
                    "description": "Learning VO/animation event type\n                             (\"movie\", \"instruction\", \"incorrect\", or \"correct\").",
                    "type": "String"
                }
            ],
            "return": {
                "description": "AnimatorTimeline of animation.",
                "type": "springroll.AnimatorTimeline"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 546,
            "description": "Get an alias or group of aliases as a string",
            "itemtype": "method",
            "name": "aliasToString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias to convert",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "The alias as string",
                "type": "String"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 577,
            "description": "Stops the currently playing animation or VO.",
            "itemtype": "method",
            "name": "stop",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 593,
            "description": "Whether or not VOPlayer or Animator are currently playing",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "Whether or not VOPlayer or Animator are currently playing",
                "type": "Boolean"
            },
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMedia.js",
            "line": 603,
            "description": "Destroy and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.LearningMedia",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningMediaPlugin.js",
            "line": 20,
            "description": "For media conveninece methods tracking media events, such as \nplayFeedback, playMovie, etc",
            "itemtype": "property",
            "name": "media",
            "type": "springroll.LearningMedia",
            "class": "springroll.Application",
            "module": "Learning Media",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningPlugin.js",
            "line": 21,
            "description": "An learning event is dispatched",
            "itemtype": "event",
            "name": "learningEvent",
            "params": [
                {
                    "name": "data",
                    "description": "The event data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "game_id",
                            "description": "The unique game id",
                            "type": "String"
                        },
                        {
                            "name": "event_id",
                            "description": "The unique event id",
                            "type": "String"
                        },
                        {
                            "name": "event_data",
                            "description": "The data attached to event",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "event_code",
                                    "description": "The code of the event",
                                    "type": "Int"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "springroll.Application",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/LearningPlugin.js",
            "line": 31,
            "description": "The Learning Dispatcher instance",
            "itemtype": "property",
            "name": "learning",
            "type": "springroll.Learning",
            "class": "springroll.Application",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/ValidationError.js",
            "line": 22,
            "description": "The name of the property erroring on",
            "itemtype": "property",
            "name": "property",
            "type": "String",
            "class": "springroll.ValidationError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/ValidationError.js",
            "line": 28,
            "description": "The supplied value, if any",
            "itemtype": "property",
            "name": "value",
            "type": "*",
            "class": "springroll.ValidationError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/learning/ValidationError.js",
            "line": 41,
            "description": "To string override",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string representation of the error",
                "type": "String"
            },
            "class": "springroll.ValidationError",
            "module": "Learning",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 32,
            "description": "The collection of version numbers",
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_versions",
            "type": "Dictionary",
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 39,
            "description": "The list of URL filtering functions.",
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_filters",
            "type": "Array",
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 46,
            "description": "A global version or cache busting string to apply to every url.",
            "itemtype": "property",
            "name": "_globalVersion",
            "type": "String",
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 59,
            "description": "If we are suppose to cache bust every file",
            "itemtype": "property",
            "name": "cacheBust",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "default": "false",
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 97,
            "description": "Destroy the cache manager, don't use after this.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 110,
            "description": "Adds a versions text file containing versions for different assets.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addVersionsFile",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the versions file.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback when the versions file has been loaded.",
                    "type": "Function"
                },
                {
                    "name": "baseUrl",
                    "description": "A base url to prepend all lines of the file.",
                    "type": "String"
                }
            ],
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 171,
            "description": "Add a version number for a file",
            "itemtype": "method",
            "name": "addVersion",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the object",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "Version number or has of file",
                    "type": "String"
                }
            ],
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 184,
            "description": "Adds a function for running all urls through, to modify them if needed.\nFunctions used should accept one string parameter (the url), and return the\nmodified url.",
            "itemtype": "method",
            "name": "registerURLFilter",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "filter",
                    "description": "The function that will handle urls.",
                    "type": "Function"
                }
            ],
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 198,
            "description": "Removes a function from the list of filtering functions.",
            "itemtype": "method",
            "name": "unregisterURLFilter",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "filter",
                    "description": "The function to remove.",
                    "type": "Function"
                }
            ],
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 211,
            "description": "Applies a url specific version to a url from the versions file.",
            "itemtype": "method",
            "name": "_applySpecificVersion",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url to apply versioning to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The modified url.",
                "type": "String"
            },
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 234,
            "description": "Applies cache busting or a global version to a url.",
            "itemtype": "method",
            "name": "_applyGlobalVersion",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url to apply versioning to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The modified url.",
                "type": "String"
            },
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 258,
            "description": "Applies a base path to a relative url. This is not used in the filtering\nsystem because PreloadJS has its own method of prepending the base path\nthat we use. Instead, it is used with an extra parameter to prepare().",
            "itemtype": "method",
            "name": "_applyBasePath",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url to prepend the base path to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The modified url.",
                "type": "String"
            },
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 277,
            "description": "Prepare a URL with the necessary cache busting and/or versioning\nas well as the base directory.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "url",
                    "description": "The url to prepare",
                    "type": "String"
                },
                {
                    "name": "applyBasePath",
                    "description": "If the global base path should be applied to the url.\n\t\tThis defaults to false because it can potentially interfere with later regular\n\t\texpression checks, particularly with PreloadJS",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The final url with version/cache and basePath added",
                "type": "String"
            },
            "class": "springroll.CacheManager",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 36,
            "description": "If we can load",
            "itemtype": "property",
            "name": "_canLoad",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 46,
            "description": "If the logging should be verbose (unminified library only)",
            "itemtype": "property",
            "name": "verbose",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 54,
            "description": "The maximum number of simulaneous loads",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxSimultaneousLoads",
            "type": "Int",
            "default": "2",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 62,
            "description": "The reference to the cache manager",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "cacheManager",
            "type": "CacheManager",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 70,
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 73,
            "description": "Reference to the private instance object",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 80,
            "description": "The collection of LoaderQueueItems",
            "access": "private",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 86,
            "description": "The collection of LoaderQueueItems by url",
            "access": "private",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 92,
            "description": "The collection of loaders",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "loaders",
            "type": "Object",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 99,
            "description": "The pool of queue items",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "loaders",
            "type": "Array",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 106,
            "description": "The pool of loader items",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "loaders",
            "type": "Array",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 113,
            "description": "The pool of result items",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "loaders",
            "type": "Array",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 120,
            "description": "The current number of items loading",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "numLoads",
            "type": "Int",
            "default": "0",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 128,
            "description": "The retry attempts",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "retries",
            "type": "Object",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 135,
            "description": "Static constructor creating the singleton",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 151,
            "description": "Static function for getting the singleton instance",
            "static": 1,
            "readonly": "",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "instance",
            "type": "Loader",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 165,
            "description": "Destroy the Loader singleton, don't use after this",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 202,
            "description": "Initilize the object",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_initialize",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 219,
            "description": "Load a file",
            "itemtype": "method",
            "name": "load",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The file path to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function when completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The callback for load progress update, passes 0-1 as param",
                    "type": "Function*"
                },
                {
                    "name": "priority",
                    "description": "The priority of the load",
                    "type": "Int*"
                },
                {
                    "name": "data",
                    "description": "optional data",
                    "type": "*"
                }
            ],
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 256,
            "description": "There was an error loading the file",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onLoadFailed",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                }
            ],
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 294,
            "description": "The file load progress event",
            "itemtype": "method",
            "name": "_onLoadProgress",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "event",
                    "description": "The progress event",
                    "type": "Object"
                }
            ],
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 309,
            "description": "The file was loaded successfully",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onLoadCompleted",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "ev",
                    "description": "The load event",
                    "type": "Object"
                }
            ],
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 335,
            "description": "Attempt to do the next load",
            "itemtype": "method",
            "name": "_tryNextLoad",
            "access": "private",
            "tagname": "",
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 367,
            "description": "Alert that the loading is finished",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadDone",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "result",
                    "description": "The event from preloadjs or null",
                    "type": "Object"
                }
            ],
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/Loader.js",
            "line": 385,
            "description": "Cancel a load that's currently in progress",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "url",
                    "description": "The url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If canceled returns true, false if not canceled",
                "type": "Bool"
            },
            "class": "springroll.Loader",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderPlugin.js",
            "line": 17,
            "description": "Reference to the loader singleton",
            "itemtype": "property",
            "name": "loader",
            "type": "springroll.Loader",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderPlugin.js",
            "line": 24,
            "description": "Override the end-user browser cache by adding\n\"?v=\" to the end of each file path requested. Use\nfor developmently, debugging only!",
            "itemtype": "property",
            "name": "options.cacheBust",
            "type": "Boolean",
            "default": "DEBUG",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderPlugin.js",
            "line": 41,
            "description": "The optional file path to prefix to any relative file\nrequests this is a great way to load all load requests\nwith a CDN path.",
            "itemtype": "property",
            "name": "options.basePath",
            "type": "String",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderPlugin.js",
            "line": 49,
            "description": "The current version number for your application. This\nnumber will automatically be appended to all file\nrequests. For instance, if the version is \"0.0.1\" all\nfile requests will be appended with \"?v=0.0.1\"",
            "itemtype": "property",
            "name": "options.version",
            "type": "String",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderPlugin.js",
            "line": 58,
            "description": "Path to a text file which contains explicit version\nnumbers for each asset. This is useful for controlling\nthe live browser cache. For instance, this text file\nwould have an asset on each line followed by a number:\n`assets/config/config.json 2` would load\n`assets/config/config.json?v=2`",
            "itemtype": "property",
            "name": "options.versionsFile",
            "type": "String",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 14,
            "description": "The url of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 21,
            "description": "Data associate with the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 28,
            "description": "The callback function of the load, to call when \nthe load as finished, takes one argument as result",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 36,
            "description": "The priority of this item",
            "itemtype": "property",
            "name": "priority",
            "type": "Int",
            "access": "public",
            "tagname": "",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 43,
            "description": "The amount we've loaded so far, from 0 to 1",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 50,
            "description": "The progress callback",
            "access": "public",
            "tagname": "",
            "proprty": "{function} updateCallback",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 57,
            "description": "The callback when a load queue item fails",
            "access": "private",
            "tagname": "",
            "proprty": "{function} _boundFail",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 64,
            "description": "The callback when a load queue item progresses",
            "access": "private",
            "tagname": "",
            "proprty": "{function} _boundProgress",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 71,
            "description": "The callback when a load queue item completes",
            "access": "private",
            "tagname": "",
            "proprty": "{function} _boundComplete",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 79,
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 82,
            "description": "Highest priority",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_HIGH",
            "type": "Int",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 91,
            "description": "Normal priority, the default",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_NORMAL",
            "type": "Int",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 100,
            "description": "Lowest priority",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_LOW",
            "type": "Int",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 109,
            "description": "Represent this object as a string",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string representation of this object",
                "type": "String"
            },
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 120,
            "description": "Destroy this result",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.LoaderQueueItem",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 17,
            "description": "The contents of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "content",
            "type": "*",
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 24,
            "description": "The url of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 31,
            "description": "Reference to the preloader object",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "loader",
            "type": "createjs.LoaderQueue",
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 38,
            "description": "The full manifest data for the load item.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "manifestData",
            "type": "String",
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 46,
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 49,
            "description": "A to string method",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string rep of the object",
                "type": "String"
            },
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/loaders/LoaderResult.js",
            "line": 60,
            "description": "Destroy this result",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.LoaderResult",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 42,
            "description": "An object used as a dictionary with keys that should be the same as sound aliases",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_data",
            "type": "Object",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 50,
            "description": "A reference to the Text object that Captions should be controlling.\nOnly one text field can be controlled at a time.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_textField",
            "type": "createjs.Text|PIXI.Text|PIXI.BitmapText|DOMElement",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 59,
            "description": "The function to call when playback is complete.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_completeCallback",
            "type": "Function",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 67,
            "description": "The collection of line objects - {start:0, end:0, content:\"\"}",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lines",
            "type": "Array",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 75,
            "description": "The alias of the current caption.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentAlias",
            "type": "String",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 83,
            "description": "The duration in milliseconds of the current caption.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentDuration",
            "type": "Int",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 91,
            "description": "The current playback time, in milliseconds.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentTime",
            "type": "Int",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 99,
            "description": "The current line index.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentLine",
            "type": "Int",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 107,
            "description": "The last active line index.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lastActiveLine",
            "type": "Int",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 115,
            "description": "If we're playing.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_playing",
            "type": "Boolean",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 123,
            "description": "If this instance has been destroyed already.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Boolean",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 131,
            "description": "If the captions object should do its own update.",
            "itemtype": "property",
            "name": "_selfUpdate",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "true",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 139,
            "description": "If the captions are muted",
            "itemtype": "property",
            "name": "_mute",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 156,
            "description": "Reference to the prototype",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "p",
            "type": "Object",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 165,
            "description": "Set if all captions are currently muted.",
            "itemtype": "property",
            "name": "mute",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 183,
            "description": "If the captions object should do it's own updating unless you want to manuall\nseek. In general, self-updating should not be set to false unless the sync\nof the captions needs to be exact with something else.",
            "itemtype": "property",
            "name": "selfUpdate",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 207,
            "description": "Sets the dictionary object to use for captions. This overrides the current dictionary, if present.",
            "itemtype": "property",
            "name": "data",
            "type": "Object",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 264,
            "description": "The text field that the captions uses to update.",
            "itemtype": "property",
            "name": "textField",
            "type": "String|createjs.Text|PIXI.Text|PIXI.BitmapText|DOMElement",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 281,
            "description": "Automatically determine how to set the text field text",
            "itemtype": "method",
            "name": "setText",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "field",
                    "description": "The text field to change",
                    "type": "createjs.Text|PIXI.Text|PIXI.BitmapText|DOMElement"
                },
                {
                    "name": "text",
                    "description": "The text to set it to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text field",
                "type": "createjs.Text|PIXI.Text|PIXI.BitmapText|DOMElement"
            },
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 317,
            "description": "Returns if there is a caption under that alias or not.",
            "itemtype": "method",
            "name": "hasCaption",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias to check against",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the caption was found or not",
                "type": "Boolean"
            },
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 329,
            "description": "A utility function for getting the full text of a caption by alias\nthis can be useful for debugging or tracking purposes.",
            "itemtype": "method",
            "name": "getFullCaption",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias or Array of aliases for which to get the text.\n                            Any non-String values in this Array are silently and\n                            harmlessly ignored.",
                    "type": "String|Array"
                },
                {
                    "name": "separator",
                    "description": "The separation between each line.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\" \""
                }
            ],
            "return": {
                "description": "The entire caption, concatinated by the separator.",
                "type": "String"
            },
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 392,
            "description": "Sets an array of line data as the current caption data to play.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_load",
            "params": [
                {
                    "name": "data",
                    "description": "The string",
                    "type": "String"
                }
            ],
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 415,
            "description": "Reset the captions",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_reset",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 427,
            "description": "Take the captions timecode and convert to milliseconds\nformat is in HH:MM:ss:mmm",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_timeCodeToMilliseconds",
            "params": [
                {
                    "name": "input",
                    "description": "The input string of the format",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Time in milliseconds",
                "type": "Int"
            },
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 448,
            "description": "The playing status.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 462,
            "description": "Calculate the total duration of the current caption",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getTotalDuration",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 473,
            "description": "Get the current duration of the current caption",
            "itemtype": "property",
            "name": "currentDuration",
            "type": "Int",
            "readonly": "",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 486,
            "description": "Get the current caption alias.",
            "itemtype": "property",
            "name": "currentAlias",
            "type": "String",
            "readonly": "",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 499,
            "description": "Start the caption playback.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "alias",
                    "description": "The desired caption's alias",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the caption is finished playing",
                    "type": "Function"
                }
            ],
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 519,
            "description": "Convience function for stopping captions.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 535,
            "description": "Goto a specific time.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "time",
                    "description": "The time in milliseconds to seek to in the captions",
                    "type": "Int"
                }
            ],
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 588,
            "description": "Callback for when a frame is entered.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updatePercent",
            "params": [
                {
                    "name": "progress",
                    "description": "The progress in the current sound as a percentage (0-1)",
                    "type": "Number"
                }
            ],
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 602,
            "description": "Function to update the amount of time elapsed for the caption playback.\nCall this to advance the caption by a given amount of time.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "progress",
                    "description": "The time elapsed since the last frame in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 617,
            "description": "Calculates the captions after increasing the current time.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_calcUpdate",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 653,
            "description": "Updates the text in the managed text field.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateCaptions",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 667,
            "description": "Returns duration in milliseconds of given captioned sound alias or alias list.",
            "itemtype": "method",
            "name": "getLength",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias or array of aliases for which to get duration.\n                            Array may contain integers (milliseconds) to account for\n                            un-captioned gaps.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "Length/duration of caption in milliseconds.",
                "type": "Int"
            },
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Captions.js",
            "line": 704,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Captions",
            "module": "Captions",
            "namespace": "springroll"
        },
        {
            "file": "src/media/CaptionsPlugin.js",
            "line": 21,
            "description": "The captions text field object to use for the \nVOPlayer captions object.",
            "itemtype": "property",
            "name": "options.captions",
            "type": "DOMElement|String|createjs.Text|PIXI.Text|PIXI.BitmapText",
            "default": "'captions'",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/CaptionsPlugin.js",
            "line": 30,
            "description": "The path to the captions file to preload.",
            "itemtype": "property",
            "name": "options.captionsPath",
            "type": "String",
            "default": "null",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/CaptionsPlugin.js",
            "line": 38,
            "description": "The global captions object",
            "itemtype": "property",
            "name": "captions",
            "type": "springroll.Captions",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 41,
            "description": "Dictionary of sound objects, containing configuration info and playback objects.",
            "itemtype": "property",
            "name": "_sounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 48,
            "description": "Array of SoundInstance objects that are being faded in or out.",
            "itemtype": "property",
            "name": "_fades",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 55,
            "description": "Array of SoundInstance objects waiting to be used.",
            "itemtype": "property",
            "name": "_pool",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 62,
            "description": "The extension of the supported sound type that will be used.",
            "itemtype": "property",
            "name": "supportedSound",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 69,
            "description": "Dictionary of SoundContexts.",
            "itemtype": "property",
            "name": "_contexts",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 81,
            "description": "If sound is enabled. This will only be false if Sound was unable to initialize\na SoundJS plugin.",
            "itemtype": "property",
            "name": "soundEnabled",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 97,
            "description": "Initializes the Sound singleton. If using createjs.FlashAudioPlugin, you will be responsible for\nsetting createjs.FlashAudioPlugin.BASE_PATH.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Either the options object or the ready function",
                    "type": "Object|Function",
                    "props": [
                        {
                            "name": "plugins",
                            "description": "The SoundJS\n                                       plugins to pass to createjs.Sound.registerPlugins().",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "createjs.WebAudioPlugin,createjs.FlashAudioPlugin"
                        },
                        {
                            "name": "types",
                            "description": "The order in which file types are preferred,\n                                             where \"ogg\" becomes a \".ogg\" extension on all\n                                             sound file urls.",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "['ogg','mp3']"
                        },
                        {
                            "name": "swfPath",
                            "description": "The required path to the\n                                                 createjs.FlashAudioPlugin SWF",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'assets/swfs/'"
                        },
                        {
                            "name": "ready",
                            "description": "A function to call when initialization is complete.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The new instance of the sound object",
                "type": "Sound"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 197,
            "description": "Statisfies the iOS event needed to initialize the audio",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_playEmpty",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 208,
            "description": "When the initialization as completed",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "filetypeOrder",
                    "description": "The list of files types",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback function",
                    "type": "Function"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 241,
            "description": "The singleton instance of Sound.",
            "itemtype": "property",
            "name": "instance",
            "type": "Sound",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 252,
            "description": "Loads a context config object. This should not be called until after Sound.init() is complete.",
            "itemtype": "method",
            "name": "addContext",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "The config to load.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "context",
                            "description": "The optional sound context to load sounds into unless\n                                 otherwise specified by the individual sound. Sounds do not\n                                 require a context.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "path",
                            "description": "The path to prepend to all sound source urls in this config.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "sounds",
                            "description": "The list of sounds, either as String ids or Objects with\n                                    settings.",
                            "type": "Array",
                            "props": [
                                {
                                    "name": "listItem",
                                    "description": "Not actually a property called listItem,\n                                                     but an entry in the array. If this is a\n                                                     string, then it is the same as\n                                                     {'id':'<yourString>'}.",
                                    "type": "Object|String"
                                },
                                {
                                    "name": "listItem.id",
                                    "description": "The id to reference the sound by.",
                                    "type": "String"
                                },
                                {
                                    "name": "listItem.src",
                                    "description": "The src path to the file, without an\n                                                    extension. If omitted, defaults to id.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "listItem.volume",
                                    "description": "The default volume for the sound,\n                                                         from 0 to 1.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "listItem.loop",
                                    "description": "If the sound should loop by\n                                                            default whenever the loop\n                                                            parameter in play() is not\n                                                            specified.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "listItem.context",
                                    "description": "A context name to override\n                                                        config.context with.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "listItem.preload",
                                    "description": "If the sound should be preloaded\n                                                         immediately.",
                                    "type": "Boolean",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The sound object for chaining",
                "type": "Sound"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 331,
            "description": "Old method for loading a context config object.",
            "itemtype": "method",
            "name": "loadConfig",
            "params": [
                {
                    "name": "config",
                    "description": "The config to load.",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `addContext(config)` instead.",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 339,
            "description": "If a sound exists in the list of recognized sounds.",
            "itemtype": "method",
            "name": "exists",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound exists, false otherwise.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 351,
            "description": "If a context exists",
            "itemtype": "method",
            "name": "contextExists",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of context to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the context exists, false otherwise.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 363,
            "description": "If a sound is unloaded.",
            "itemtype": "method",
            "name": "isUnloaded",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is unloaded, false if it is loaded, loading or does not exist.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 375,
            "description": "If a sound is loaded.",
            "itemtype": "method",
            "name": "isLoaded",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is loaded, false if it is not loaded or does not exist.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 387,
            "description": "If a sound is in the process of being loaded",
            "itemtype": "method",
            "name": "isLoading",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A value of true if the sound is currently loading, false if it is loaded,\n                  unloaded, or does not exist.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 400,
            "description": "If a sound is playing.",
            "itemtype": "method",
            "name": "isPlaying",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A value of true if the sound is currently playing or loading with an intent\n                  to play, false if it is not playing or does not exist.",
                "type": "Boolean"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 414,
            "description": "Gets the duration of a sound in milliseconds, if it has been loaded.",
            "itemtype": "method",
            "name": "getDuration",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The duration of the sound in milliseconds. If the sound has not been\n                   loaded, 0 is returned. If no sound exists by that alias, null is returned.",
                "type": "Int|null"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 443,
            "description": "Fades a sound from 0 to a specified volume.",
            "itemtype": "method",
            "name": "fadeIn",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "aliasOrInst",
                    "description": "The alias of the sound to fade the last played\n                                          instance of, or an instance returned from play().",
                    "type": "String|SoundInstance"
                },
                {
                    "name": "duration",
                    "description": "The duration in milliseconds to fade for. The default is\n                               500ms.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "500"
                },
                {
                    "name": "targetVol",
                    "description": "The volume to fade to. The default is the sound's default volume.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "startVol",
                    "description": "The volume to start from. The default is 0.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 485,
            "description": "Fades a sound from the current volume to a specified volume. A sound that ends at 0 volume\nis stopped after the fade.",
            "itemtype": "method",
            "name": "fadeOut",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "aliasOrInst",
                    "description": "The alias of the sound to fade the last played\n                                          instance of, or an instance returned from play().",
                    "type": "String|SoundInstance"
                },
                {
                    "name": "duration",
                    "description": "The duration in milliseconds to fade for. The default is\n                               500ms.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "500"
                },
                {
                    "name": "targetVol",
                    "description": "The volume to fade to. The default is 0.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "startVol",
                    "description": "The volume to fade from. The default is the current volume.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 533,
            "description": "The update call, used for fading sounds. This is bound to the instance of Sound",
            "itemtype": "method",
            "name": "_update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 588,
            "description": "Plays a sound.",
            "itemtype": "method",
            "name": "play",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to play.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or complete callback\n                                   function.",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "complete",
                            "description": "An optional function to call when the sound is finished.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "start",
                            "description": "An optional function to call when the sound starts\n                                  playback. If the sound is loaded, this is called\n                                  immediately, if not, it calls when the sound is finished\n                                  loading.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "interrupt",
                            "description": "If the sound should interrupt previous sounds\n                                           (SoundJS parameter). Default is false.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "delay",
                            "description": "The delay to play the sound at in milliseconds (SoundJS\n                                  parameter). Default is 0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "offset",
                            "description": "The offset into the sound to play in milliseconds\n                                   (SoundJS parameter). Default is 0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "loop",
                            "description": "How many times the sound should loop. Use -1 (or true) for\n                              infinite loops (SoundJS parameter). Default is no looping.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "volume",
                            "description": "The volume to play the sound at (0 to 1). Omit to use the\n                                 default for the sound.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pan",
                            "description": "The panning to start the sound at (-1 to 1). Default is\n                                centered (0).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An internal SoundInstance object that can be used for fading in/out\n                           as well as pausing and getting the sound's current position.",
                "type": "SoundInstance"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 731,
            "description": "Gets a SoundInstance, from the pool if available or maks a new one if not.",
            "itemtype": "method",
            "name": "_getSoundInst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "channel",
                    "description": "A createjs SoundInstance to initialize the object\n                                        with.",
                    "type": "createjs.SoundInstance"
                },
                {
                    "name": "id",
                    "description": "The alias of the sound that is going to be used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The SoundInstance that is ready to use.",
                "type": "SoundInstance"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 757,
            "description": "Plays a sound after it finishes loading.",
            "itemtype": "method",
            "name": "_playAfterload",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "result",
                    "description": "The sound to play as an alias or load manifest.",
                    "type": "String|Object"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 815,
            "description": "The callback used for when a sound instance is complete.",
            "itemtype": "method",
            "name": "_onSoundComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The SoundInstance that is complete.s",
                    "type": "SoundInstance"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 837,
            "description": "Stops all playing or loading instances of a given sound.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to stop.",
                    "type": "String"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 863,
            "description": "Stops all playing SoundInstances for a sound.",
            "itemtype": "method",
            "name": "_stopSound",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "s",
                    "description": "The sound (from the _sounds dictionary) to stop.",
                    "type": "Object"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 879,
            "description": "Stops and repools a specific SoundInstance.",
            "itemtype": "method",
            "name": "_stopInst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The SoundInstance to stop.",
                    "type": "SoundInstance"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 895,
            "description": "Stops all sounds in a given context.",
            "itemtype": "method",
            "name": "stopContext",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to stop.",
                    "type": "String"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 919,
            "description": "Stop all sounds that are playing, regardless of context.",
            "itemtype": "method",
            "name": "stopAll",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 931,
            "description": "Pauses a specific sound.",
            "itemtype": "method",
            "name": "pauseSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to pause.\n\tInternally, this can also be the object from the _sounds dictionary directly.",
                    "type": "String"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 951,
            "description": "Unpauses a specific sound.",
            "itemtype": "method",
            "name": "unpauseSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to pause.\n\tInternally, this can also be the object from the _sounds dictionary directly.",
                    "type": "String"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 971,
            "description": "Pauses all sounds.",
            "itemtype": "method",
            "name": "pauseAll",
            "access": "public",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 983,
            "description": "Unpauses all sounds.",
            "itemtype": "method",
            "name": "unpauseAll",
            "access": "public",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 995,
            "description": "Sets mute status of all sounds in a context",
            "itemtype": "method",
            "name": "setContextMute",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to modify.",
                    "type": "String"
                },
                {
                    "name": "muted",
                    "description": "If the context should be muted.",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1027,
            "description": "Set the mute status of all sounds",
            "itemtype": "property",
            "name": "muteAll",
            "type": "Boolean",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1038,
            "description": "Sets volume of a context. Individual sound volumes are multiplied by this value.",
            "itemtype": "method",
            "name": "setContextVolume",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to modify.",
                    "type": "String"
                },
                {
                    "name": "volume",
                    "description": "The volume for the context (0 to 1).",
                    "type": "Number"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1069,
            "description": "Preloads a specific sound.",
            "itemtype": "method",
            "name": "preloadSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to load.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the sound is finished loading.",
                    "type": "Function"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1096,
            "description": "Preloads a list of sounds.",
            "itemtype": "method",
            "name": "preload",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "An array of sound aliases to load.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when all sounds have been loaded.",
                    "type": "Function"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1150,
            "description": "Marks a sound as loaded. If it needs to play after the load, then it is played.",
            "itemtype": "method",
            "name": "_markLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to mark.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to call to show that the sound is loaded.",
                    "type": "Function"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1176,
            "description": "Creates a Task for the springroll Task library for preloading a list of sounds.\nThis function will not work if the Task library was not loaded before the Sound library.",
            "itemtype": "method",
            "name": "createPreloadTask",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task.",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "An array of sound aliases to load.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the task is complete.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A task to load up all of the sounds in the list.",
                "type": "springroll.Task"
            },
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1192,
            "description": "Unloads a list of sounds to reclaim memory if possible.\nIf the sounds are playing, they are stopped.",
            "itemtype": "method",
            "name": "unload",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "An array of sound aliases to unload.",
                    "type": "Array"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1216,
            "description": "Unloads all sounds. If any sounds are playing, they are stopped.\nInternally this calls `unload`.",
            "itemtype": "method",
            "name": "unloadAll",
            "access": "public",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1232,
            "description": "Places a SoundInstance back in the pool for reuse.",
            "itemtype": "method",
            "name": "_poolinst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The instance to repool.",
                    "type": "SoundInstance"
                }
            ],
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/Sound.js",
            "line": 1253,
            "description": "Destroys springroll.Sound. This unloads loaded sounds in SoundJS.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "springroll.Sound",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 16,
            "description": "The name of the sound context.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundContext",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 23,
            "description": "The current volume to apply to all sounds in the context (0 to 1).",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundContext",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 30,
            "description": "If all sounds in the sound context are muted or not.",
            "itemtype": "property",
            "name": "muted",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundContext",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 37,
            "description": "The sound objects in this context, from Sound.instance._sounds;",
            "itemtype": "property",
            "name": "sounds",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundContext",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 22,
            "description": "SoundJS SoundInstance, essentially a sound channel.",
            "itemtype": "property",
            "name": "_channel",
            "type": "createjs.SoundInstance",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 29,
            "description": "Internal callback function for when the sound ends.",
            "itemtype": "property",
            "name": "_endFunc",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 36,
            "description": "User's callback function for when the sound ends.",
            "itemtype": "property",
            "name": "_endCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 43,
            "description": "User's callback function for when the sound starts. This is only used if the sound\nwasn't loaded before play() was called.",
            "itemtype": "property",
            "name": "_startFunc",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 51,
            "description": "An array of relevant parameters passed to play(). This is only used if the sound\nwasn't loaded before play() was called.",
            "itemtype": "property",
            "name": "_startParams",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 59,
            "description": "The alias for the sound that this instance was created from.",
            "itemtype": "property",
            "name": "alias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 67,
            "description": "The current time in milliseconds for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fTime",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 74,
            "description": "The duration in milliseconds for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fDur",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 81,
            "description": "The starting volume for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fEnd",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 88,
            "description": "The ending volume for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fEnd",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 95,
            "description": "The current sound volume (0 to 1). This is multiplied by the sound context's volume.\nSetting this won't take effect until updateVolume() is called.",
            "itemtype": "property",
            "name": "curVol",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 104,
            "description": "The sound pan value, from -1 (left) to 1 (right).",
            "itemtype": "property",
            "name": "_pan",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 112,
            "description": "The length of the sound in milliseconds. This is 0 if it hasn't finished loading.",
            "itemtype": "property",
            "name": "length",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 119,
            "description": "If the sound is currently paused. Setting this has no effect - use pause()\nand unpause().",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 128,
            "description": "An active SoundInstance should always be valid, but if you keep a reference after a\nsound stops it will no longer be valid (until the SoundInstance is reused for a\nnew sound).",
            "itemtype": "property",
            "name": "isValid",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 142,
            "description": "The position of the sound playhead in milliseconds, or 0 if it hasn't started playing yet.",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 153,
            "description": "Stops this SoundInstance.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 179,
            "description": "Updates the volume of this SoundInstance.",
            "itemtype": "method",
            "name": "updateVolume",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "contextVol",
                    "description": "The volume of the sound context that the sound belongs to. If\n                           omitted, the volume is automatically collected.",
                    "type": "Number"
                }
            ],
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 204,
            "description": "The current sound volume (0 to 1). This is multiplied by the sound context's volume to\nget the actual sound volume.",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 219,
            "description": "The sound pan value, from -1 (left) to 1 (right).",
            "itemtype": "property",
            "name": "pan",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 234,
            "description": "Pauses this SoundInstance.",
            "itemtype": "method",
            "name": "pause",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 247,
            "description": "Unpauses this SoundInstance.",
            "itemtype": "method",
            "name": "unpause",
            "access": "public",
            "tagname": "",
            "class": "springroll.SoundInstance",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundListTask.js",
            "line": 28,
            "description": "The collection of sounds to load",
            "itemtype": "property",
            "name": "list",
            "type": "Array",
            "class": "springroll.SoundListTask",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundListTask.js",
            "line": 41,
            "description": "Begin the task",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when we're done",
                    "type": "Function"
                }
            ],
            "class": "springroll.SoundListTask",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundListTask.js",
            "line": 51,
            "description": "Destroy the task",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.SoundListTask",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 21,
            "description": "The relative location to the FlashPlugin swf for SoundJS",
            "itemtype": "property",
            "name": "options.swfPath",
            "type": "String",
            "default": "'assets/swfs/'",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 29,
            "description": "For the Sound class to use the Flash plugin shim",
            "itemtype": "property",
            "name": "options.forceFlashAudio",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 37,
            "description": "The order in which file types are\npreferred, where \"ogg\" becomes a \".ogg\"\nextension on all sound file urls.",
            "itemtype": "property",
            "name": "options.audioTypes",
            "type": "Array",
            "default": "['ogg','mp3']",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 49,
            "description": "Set the initial mute state of the all the audio \n(unminifed library version only)",
            "itemtype": "property",
            "name": "options.mute",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 59,
            "description": "The current music alias playing",
            "itemtype": "property",
            "name": "_music",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 66,
            "description": "The current music SoundInstance playing",
            "itemtype": "property",
            "name": "_musicInstance",
            "type": "SoundInstance",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 73,
            "description": "The global player for playing voice over",
            "itemtype": "property",
            "name": "voPlayer",
            "type": "springroll.VOPlayer",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 79,
            "description": "The global player for all audio, also accessible through singleton",
            "itemtype": "property",
            "name": "sound",
            "type": "springroll.Sound",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 85,
            "description": "Get or set the current music alias to play",
            "itemtype": "property",
            "name": "music",
            "type": "String",
            "default": "null",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 124,
            "description": "The SoundInstance for the current music, for adjusting volume.",
            "itemtype": "property",
            "name": "musicInstance",
            "type": "SoundInstance",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/SoundPlugin.js",
            "line": 160,
            "description": "The sound is ready to use",
            "itemtype": "event",
            "name": "soundReady",
            "class": "springroll.Application",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 35,
            "description": "An Array used when play() is called to avoid creating lots of Array objects.",
            "itemtype": "property",
            "name": "_listHelper",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 42,
            "description": "If the VOPlayer should keep a list of all audio it plays for unloading later. Default is false.",
            "itemtype": "property",
            "name": "trackSound",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 49,
            "description": "The current list of audio/silence times/functions. Generally you will not need to modify this.",
            "itemtype": "property",
            "name": "soundList",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 56,
            "description": "The current position in soundList.",
            "itemtype": "property",
            "name": "_listCounter",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 63,
            "description": "The current audio alias being played.",
            "itemtype": "property",
            "name": "_currentSound",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 70,
            "description": "The current audio instance being played.",
            "itemtype": "property",
            "name": "_soundInstance",
            "type": "SoundInstance",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 77,
            "description": "The callback for when the list is finished.",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 84,
            "description": "The callback for when the list is interrupted for any reason.",
            "itemtype": "property",
            "name": "_cancelledCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 91,
            "description": "A list of audio file played by this, so that they can be unloaded later.",
            "itemtype": "property",
            "name": "_playedSound",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 98,
            "description": "A timer for silence entries in the list, in milliseconds.",
            "itemtype": "property",
            "name": "_timer",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 105,
            "description": "The captions object",
            "itemtype": "property",
            "name": "_captions",
            "type": "springroll.Captions",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 115,
            "description": "If VOPlayer is currently playing (audio or silence).",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 126,
            "description": "The springroll.Captions object used for captions. The developer is responsible for\ninitializing this with a captions\ndictionary config file and a reference to a text field.",
            "itemtype": "property",
            "name": "captions",
            "type": "Captions",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 149,
            "description": "Calculates the amount of time elapsed in the current playlist of audio/silence.",
            "itemtype": "method",
            "name": "getElapsed",
            "return": {
                "description": "The elapsed time in milliseconds.",
                "type": "Int"
            },
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 178,
            "description": "Plays a single audio alias, interrupting any current playback.\nAlternatively, plays a list of audio files, timers, and/or functions.\nAudio in the list will be preloaded to minimize pauses for loading.",
            "itemtype": "method",
            "name": "play",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "idOrList",
                    "description": "The alias of the audio file to play or the array of items to play/call in order.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when playback is complete.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "cancelledCallback",
                    "description": "The function to call when playback is interrupted with a stop() or play() call.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 205,
            "description": "Callback for when audio/timer is finished to advance to the next item in the list.",
            "itemtype": "method",
            "name": "_onSoundFinished",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 261,
            "description": "The update callback used for silence timers.\nThis method is bound to the VOPlayer instance.",
            "itemtype": "method",
            "name": "_updateSilence",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 278,
            "description": "The update callback used for updating captions without active audio.\nThis method is bound to the VOPlayer instance.",
            "itemtype": "method",
            "name": "_updateSoloCaption",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 296,
            "description": "The update callback used for updating captions with active audio.\nThis method is bound to the VOPlayer instance.",
            "itemtype": "method",
            "name": "_syncCaptionToSound",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 310,
            "description": "Plays the current audio item and begins preloading the next item.",
            "itemtype": "method",
            "name": "_playSound",
            "access": "private",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 362,
            "description": "Stops playback of any audio/timer.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 391,
            "description": "Unloads all audio this VOPlayer has played. If trackSound is false, this won't do anything.",
            "itemtype": "method",
            "name": "unloadSound",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 402,
            "description": "Cleans up this VOPlayer.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "springroll.VOPlayer",
            "module": "Sound",
            "namespace": "springroll"
        },
        {
            "file": "src/mixins/Array.js",
            "line": 13,
            "description": "Shuffles the array",
            "itemtype": "method",
            "name": "shuffle",
            "class": "window.Array",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Array.js",
            "line": 32,
            "description": "Get a random item from an array",
            "itemtype": "method",
            "name": "random",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "The array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The random item",
                "type": "*"
            },
            "class": "window.Array",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Array.js",
            "line": 51,
            "description": "Get the last item in the array",
            "itemtype": "method",
            "name": "last",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "The array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The last item",
                "type": "*"
            },
            "class": "window.Array",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 12,
            "description": "Return a random int between minimum and maximum values.\nIf a single value is supplied, it will return a number between 0 and the supplied value.",
            "itemtype": "method",
            "name": "randomInt",
            "static": 1,
            "params": [
                {
                    "name": "min",
                    "description": "Lowest number. If max is omitted, then this becomes max.",
                    "type": "Int"
                },
                {
                    "name": "max",
                    "description": "Highest number.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The random value",
                "type": "Int"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 31,
            "description": "Return distance between two points",
            "itemtype": "method",
            "name": "dist",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x position of the first point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position of the first point",
                    "type": "Number"
                },
                {
                    "name": "x0",
                    "description": "The x position of the second point",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The y position of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 42,
            "description": "Return distance between two points",
            "itemtype": "method",
            "name": "dist",
            "static": 1,
            "params": [
                {
                    "name": "p1",
                    "description": "The first point",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the first point",
                            "type": "Object"
                        },
                        {
                            "name": "y",
                            "description": "The y position of the first point",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "p2",
                    "description": "The second point",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the second point",
                            "type": "Object"
                        },
                        {
                            "name": "y",
                            "description": "The y position of the second point",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 59,
            "description": "Return squared distance between two points",
            "itemtype": "method",
            "name": "distSq",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x position of the first point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position of the first point",
                    "type": "Number"
                },
                {
                    "name": "x0",
                    "description": "The x position of the second point",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The y position of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 70,
            "description": "Return squared distance between two points",
            "itemtype": "method",
            "name": "distSq",
            "static": 1,
            "params": [
                {
                    "name": "p1",
                    "description": "The first point",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the first point",
                            "type": "Object"
                        },
                        {
                            "name": "y",
                            "description": "The y position of the first point",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "p2",
                    "description": "The second point",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the second point",
                            "type": "Object"
                        },
                        {
                            "name": "y",
                            "description": "The y position of the second point",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 103,
            "description": "Constrain a number between 0 and a max value.",
            "itemtype": "method",
            "name": "clamp",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The number to be constrained.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Highest number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The constrained value",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Math.js",
            "line": 112,
            "description": "Constrain a number between a minimum and maximum values.",
            "itemtype": "method",
            "name": "clamp",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "The number to be constrained.",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "Lowest number to constrain value to.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Highest number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The constrained value",
                "type": "Number"
            },
            "class": "window.Math",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Number.js",
            "line": 12,
            "description": "Returns a string of the number as an integer with leading zeros to fill the string out\nto a certain number of digits.",
            "itemtype": "method",
            "name": "toPaddedString",
            "params": [
                {
                    "name": "totalDigits",
                    "description": "The total number of digits to be displayed.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "The number string.",
                "type": "String"
            },
            "class": "window.Number",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Object.js",
            "line": 12,
            "description": "Merges two (or more) objects, giving the last one precedence",
            "itemtype": "method",
            "name": "merge",
            "example": [
                "\n\t\tvar obj1 = { id : 'foo', name : 'Hello!', value : 100 };\n\t\tvar obj2 = { id : 'bar', value : 200 };\n\t\tObject.merge({}, obj1, obj2); // Returns: { id : 'bar', name : 'Hello!', value : 200 }"
            ],
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "Additional objects to add",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "class": "window.Object",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Object.js",
            "line": 52,
            "description": "Check to see if an object is a plain object definition",
            "itemtype": "method",
            "name": "isPlain",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If the object is plain",
                "type": "Boolean"
            },
            "class": "window.Object",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/Object.js",
            "line": 103,
            "description": "Creates a shallow copy of the object.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The shallow copy.",
                "type": "Object"
            },
            "class": "window.Object",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/String.js",
            "line": 13,
            "description": "Returns a formatted string, similar to the printf() function in many languages.\nThis simplified version substitutes \"%s\" with the arguments in order. To escape \"%s\",\nuse \"%%s\".",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "args",
                    "description": "An array or list of arguments for formatting.",
                    "type": "Array|*"
                }
            ],
            "return": {
                "description": "The substituted string.",
                "type": "String"
            },
            "class": "window.String",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/mixins/String.js",
            "line": 45,
            "description": "Returns a reversed copy of the string.",
            "itemtype": "method",
            "name": "format",
            "return": {
                "description": "The reversed string.",
                "type": "String"
            },
            "class": "window.String",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/states/State.js",
            "line": 47,
            "description": "The id reference",
            "itemtype": "property",
            "name": "stateId",
            "type": "String",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 53,
            "description": "A reference to the state manager",
            "itemtype": "property",
            "name": "manager",
            "type": "StateManager",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 59,
            "description": "The panel for the state.",
            "itemtype": "property",
            "name": "panel",
            "type": "createjs.Container|PIXI.DisplayObjectContainer",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 65,
            "description": "If the state has been destroyed.",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 72,
            "description": "If the manager considers this the active panel",
            "itemtype": "property",
            "name": "_active",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 79,
            "description": "If we are pre-loading the state",
            "itemtype": "property",
            "name": "_isLoading",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 86,
            "description": "If we canceled entering the state",
            "itemtype": "property",
            "name": "_canceled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 93,
            "description": "When we're finishing loading",
            "itemtype": "property",
            "name": "_onEnterProceed",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 100,
            "description": "If we start doing a load in enter, assign the onEnterComplete here",
            "itemtype": "property",
            "name": "_onLoadingComplete",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 107,
            "description": "If the state is enabled, meaning that it is click ready",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 114,
            "description": "Either the alias of the next state or a function\nto call when going to the next state.",
            "itemtype": "property",
            "name": "_nextState",
            "type": "String|Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 122,
            "description": "Either the alias of the previous state or a function\nto call when going to the previous state.",
            "itemtype": "property",
            "name": "_prevState",
            "type": "String|Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 130,
            "description": "The number of frames to delay the transition in after loading, to allow the framerate\nto stablize after heavy art instantiation.",
            "itemtype": "property",
            "name": "delayLoad",
            "type": "Int",
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 144,
            "description": "When the state is exited. Override this to provide state cleanup.",
            "itemtype": "method",
            "name": "exit",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 153,
            "description": "When the state has requested to be exit, pre-transition. Override this to ensure\nthat animation/audio is stopped when leaving the state.",
            "itemtype": "method",
            "name": "exitStart",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 163,
            "description": "Cancel the load, implementation-specific.\nThis is where any async actions should be removed.",
            "itemtype": "method",
            "name": "cancel",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 173,
            "description": "When the state is entered. Override this to start loading assets - call loadingStart()\nto tell the StateManager that that is going on.",
            "itemtype": "method",
            "name": "enter",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 183,
            "description": "When the state is visually entered fully - after the transition is done.\nOverride this to begin your state's activities.",
            "itemtype": "method",
            "name": "enterDone",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 193,
            "description": "Goto the next state",
            "itemtype": "method",
            "name": "nextState",
            "final": 1,
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 220,
            "description": "Goto the previous state",
            "itemtype": "method",
            "name": "previousState",
            "final": 1,
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 247,
            "description": "Manual call to signal the start of preloading",
            "itemtype": "method",
            "name": "loadingStart",
            "final": 1,
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 272,
            "description": "Manual call to signal the end of preloading",
            "itemtype": "method",
            "name": "loadingDone",
            "final": 1,
            "params": [
                {
                    "name": "delay",
                    "description": "Frames to delay the load completion to allow the framerate to\n    stabilize. If not delay is set, defaults to the `delayLoad` property.",
                    "type": "Int",
                    "optional": true
                }
            ],
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 308,
            "description": "Status of whether the panel load was canceled",
            "itemtype": "property",
            "name": "canceled",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 321,
            "description": "Get if this is the active state",
            "itemtype": "property",
            "name": "active",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 334,
            "description": "If the state is enabled, meaning that it is click ready",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 350,
            "description": "If the state has been destroyed.",
            "itemtype": "property",
            "name": "destroyed",
            "type": "Boolean",
            "readonly": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 363,
            "description": "This is called by the State Manager to exit the state",
            "itemtype": "method",
            "name": "_internalExit",
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 382,
            "description": "When the state is entering",
            "itemtype": "method",
            "name": "_internalEntering",
            "params": [
                {
                    "name": "proceed",
                    "description": "The function to call after enter has been called",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 393,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalExitStart",
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 403,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnter",
            "params": [
                {
                    "name": "proceed",
                    "description": "The function to call after enter has been called",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 432,
            "description": "Cancel the loading of this state",
            "itemtype": "method",
            "name": "_internalCancel",
            "access": "protected",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 447,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterDone",
            "access": "private",
            "tagname": "",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/State.js",
            "line": 460,
            "description": "Don't use the state object after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.State",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 20,
            "description": "A reference to the current state of the state manager",
            "itemtype": "property",
            "name": "currentState",
            "type": "BaseState",
            "class": "springroll.StateEvent",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 27,
            "description": "A reference to the state who's actually being transitioned or being changed",
            "itemtype": "property",
            "name": "visibleState",
            "type": "BaseState",
            "class": "springroll.StateEvent",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 34,
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "springroll.StateEvent",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 43,
            "description": "When the state besome visible",
            "itemtype": "event",
            "name": "onVisible",
            "type": "String",
            "class": "springroll.StateEvent",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 50,
            "description": "When the state becomes hidden",
            "itemtype": "event",
            "name": "onHidden",
            "type": "String",
            "class": "springroll.StateEvent",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 34,
            "description": "The display that holds the states this StateManager is managing.",
            "itemtype": "property",
            "name": "_display",
            "type": "springroll.AbstractDisplay",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 42,
            "description": "The click to play in between transitioning states",
            "itemtype": "property",
            "name": "transition",
            "type": "createjs.MovieClip|springroll.easeljs.BitmapMovieClip|PIXI.Spine",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 49,
            "description": "The sounds for the transition",
            "itemtype": "property",
            "name": "_transitionSounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 57,
            "description": "The collection of states map",
            "itemtype": "property",
            "name": "_states",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 65,
            "description": "The currently selected state",
            "itemtype": "property",
            "name": "_state",
            "type": "springroll.State",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 73,
            "description": "The currently selected state id",
            "itemtype": "property",
            "name": "_stateID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 81,
            "description": "The old state",
            "itemtype": "property",
            "name": "_oldState",
            "type": "springroll.State",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 89,
            "description": "If the manager is loading a state",
            "itemtype": "property",
            "name": "name description",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 97,
            "description": "If the state or manager is current transitioning",
            "itemtype": "property",
            "name": "_isTransitioning",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 105,
            "description": "If the current object is destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 113,
            "description": "If we're transitioning the state, the queue the id of the next one",
            "itemtype": "property",
            "name": "_queueStateId",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 133,
            "description": "The name of the Animator label and event for transitioning into a state.",
            "itemtype": "event",
            "name": "onTransitionIn",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 140,
            "description": "The name of the Animator label and event for loading between state change.\nthis event is only dispatched if there is a loading sequence to show in the\ntransition. Recommended to use 'loadingStart' instead for checking.",
            "itemtype": "event",
            "name": "onTransitionLoading",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 149,
            "description": "The name of the event for completing transitioning into a state.",
            "itemtype": "event",
            "name": "onTransitionInDone",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 156,
            "description": "The name of the Animator label and event for transitioning out of a state.",
            "itemtype": "event",
            "name": "onTransitionOut",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 163,
            "description": "The name of the event for completing transitioning out of a state.",
            "itemtype": "event",
            "name": "onTransitionOutDone",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 170,
            "description": "The name of the event for initialization complete - the first state is then being entered.",
            "itemtype": "event",
            "name": "onInitDone",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 177,
            "description": "Event when the state begins loading assets when it is entered.",
            "itemtype": "event",
            "name": "onLoadingStart",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 184,
            "description": "Event when the state finishes loading assets when it is entered.",
            "itemtype": "event",
            "name": "onLoadingDone",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 191,
            "description": "Register a state with the state manager, done initially",
            "itemtype": "method",
            "name": "addState",
            "params": [
                {
                    "name": "id",
                    "description": "The string alias for a state",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "State object reference",
                    "type": "springroll.State"
                }
            ],
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 215,
            "description": "Dynamically change the transition",
            "deprecated": true,
            "deprecationMessage": "Use the transition property directly to change the transition.",
            "itemtype": "method",
            "name": "changeTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "Clip to swap for transition",
                    "type": "createjs.MovieClip|springroll.easeljs.BitmapMovieClip|PIXI.Spine"
                }
            ],
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 226,
            "description": "Get the current selected state (state object)",
            "deprecated": true,
            "deprecationMessage": "Use the getter 'currentState' instead",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The Base State object",
                "type": "springroll.State"
            },
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 237,
            "description": "Get the current selected state (state object)",
            "itemtype": "property",
            "name": "currentState",
            "type": "springroll.State",
            "readonly": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 250,
            "description": "Access a certain state by the ID",
            "itemtype": "method",
            "name": "getStateById",
            "params": [
                {
                    "name": "id",
                    "description": "State alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The base State object",
                "type": "springroll.State"
            },
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 263,
            "description": "If the StateManager is busy because it is currently loading or transitioning.",
            "itemtype": "method",
            "name": "isBusy",
            "return": {
                "description": "If StateManager is busy",
                "type": "Boolean"
            },
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 274,
            "description": "If the state needs to do some asyncronous tasks,\nThe state can tell the manager to stop the animation",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 289,
            "description": "If the state has finished it's asyncronous task loading\nLets enter the state",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 302,
            "description": "Show, enable the blocker clip to disable mouse clicks",
            "itemtype": "method",
            "name": "showBlocker",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 312,
            "description": "Re-enable interaction with the stage",
            "itemtype": "method",
            "name": "hideBlocker",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 322,
            "description": "This transitions out of the current state and\nenters it again. Can be useful for clearing a state",
            "itemtype": "method",
            "name": "refresh",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 334,
            "description": "Get or change the current state, using the state id.",
            "itemtype": "property",
            "name": "state",
            "type": "String",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 399,
            "description": "Set the current State",
            "itemtype": "method",
            "name": "setState",
            "deprecated": true,
            "deprecationMessage": "Use the state setter instead",
            "params": [
                {
                    "name": "id",
                    "description": "The state id",
                    "type": "String"
                }
            ],
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 411,
            "description": "When the transition out of a state has finished playing during a state change.",
            "itemtype": "method",
            "name": "_onTransitionOut",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 441,
            "description": "When the state has completed its loading sequence.\nThis should be treated as an asynchronous process.",
            "itemtype": "method",
            "name": "_onStateLoaded",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 461,
            "description": "When the transition into a state has finished playing during a state change.",
            "itemtype": "method",
            "name": "_onTransitionIn",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 482,
            "description": "Process the state queue",
            "itemtype": "method",
            "name": "_processQueue",
            "return": {
                "description": "If there is a queue to process"
            },
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 504,
            "description": "Plays the animation \"onTransitionLoading\" on the transition. Also serves as the animation callback.\nManually looping the animation allows the animation to be synced to the audio while looping.",
            "itemtype": "method",
            "name": "_onTransitionLoading",
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 547,
            "description": "Displays the transition out animation, without changing states. Upon completion, the\ntransition looping animation automatically starts playing.",
            "itemtype": "method",
            "name": "showTransitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 565,
            "description": "Displays the transition in animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 582,
            "description": "Generalized function for transitioning with the manager",
            "itemtype": "method",
            "name": "_transitioning",
            "params": [
                {
                    "name": "The",
                    "description": "animator event to play",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "callback function after transition is done",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 616,
            "description": "Goto the next state",
            "deprecated": true,
            "deprecationMessage": "Use the method `nextState` on the state itself",
            "itemtype": "method",
            "name": "next",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 626,
            "description": "Goto the previous state",
            "deprecated": true,
            "deprecationMessage": "Use the method `previousState` on the state itself",
            "itemtype": "method",
            "name": "previous",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 636,
            "description": "Remove the state manager",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.StateManager",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 21,
            "description": "Fired when an event has been added",
            "itemtype": "event",
            "name": "stateAdded",
            "params": [
                {
                    "name": "alias",
                    "description": "The state alias",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "The State object",
                    "type": "springroll.State"
                }
            ],
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 28,
            "description": "The collection of states",
            "itemtype": "property",
            "name": "_states",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 35,
            "description": "The state manager",
            "itemtype": "property",
            "name": "manager",
            "type": "springroll.StateManager",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 41,
            "description": "The transition animation to use between the StateManager state changes",
            "itemtype": "property",
            "name": "_transition",
            "type": "createjs.MovieClip|springroll.easeljs.BitmapMovieClip|PIXI.Spine",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 48,
            "description": "The transition animation to use between the StateManager state changes",
            "itemtype": "property",
            "name": "transition",
            "type": "createjs.MovieClip|springroll.easeljs.BitmapMovieClip|PIXI.Spine",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 101,
            "description": "The initial state to go to when everything is finished",
            "itemtype": "property",
            "name": "options.state",
            "type": "Boolean",
            "default": "null",
            "readonly": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 109,
            "description": "The animation to use for the StateManager",
            "itemtype": "property",
            "name": "options.transition",
            "type": "createjs.MovieClip|PIXI.Spine",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 115,
            "description": "The transition sounds to use for the state transition",
            "itemtype": "property",
            "name": "options.transitionSounds",
            "type": "Object",
            "readonly": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 120,
            "description": "The transition in sound alias or sound object",
            "itemtype": "property",
            "name": "options.transitionSounds.in",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 126,
            "description": "The transition out sound alias or sound object",
            "itemtype": "property",
            "name": "options.transitionSounds.out",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/states/StatesPlugin.js",
            "line": 138,
            "description": "The collection of states where the key is the state alias and value is the state display object",
            "itemtype": "property",
            "name": "states",
            "type": "Object",
            "default": "null",
            "class": "springroll.Application",
            "module": "States",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 19,
            "description": "The game has finished loading",
            "itemtype": "event",
            "name": "loaded",
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 24,
            "description": "The config has finished loading, in case you want to\nadd additional tasks to the manager after this.",
            "itemtype": "event",
            "name": "configLoaded",
            "params": [
                {
                    "name": "config",
                    "description": "The JSON object for config",
                    "type": "Object"
                },
                {
                    "name": "manager",
                    "description": "The task manager",
                    "type": "TaskManager"
                }
            ],
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 32,
            "description": "The game has started loading",
            "itemtype": "event",
            "name": "loading",
            "params": [
                {
                    "name": "tasks",
                    "description": "The list of tasks to preload",
                    "type": "Array"
                }
            ],
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 43,
            "description": "The path to the config file to load",
            "itemtype": "property",
            "name": "options.configPath",
            "type": "String",
            "default": "null",
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 50,
            "description": "The game configuration loaded from and external JSON file",
            "itemtype": "property",
            "name": "config",
            "type": "Object",
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 91,
            "description": "Callback when the config is loaded",
            "itemtype": "method",
            "name": "onConfigLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "result",
                    "description": "The Loader result from the load task",
                    "type": "springroll.LoaderResult"
                }
            ],
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ConfigPlugin.js",
            "line": 103,
            "description": "Callback when tasks are completed",
            "itemtype": "method",
            "name": "onTasksComplete",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 28,
            "description": "The url of the file to load",
            "itemtype": "property",
            "name": "serviceCall",
            "type": "Function",
            "class": "springroll.FunctionTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 34,
            "description": "The media loader priorty of the load",
            "itemtype": "property",
            "name": "args",
            "type": "Array",
            "class": "springroll.FunctionTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 53,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the asynchronous function is done",
                    "type": "Function"
                }
            ],
            "class": "springroll.FunctionTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 66,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "springroll.FunctionTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 76,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.FunctionTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 28,
            "description": "The internal task manager",
            "itemtype": "property",
            "name": "_manager",
            "type": "TaskManager",
            "access": "private",
            "tagname": "",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 35,
            "description": "The load results dictionary",
            "itemtype": "property",
            "name": "_results",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 70,
            "description": "The list of other tasks, as an array",
            "itemtype": "property",
            "name": "list",
            "type": "Array",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 83,
            "description": "Start the load",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the task is done",
                    "type": "Function"
                }
            ],
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 103,
            "description": "Callback for when an task is done",
            "itemtype": "method",
            "name": "_onTaskDone",
            "params": [
                {
                    "name": "ev",
                    "description": "Task Loaded event",
                    "type": "TaskEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 116,
            "description": "Callback for when the whole list is done",
            "itemtype": "method",
            "name": "_onAllTasksComplete",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback passed to start()",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 129,
            "description": "Cancel the TaskManager used for the list of tasks. As the individual tasks are not\nkept track of, this always returns true.",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "Returns true."
            },
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 141,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 151,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.ListTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 37,
            "description": "The url of the file to load",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 43,
            "description": "Loading options",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 49,
            "description": "The media loader priorty of the load",
            "itemtype": "property",
            "name": "priority",
            "type": "Int",
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 55,
            "description": "The optional callback to get updates (to show load progress)",
            "itemtype": "property",
            "name": "updateCallback",
            "type": "Function",
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 68,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done",
                    "type": "Function"
                }
            ],
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 84,
            "description": "Cancel the task - for use in inherited classes",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the loader removed it from the queue successfully - \nfalse means that there is a 'load finished' event inbound for the task manager",
                "type": "Bool"
            },
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 95,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "ToString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 105,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.LoadTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 35,
            "description": "The optional callback to get updates (to show load progress)",
            "itemtype": "property",
            "name": "updateCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 42,
            "description": "The AssetLoader used to load all files.",
            "itemtype": "property",
            "name": "_assetLoader",
            "type": "PIXI.AssetLoader",
            "access": "private",
            "tagname": "",
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 58,
            "description": "The urls of the files to load",
            "itemtype": "property",
            "name": "urls",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 70,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done"
                }
            ],
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 85,
            "description": "A callback for when an individual item has been loaded.",
            "itemtype": "method",
            "name": "onProgress",
            "access": "private",
            "tagname": "",
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 95,
            "description": "Cancel the task",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the loader removed it from the queue successfully -\nfalse means that there is a 'load finished' event inbound for the task manager"
            },
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 108,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task"
            },
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 118,
            "description": "Destroy this load task and don't use after this.",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.PixiTask",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 18,
            "description": "The unique id of the task",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 24,
            "description": "Callback to call when the task is completed",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 30,
            "description": "Bool to keep track if this has been destroyed",
            "itemtype": "property",
            "name": "_isDestroyed",
            "type": "Bool",
            "access": "protected",
            "tagname": "",
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 38,
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 41,
            "description": "Called from the task manager when a Task is finished",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "result",
                    "description": "The resulting data from the return",
                    "type": "Type"
                },
                {
                    "name": "manager",
                    "description": "The reference to the manager",
                    "type": "TaskManager"
                }
            ],
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 55,
            "description": "Start the load. This implementation is a NOP.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done",
                    "type": "Function"
                }
            ],
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 65,
            "description": "Cancel the task - for use in inherited classes",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the cancel was successful",
                "type": "Bool"
            },
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 75,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 85,
            "description": "If this task has been __isDestroyed\nDon't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Task",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 19,
            "description": "Task this event pertains to",
            "itemtype": "property",
            "name": "task",
            "type": "Task",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 25,
            "description": "The task result",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 31,
            "description": "The type of event",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 38,
            "description": "A task is about to start",
            "itemtype": "event",
            "name": "onItemAboutToLoad",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 44,
            "description": "A task is now starting",
            "itemtype": "event",
            "name": "onItemLoading",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 50,
            "description": "An task is done. The data of this event is the task's result.",
            "itemtype": "event",
            "name": "onItemLoaded",
            "class": "springroll.TaskEvent",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 30,
            "description": "Collection of all tasks",
            "itemtype": "property",
            "name": "tasks",
            "type": "Array",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 36,
            "description": "The current tasks",
            "itemtype": "property",
            "name": "_currentTaskes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 43,
            "description": "If we're paused and should therefore not automatically proceed to the\nnext task after each task completes",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 50,
            "description": "The number of tasks that are currently in progress",
            "itemtype": "property",
            "name": "_tasksInProgress",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 57,
            "description": "If the manager is destroyed",
            "itemtype": "property",
            "name": "_isDestroyed",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 67,
            "description": "Event dispatched when tasks are all done",
            "itemtype": "event",
            "name": "onAllTasksDone",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 73,
            "description": "Convenience method to execute tasks without having to setup the event listener",
            "itemtype": "method",
            "name": "process",
            "static": 1,
            "params": [
                {
                    "name": "tasks",
                    "description": "The collection of tasks",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback",
                    "type": "Function"
                },
                {
                    "name": "startAll",
                    "description": "If we should start all tasks",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "immediateDestroy",
                    "description": "Destroy after load",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The instance of the task manager created",
                "type": "TaskManager"
            },
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 114,
            "description": "Convenience function to add a task",
            "itemtype": "method",
            "name": "addTask",
            "params": [
                {
                    "name": "task",
                    "description": "The task object to load",
                    "type": "Task"
                }
            ],
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 124,
            "description": "Add bunch of tasks",
            "itemtype": "method",
            "name": "addTasks",
            "params": [
                {
                    "name": "tasks",
                    "description": "Collection of tasks to add",
                    "type": "Array"
                }
            ],
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 135,
            "description": "Cancel and remove all tasks",
            "itemtype": "method",
            "name": "removeAll",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 169,
            "description": "Cancels all tasks with a given id",
            "itemtype": "method",
            "name": "cancelTask",
            "params": [
                {
                    "name": "taskId",
                    "description": "The task id to remove.",
                    "type": "String"
                }
            ],
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 199,
            "description": "Start the next task in the tasks list. When it is done, the\ntask's callback will be called.  If the manager is not paused after\nthe task's callback returns, the manager will start the next task.",
            "itemtype": "method",
            "name": "startNext",
            "return": {
                "description": "The task that was started or null if the list contained no\ntasks to be processed",
                "type": "Task"
            },
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 243,
            "description": "Callback for when an task is done",
            "itemtype": "method",
            "name": "onTaskDone",
            "params": [
                {
                    "name": "result",
                    "description": "Result of the task",
                    "type": "*"
                },
                {
                    "name": "task",
                    "description": "Task that is done",
                    "type": "Task"
                }
            ],
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 282,
            "description": "Start the next task until there are no more tasks to start",
            "itemtype": "method",
            "name": "startAll",
            "return": {
                "description": "All tasks that were started",
                "type": "Array"
            },
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 304,
            "description": "We don't want to use the task manager after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.TaskManager",
            "module": "Tasks",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/Positioner.js",
            "line": 18,
            "description": "Initial position a single display object",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "display",
                    "description": "The display object to scale",
                    "type": "createjs.DisplayObject|PIXI.DisplayObject"
                },
                {
                    "name": "settings",
                    "description": "The values for setting",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "The initial X position of the item",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The initial Y position of the item",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "The initial scale",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The initial scale X value",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "y",
                                    "description": "The initial scale Y value",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "pivot",
                            "description": "The pivot or registration point.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The pivot point X location",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "y",
                                    "description": "The pivot point Y location",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "rotation",
                            "description": "The initial rotation in degrees",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "hitArea",
                            "description": "An object which describes the hit area\n                                         of the item or an array of points. See\n                                         generateHitArea().",
                            "type": "Object|Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "type",
                                    "description": "If the hitArea is an object, the type\n                                        of hit area, \"rect\", \"ellipse\", \"circle\", etc",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "adapter",
                    "description": "The adapter for the display being positioned\n                                  in. If omitted, uses the Application's default display.",
                    "type": "DisplayAdapter",
                    "optional": true
                }
            ],
            "class": "springroll.Positioner",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/Positioner.js",
            "line": 92,
            "description": "Create the polygon hit area for interface elements",
            "static": 1,
            "itemtype": "method",
            "name": "generateHitArea",
            "params": [
                {
                    "name": "hitArea",
                    "description": "One of the following:\n\n    // An array of points for a polygon.\n    [{x:0, y:0}, {x:0, y:20}, {x:20, y:0}]\n\n    // An object describing a rectangle.\n    {type:\"rect\", x:0, y:0, w:10, h:30}\n\n    // An object describing an ellipse, where x and y are the center.\n    {type:\"ellipse\", x:0, y:0, w:10, h:30}\n\n    // An object describing a circle, where x and y are the center.\n    {type:\"circle\", x:0, y:0, r:20}\n\n    // An object describing a sector, where x and y are the center of a circle\n    // and start/end are the start and end angles of the sector in degrees.\n    {type:\"sector\", x:0, y:0, r:20, start:0, end:90}",
                    "type": "Object|Array"
                },
                {
                    "name": "scale",
                    "description": "The size to scale hitArea by",
                    "type": "Number"
                },
                {
                    "name": "adapter",
                    "description": "The adapter for the display being positioned\n                                  in. If omitted, uses the Application's default display.",
                    "type": "DisplayAdapter",
                    "optional": true
                }
            ],
            "return": {
                "description": "A geometric shape object for hit testing, either a Polygon,\n                 Rectangle, Ellipse, Circle, or Sector, depending on the hitArea object.\n                 The shape will have a contains() function for hit testing.",
                "type": "Object"
            },
            "class": "springroll.Positioner",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 31,
            "description": "What vertical screen location the item should be aligned to: \"top\", \"center\", \"bottom\"",
            "itemtype": "property",
            "name": "vertAlign",
            "type": "String",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 37,
            "description": "What horizontal screen location the item should be aligned to: \"left\", \"center\", \"right\"",
            "itemtype": "property",
            "name": "horiAlign",
            "type": "String",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 43,
            "description": "If this element should be aligned to the title safe area, not the actual screen.\nValues of \"horizontal\" and \"vertical\" make the title safe calculations take place only\nfor one direction.",
            "itemtype": "property",
            "name": "titleSafe",
            "type": "Boolean|String",
            "default": "false",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 52,
            "description": "Maximum scale allowed in physical size",
            "itemtype": "property",
            "name": "maxScale",
            "type": "Number",
            "default": "1",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 59,
            "description": "Minimum scale allowed in physical size",
            "itemtype": "property",
            "name": "minScale",
            "type": "Number",
            "default": "1",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 66,
            "description": "If the UI element is centered horizontally",
            "itemtype": "property",
            "name": "centeredHorizontally",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 73,
            "description": "The reference to the interface item we're scaling",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_display",
            "type": "PIXI.DisplayObject|createjs.DisplayObject",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 80,
            "description": "The original screen the item was designed for",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_designedScreen",
            "type": "ScreenSettings",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 87,
            "description": "The adapter for universal scale, rotation size access",
            "itemtype": "property",
            "name": "_adapter",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 97,
            "description": "Original X scale of the item",
            "itemtype": "property",
            "name": "origScaleX",
            "type": "Number",
            "default": "0",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 104,
            "description": "The original Y scale of the item",
            "itemtype": "property",
            "name": "origScaleY",
            "type": "Number",
            "default": "0",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 111,
            "description": "Original width in pixels",
            "itemtype": "property",
            "name": "origWidth",
            "type": "Number",
            "default": "0",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 118,
            "description": "The original bounds of the item with x, y, right, bottom, width, \n\theight properties. Used to determine the distance to each edge of\n\tthe item from its origin",
            "itemtype": "property",
            "name": "origBounds",
            "type": "Object",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 126,
            "description": "Original horizontal margin in pixels",
            "itemtype": "property",
            "name": "origMarginHori",
            "type": "Number",
            "default": "0",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 133,
            "description": "Original vertical margin in pixels",
            "itemtype": "property",
            "name": "origMarginVert",
            "type": "Number",
            "default": "0",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 190,
            "description": "Get the current display item",
            "itemtype": "property",
            "name": "display",
            "type": "PIXI.DisplayObject|createjs.DisplayObject",
            "readonly": "",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 203,
            "description": "Adjust the item scale and position, to reflect new screen",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "displayWidth",
                    "description": "The current screen width",
                    "type": "Number"
                },
                {
                    "name": "displayHeight",
                    "description": "The current screen height",
                    "type": "Number"
                }
            ],
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleItem.js",
            "line": 354,
            "description": "Destroy this item, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.ScaleItem",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 46,
            "description": "The configuration for each items",
            "itemtype": "property",
            "name": "_items",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 53,
            "description": "The screen settings object, contains information about designed size",
            "itemtype": "property",
            "name": "_size",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 60,
            "description": "The current overall scale of the game",
            "itemtype": "property",
            "name": "_scale",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "default": "1",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 68,
            "description": "The adapter for universal scale, rotation size access",
            "itemtype": "property",
            "name": "_adapter",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 75,
            "description": "The collection of bitmaps to full screen scale",
            "itemtype": "property",
            "name": "_backgrounds",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 82,
            "description": "The internal enabled",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 114,
            "description": "Vertically align to the top",
            "itemtype": "property",
            "name": "ALIGN_TOP",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"top\"",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 124,
            "description": "Vertically align to the bottom",
            "itemtype": "property",
            "name": "ALIGN_BOTTOM",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"bottom\"",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 134,
            "description": "Horizontally align to the left",
            "itemtype": "property",
            "name": "ALIGN_LEFT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"left\"",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 144,
            "description": "Horizontally align to the right",
            "itemtype": "property",
            "name": "ALIGN_RIGHT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"right\"",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 154,
            "description": "Vertically or horizontally align to the center",
            "itemtype": "property",
            "name": "ALIGN_CENTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"center\"",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 164,
            "description": "Get the adapter by display",
            "itemtype": "method",
            "name": "_getAdapter",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "display",
                    "description": "The canvas renderer display",
                    "type": "Object"
                }
            ],
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 194,
            "description": "Set the display",
            "itemtype": "property",
            "name": "display",
            "type": "springroll.AbstractDisplay",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 206,
            "description": "The design sized of the application",
            "itemtype": "property",
            "name": "size",
            "type": "Object",
            "default": "null",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 211,
            "description": "The designed width of the application",
            "itemtype": "property",
            "name": "size.width",
            "type": "Number",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 215,
            "description": "The designed width of the application",
            "itemtype": "property",
            "name": "size.height",
            "type": "Number",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 219,
            "description": "The designed max width of the application",
            "itemtype": "property",
            "name": "size.maxWidth",
            "type": "Number",
            "default": "size.width",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 224,
            "description": "The designed maxHeight of the application",
            "itemtype": "property",
            "name": "size.maxHeight",
            "type": "Number",
            "default": "size.height",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 269,
            "description": "Get the current scale of the screen relative to the designed screen size",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "readonly": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 282,
            "description": "The total number of items",
            "itemtype": "property",
            "name": "numItems",
            "type": "Number",
            "readonly": "",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 295,
            "description": "Whether the ScaleManager should listen to the stage resize. Setting to true\ninitialized a resize.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 323,
            "description": "Remove all ScaleItem where the item display is a the container or it contains items",
            "itemtype": "method",
            "name": "removeItems",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "createjs.Container|PIXI.DisplayObjectContainer"
                }
            ],
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 342,
            "description": "Register a dictionary of items to the ScaleManager to control.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "container",
                    "description": "The container where the\n                                                                  items live as variables.",
                    "type": "PIXI.DisplayObjectContainer|createjs.Container"
                },
                {
                    "name": "items",
                    "description": "The items object where the keys are the name of the property on the\n                      parent and the value is an object with keys of \"titleSafe\", \"minScale\",\n                      \"maxScale\", \"centerHorizontally\", \"align\", see ScaleManager.addItem for a\n                      description of the different keys.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The instance of this ScaleManager for chaining",
                "type": "springroll.ScaleManager"
            },
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 379,
            "description": "Manually add an item",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "displayObject",
                    "description": "The display object item",
                    "type": "createjs.DisplayObject|PIXI.DisplayObject"
                },
                {
                    "name": "settings",
                    "description": "The collection of settings or the align property",
                    "type": "Object|String",
                    "optional": true,
                    "optdefault": "\"center\"",
                    "props": [
                        {
                            "name": "align",
                            "description": "The vertical alignment (\"top\", \"bottom\", \"center\")\n       then horizontal alignment (\"left\", \"right\" and \"center\"). Or you can use the short-\n       handed versions: \"center\" = \"center-center\", \"top\" = \"top-center\", \n       \"bottom\" = \"bottom-center\", \"left\" = \"center-left\", \"right\" = \"center-right\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "titleSafe",
                            "description": "If the item needs to be in the title safe\n       area. Acceptable values are false, \"horizontal\", \"vertical\", \"all\", and true.\n       The default is false, and true is the same as \"all\".",
                            "type": "Boolean|String",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "minScale",
                            "description": "The minimum scale amount (default, scales the same\n       size as the stage)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "NaN"
                        },
                        {
                            "name": "maxScale",
                            "description": "The maximum scale amount (default, scales the same\n       size as the stage)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "NaN"
                        },
                        {
                            "name": "centeredHorizontally",
                            "description": "Makes sure that the center of the\n       object is directly in the center of the stage assuming origin point is in\n       the upper-left corner.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "x",
                            "description": "The initial X position of the item",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The initial Y position of the item",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "The initial scale",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The initial scale X value",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "y",
                                    "description": "The initial scale Y value",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "pivot",
                            "description": "The pivot point",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The pivot point X location",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "y",
                                    "description": "The pivot point Y location",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "rotation",
                            "description": "The initial rotation in degrees",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "hitArea",
                            "description": "An object which describes the hit area of the item\n       or an array of points.",
                            "type": "Object|Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "type",
                                    "description": "If the hitArea is an object, the type of hit area,\n       \"rect\", \"ellipse\", \"circle\", etc",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The instance of this ScaleManager for chaining",
                "type": "springroll.ScaleManager"
            },
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 481,
            "description": "Add background bitmaps to scale full screen, this will attempt to\nscale the background to the height of the display and crop on\nthe left and right.",
            "itemtype": "method",
            "name": "addBackground",
            "params": [
                {
                    "name": "The",
                    "description": "bitmap to scale or collection of bitmaps",
                    "type": "Bitmap"
                }
            ],
            "return": {
                "description": "The ScaleManager for chaining",
                "type": "springroll.ScaleManager"
            },
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 500,
            "description": "Remove background",
            "itemtype": "method",
            "name": "removeBackground",
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap added",
                    "type": "Bitmap"
                }
            ],
            "return": {
                "description": "The ScaleManager for chaining",
                "type": "springroll.ScaleManager"
            },
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 521,
            "description": "Scale the UI items that have been registered to the current screen",
            "itemtype": "method",
            "name": "_resize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "The current width of the application",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The current height of the application",
                    "type": "Number"
                }
            ],
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScaleManager.js",
            "line": 600,
            "description": "Destroy the scaler object",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.ScaleManager",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/ScalingPlugin.js",
            "line": 23,
            "description": "The main ScaleManager for any display object references\nin the main game.",
            "itemtype": "property",
            "name": "scaling",
            "type": "springroll.ScaleManager",
            "class": "springroll.Application",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/TouchPlugin.js",
            "line": 18,
            "description": "If the current brower is iOS",
            "itemtype": "property",
            "name": "isIOS",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/TouchPlugin.js",
            "line": 24,
            "description": "If the current brower is Android",
            "itemtype": "property",
            "name": "isAndroid",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/TouchPlugin.js",
            "line": 30,
            "description": "If the current brower has touch input available",
            "itemtype": "property",
            "name": "hasTouch",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/ui/TouchPlugin.js",
            "line": 40,
            "description": "Manually override the check for hasTouch (unminifed library version only)",
            "itemtype": "property",
            "name": "options.forceTouch",
            "type": "Boolean",
            "default": "false",
            "class": "springroll.Application",
            "module": "UI",
            "namespace": "springroll"
        },
        {
            "file": "src/utils/extend.js",
            "line": 15,
            "description": "Extend prototype",
            "example": [
                "\n\t\tvar p = extend(MyClass, ParentClass);"
            ],
            "is_constructor": 1,
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "subClass",
                    "description": "The reference to the class",
                    "type": "Function"
                },
                {
                    "name": "superClass",
                    "description": "The parent reference or full classname",
                    "type": "Function|String"
                }
            ],
            "return": {
                "description": "Reference to the subClass's prototype",
                "type": "Object"
            },
            "class": "window.extend",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/utils/include.js",
            "line": 15,
            "description": "Import a class",
            "example": [
                "\n\t\tvar Application = include('springroll.Application');"
            ],
            "is_constructor": 1,
            "itemtype": "method",
            "name": "include",
            "params": [
                {
                    "name": "namespaceString",
                    "description": "Name space, for instance 'springroll.Application'",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "If the class we're trying to include is required.\n \t\tFor classes that aren't found and are required, an error is thrown.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The object attached at the given namespace",
                "type": "Object|function"
            },
            "class": "window.include",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/utils/mixin.js",
            "line": 15,
            "description": "Mixin functionality to an object",
            "example": [
                "\n\t\tmixin(instance, MyClass);"
            ],
            "is_constructor": 1,
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "target",
                    "description": "The instance object to add functionality to",
                    "type": "*"
                },
                {
                    "name": "superClass",
                    "description": "The parent reference or full classname",
                    "type": "Function|String"
                },
                {
                    "name": "args",
                    "description": "Any additional arguments to pass to the constructor of the superClass",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return reference to target",
                "type": "*"
            },
            "class": "window.mixin",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/utils/namespace.js",
            "line": 16,
            "description": "Create the namespace and assing to the window",
            "example": [
                "\n\t\tvar SpriteUtils = function(){};\n\t\tnamespace('springroll').SpriteUtils = SpriteUtils;"
            ],
            "is_constructor": 1,
            "itemtype": "method",
            "name": "namespace",
            "params": [
                {
                    "name": "namespaceString",
                    "description": "Name space, for instance 'springroll.utils'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The namespace object attached to the current window",
                "type": "Object"
            },
            "class": "window.namespace",
            "module": "Core",
            "namespace": "window"
        },
        {
            "file": "src/Application.js",
            "line": 36,
            "description": "Initialization options/query string parameters, these properties are read-only\nApplication properties like raf, fps, don't have any affect on the options object.",
            "itemtype": "property",
            "name": "options",
            "type": "springroll.ApplicationOptions",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 44,
            "description": "Primary renderer for the application, for simply accessing\nApplication.instance.display.stage;\nThe first display added becomes the primary display automatically.",
            "itemtype": "property",
            "name": "display",
            "type": "Display",
            "access": "public",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 70,
            "description": "The name of the game, useful for debugging purposes",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "\"\"",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 88,
            "description": "The collection of function references to call when initializing the application\nthese are registered by external modules.",
            "itemtype": "property",
            "name": "_plugins",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 97,
            "description": "The number of ms since the last frame update",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lastFrameTime",
            "type": "Int",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 104,
            "description": "The bound callback for listening to tick events",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_tickCallback",
            "type": "Function",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 111,
            "description": "If the current application is paused",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 118,
            "description": "If the current application is enabled",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 125,
            "description": "The id of the active requestAnimationFrame or setTimeout call.",
            "itemtype": "property",
            "name": "_tickId",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 132,
            "description": "If requestionAnimationFrame should be used",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_useRAF",
            "type": "Bool",
            "default": "false",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 140,
            "description": "The number of milliseconds per frame",
            "itemtype": "property",
            "name": "_msPerFrame",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 147,
            "description": "The collection of displays",
            "itemtype": "property",
            "name": "_displays",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 154,
            "description": "The displays by canvas id",
            "itemtype": "property",
            "name": "_displaysMap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 162,
            "description": "Fired when initialization of the application is ready",
            "itemtype": "event",
            "name": "init",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 167,
            "description": "Fired when initialization of the application is done",
            "itemtype": "event",
            "name": "afterInit",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 172,
            "description": "Fired when before initialization of the application",
            "itemtype": "event",
            "name": "beforeInit",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 177,
            "description": "Fired when an update is called, every frame update",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The number of milliseconds since the last frame update",
                    "type": "Int"
                }
            ],
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 183,
            "description": "Fired when the pause state is toggled",
            "itemtype": "event",
            "name": "pause",
            "params": [
                {
                    "name": "paused",
                    "description": "If the application is now paused",
                    "type": "Boolean"
                }
            ],
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 189,
            "description": "When a display is added.",
            "itemtype": "event",
            "name": "displayAdded",
            "params": [
                {
                    "name": "display",
                    "description": "The current display being added",
                    "type": "springroll.AbstractDisplay",
                    "optional": true
                }
            ],
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 195,
            "description": "When a display is removed.",
            "itemtype": "event",
            "name": "displayRemoved",
            "params": [
                {
                    "name": "displayId",
                    "description": "The display alias",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 201,
            "description": "Fired when the application becomes paused",
            "itemtype": "event",
            "name": "paused",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 206,
            "description": "Fired when the application resumes from a paused state",
            "itemtype": "event",
            "name": "resumed",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 211,
            "description": "Fired when the application is destroyed",
            "itemtype": "event",
            "name": "destroy",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 216,
            "description": "Get the singleton instance of the application",
            "itemtype": "property",
            "name": "instance",
            "type": "Application",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 231,
            "description": "The internal initialization",
            "itemtype": "method",
            "name": "_preInit",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 280,
            "description": "Initialize the application",
            "itemtype": "method",
            "name": "_doInit",
            "access": "protected",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 306,
            "description": "Override this to do post constructor initialization",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 313,
            "description": "Enables at the application level which enables\nand disables all the displays.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 335,
            "description": "Pause updates at the application level",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 377,
            "description": "Makes a setTimeout with a time based on _msPerFrame and the amount of time spent in the\ncurrent tick.",
            "itemtype": "method",
            "name": "setTargetedTimeout",
            "params": [
                {
                    "name": "callback",
                    "description": "The tick function to call.",
                    "type": "Function"
                },
                {
                    "name": "timeInFrame=0",
                    "description": "The amount of time spent in the current tick in milliseconds.",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 394,
            "description": "Add a display. If this is the first display added, then it will be stored as this.display.",
            "itemtype": "method",
            "name": "addDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element, this will be used to grab the Display later\n                   also the Display should be the one to called document.getElementById(id)\n                   and not the application sinc we don't care about the DOMElement as this\n                   point",
                    "type": "String"
                },
                {
                    "name": "displayConstructor",
                    "description": "The function to call to create the display instance",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Optional Display specific options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created display.",
                "type": "Display"
            },
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 429,
            "description": "Get all the displays",
            "itemtype": "property",
            "name": "displays",
            "type": "Array",
            "readonly": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 442,
            "description": "Gets a specific renderer by the canvas id.",
            "itemtype": "method",
            "name": "getDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested display.",
                "type": "Display"
            },
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 453,
            "description": "Gets a specific renderer by the canvas id.",
            "itemtype": "method",
            "name": "getDisplays",
            "deprecated": true,
            "deprecationMessage": "Use the displays property on the application instead.",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "each",
                    "description": "Optional looping method, callback takes a single parameter of the\n                         display",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The collection of Display objects",
                "type": "Array"
            },
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 471,
            "description": "Removes and destroys a display",
            "itemtype": "method",
            "name": "removeDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The Display's id (also the canvas ID)",
                    "type": "String"
                }
            ],
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 488,
            "description": "_tick would be bound in _tickCallback",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 528,
            "description": "Destroys the application and all active displays and plugins",
            "itemtype": "method",
            "name": "destroy",
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        },
        {
            "file": "src/Application.js",
            "line": 565,
            "description": "The toString debugging method",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The reprsentation of this class",
                "type": "String"
            },
            "class": "springroll.Application",
            "module": "Core",
            "namespace": "springroll"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src/displays/easeljs/states/BasePanel.js:14"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/easeljs/EaselJSDisplay.js:128"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/easeljs/EaselJSDisplay.js:145"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/animation/Animator.js:409"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/animation/Animator.js:424"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/animation/AnimatorTimeline.js:37"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/animation/AnimatorTimeline.js:37"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:148"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:161"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:177"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/AbstractDisplay.js:144"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/AbstractDisplay.js:157"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/AbstractDisplay.js:170"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src/languages/Languages.js:11"
        },
        {
            "message": "unknown tag: proprty",
            "line": " src/loaders/LoaderQueueItem.js:50"
        },
        {
            "message": "unknown tag: proprty",
            "line": " src/loaders/LoaderQueueItem.js:57"
        },
        {
            "message": "unknown tag: proprty",
            "line": " src/loaders/LoaderQueueItem.js:64"
        },
        {
            "message": "unknown tag: proprty",
            "line": " src/loaders/LoaderQueueItem.js:71"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:53"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:66"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:76"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:83"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:103"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:116"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:129"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:141"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:151"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:68"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:84"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:95"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:105"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:41"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:55"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:65"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:75"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:85"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:114"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:124"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:135"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:169"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:199"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:243"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:282"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:304"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src/Application.js:13"
        },
        {
            "message": "Missing item type",
            "line": " src/core/utils/SavedData.js:14"
        },
        {
            "message": "Missing item type",
            "line": " src/core/utils/SavedData.js:17"
        },
        {
            "message": "Missing item type\nWhen restoring from JSON via `JSON.parse`, we may pass a reviver function.\nIn our case, this will check if the object has a specially-named property (`__classname`).\nIf it does, we will attempt to construct a new instance of that class, rather than using a\nplain old Object. Note that this recurses through the object.",
            "line": " src/core/utils/SavedData.js:118"
        },
        {
            "message": "Missing item type\nConvert a string into a DOM Element",
            "line": " src/core/ApplicationOptions.js:138"
        },
        {
            "message": "Missing item type\nOverride a default value",
            "line": " src/core/ApplicationOptions.js:152"
        },
        {
            "message": "Missing item type\nList of hex colors to create Debug shortcuts for.\nEach key will become a function Debug[key]() that outputs\nthe message in the specified color to the console if\nthe browsers allows colored logging.\nColor Palette pulled from \"Better CSS Defaults\"\n(https://github.com/mrmrs/colors)",
            "line": " src/debug/Debug.js:970"
        },
        {
            "message": "Missing item type\nLoop through each item in the _palette object and create\na static function in Debug via the key (the color name) that\noutputs a message to the console in key's value (a hex color).",
            "line": " src/debug/Debug.js:1118"
        },
        {
            "message": "Missing item type\nstart timer on mouseover",
            "line": " src/displays/easeljs/learning/DwellTimer.js:59"
        },
        {
            "message": "Missing item type\nDwell ended - fire event if dwelled long enough",
            "line": " src/displays/easeljs/learning/DwellTimer.js:83"
        },
        {
            "message": "Missing item type\nFires event whenever the mouse is moved",
            "line": " src/displays/easeljs/learning/OffClickPlugin.js:158"
        },
        {
            "message": "Missing item type\nFires OffClick event if click on unhandled object",
            "line": " src/displays/easeljs/learning/OffClickPlugin.js:170"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/easeljs/ui/DragData.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/easeljs/ui/DragManager.js:178"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/easeljs/ui/DragManager.js:683"
        },
        {
            "message": "Missing item type\nIf a container contains a child",
            "line": " src/displays/easeljs/DisplayAdapter.js:308"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/ui/DragData.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/ui/DragManager.js:172"
        },
        {
            "message": "Missing item type\nSimple clamp function",
            "line": " src/displays/pixi/ui/DragManager.js:561"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/ui/DragManager.js:669"
        },
        {
            "message": "Missing item type\nIf a container contains a child",
            "line": " src/displays/pixi/DisplayAdapter.js:250"
        },
        {
            "message": "Missing item type\nInternal class for managing the property",
            "line": " src/events/PropertyDispatcher.js:153"
        },
        {
            "message": "Missing item type\ndestroys old hints",
            "line": " src/hints/HintsPlayer.js:327"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/Loader.js:70"
        },
        {
            "message": "Missing item type\nReference to the private instance object",
            "line": " src/loaders/Loader.js:73"
        },
        {
            "message": "Missing item type\nThe collection of LoaderQueueItems",
            "line": " src/loaders/Loader.js:80"
        },
        {
            "message": "Missing item type\nThe collection of LoaderQueueItems by url",
            "line": " src/loaders/Loader.js:86"
        },
        {
            "message": "Missing item type\nThe progress callback",
            "line": " src/loaders/LoaderQueueItem.js:50"
        },
        {
            "message": "Missing item type\nThe callback when a load queue item fails",
            "line": " src/loaders/LoaderQueueItem.js:57"
        },
        {
            "message": "Missing item type\nThe callback when a load queue item progresses",
            "line": " src/loaders/LoaderQueueItem.js:64"
        },
        {
            "message": "Missing item type\nThe callback when a load queue item completes",
            "line": " src/loaders/LoaderQueueItem.js:71"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/LoaderQueueItem.js:79"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/LoaderResult.js:46"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/Task.js:38"
        }
    ]
}