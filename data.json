{
    "project": {
        "name": "CloudKidFramework",
        "description": "An application framework for building HTML5 Canvas games and applications",
        "version": "0.0.4",
        "url": "http://github.com/CloudKidStudio/CloudKidFramework"
    },
    "files": {
        "src/data/SavedData.js": {
            "name": "src/data/SavedData.js",
            "modules": {},
            "classes": {
                "SavedData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/Animator.js": {
            "name": "src/displays/createjs/Animator.js",
            "modules": {
                "cloudkid.createjs": 1
            },
            "classes": {
                "createjs.Animator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/AnimatorTimeline.js": {
            "name": "src/displays/createjs/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "createjs.AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/Button.js": {
            "name": "src/displays/createjs/Button.js",
            "modules": {},
            "classes": {
                "createjs.Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/CharacterClip.js": {
            "name": "src/displays/createjs/CharacterClip.js",
            "modules": {},
            "classes": {
                "createjs.CharacterClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/CharacterController.js": {
            "name": "src/displays/createjs/CharacterController.js",
            "modules": {},
            "classes": {
                "createjs.CharacterController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/CreateJSDisplay.js": {
            "name": "src/displays/createjs/CreateJSDisplay.js",
            "modules": {},
            "classes": {
                "createjs.CreateJSDisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/Cutscene.js": {
            "name": "src/displays/createjs/Cutscene.js",
            "modules": {},
            "classes": {
                "createjs.Cutscene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/DisplayAdapter.js": {
            "name": "src/displays/createjs/DisplayAdapter.js",
            "modules": {},
            "classes": {
                "createjs.DisplayAdapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/createjs/DragManager.js": {
            "name": "src/displays/createjs/DragManager.js",
            "modules": {},
            "classes": {
                "createjs.DragManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/generic/GenericDisplay.js": {
            "name": "src/displays/generic/GenericDisplay.js",
            "modules": {},
            "classes": {
                "GenericDisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/Animator.js": {
            "name": "src/displays/pixi/Animator.js",
            "modules": {
                "cloudkid.pixi": 1
            },
            "classes": {
                "pixi.Animator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/AnimatorTimeline.js": {
            "name": "src/displays/pixi/AnimatorTimeline.js",
            "modules": {},
            "classes": {
                "pixi.AnimatorTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/AssetManager.js": {
            "name": "src/displays/pixi/AssetManager.js",
            "modules": {},
            "classes": {
                "pixi.AssetManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/Button.js": {
            "name": "src/displays/pixi/Button.js",
            "modules": {},
            "classes": {
                "pixi.Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/DisplayAdapter.js": {
            "name": "src/displays/pixi/DisplayAdapter.js",
            "modules": {},
            "classes": {
                "pixi.DisplayAdapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/DragManager.js": {
            "name": "src/displays/pixi/DragManager.js",
            "modules": {},
            "classes": {
                "pixi.DragManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/displays/pixi/PixiDisplay.js": {
            "name": "src/displays/pixi/PixiDisplay.js",
            "modules": {},
            "classes": {
                "pixi.PixiDisplay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/events/EventDispatcher.js": {
            "name": "src/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/loaders/CacheManager.js": {
            "name": "src/loaders/CacheManager.js",
            "modules": {},
            "classes": {
                "CacheManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/loaders/LoaderQueueItem.js": {
            "name": "src/loaders/LoaderQueueItem.js",
            "modules": {},
            "classes": {
                "LoaderQueueItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/loaders/MediaLoader.js": {
            "name": "src/loaders/MediaLoader.js",
            "modules": {},
            "classes": {
                "MediaLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/loaders/MediaLoaderResult.js": {
            "name": "src/loaders/MediaLoaderResult.js",
            "modules": {},
            "classes": {
                "MediaLoaderResult": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/Captions.js": {
            "name": "src/media/Captions.js",
            "modules": {},
            "classes": {
                "Captions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/Sound.js": {
            "name": "src/media/Sound.js",
            "modules": {},
            "classes": {
                "Sound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/SoundContext.js": {
            "name": "src/media/SoundContext.js",
            "modules": {},
            "classes": {
                "SoundContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/SoundInstance.js": {
            "name": "src/media/SoundInstance.js",
            "modules": {},
            "classes": {
                "SoundInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/SoundTask.js": {
            "name": "src/media/SoundTask.js",
            "modules": {},
            "classes": {
                "SoundListTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/media/VOPlayer.js": {
            "name": "src/media/VOPlayer.js",
            "modules": {},
            "classes": {
                "VOPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/polyfills/Worker.js": {
            "name": "src/polyfills/Worker.js",
            "modules": {},
            "classes": {
                "Worker": 1,
                "SubWorker": 1,
                "FallbackWorker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/states/BaseState.js": {
            "name": "src/states/BaseState.js",
            "modules": {},
            "classes": {
                "BaseState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/states/StateEvent.js": {
            "name": "src/states/StateEvent.js",
            "modules": {},
            "classes": {
                "StateEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/states/StateManager.js": {
            "name": "src/states/StateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/FunctionTask.js": {
            "name": "src/tasks/FunctionTask.js",
            "modules": {},
            "classes": {
                "FunctionTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/ListTask.js": {
            "name": "src/tasks/ListTask.js",
            "modules": {},
            "classes": {
                "ListTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/LoadTask.js": {
            "name": "src/tasks/LoadTask.js",
            "modules": {},
            "classes": {
                "LoadTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/PixiTask.js": {
            "name": "src/tasks/PixiTask.js",
            "modules": {},
            "classes": {
                "PixiTask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/Task.js": {
            "name": "src/tasks/Task.js",
            "modules": {},
            "classes": {
                "Task": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/TaskEvent.js": {
            "name": "src/tasks/TaskEvent.js",
            "modules": {},
            "classes": {
                "TaskEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tasks/TaskManager.js": {
            "name": "src/tasks/TaskManager.js",
            "modules": {},
            "classes": {
                "TaskManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/Positioner.js": {
            "name": "src/ui/Positioner.js",
            "modules": {},
            "classes": {
                "Positioner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/ScreenSettings.js": {
            "name": "src/ui/ScreenSettings.js",
            "modules": {},
            "classes": {
                "ScreenSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/UIElement.js": {
            "name": "src/ui/UIElement.js",
            "modules": {},
            "classes": {
                "UIElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/UIElementSettings.js": {
            "name": "src/ui/UIElementSettings.js",
            "modules": {},
            "classes": {
                "UIElementSettings": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/UIScaler.js": {
            "name": "src/ui/UIScaler.js",
            "modules": {},
            "classes": {
                "UIScaler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/CombinedCallback.js": {
            "name": "src/utils/CombinedCallback.js",
            "modules": {},
            "classes": {
                "CombinedCallback": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/Debug.js": {
            "name": "src/utils/Debug.js",
            "modules": {},
            "classes": {
                "Debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/DelayedCall.js": {
            "name": "src/utils/DelayedCall.js",
            "modules": {},
            "classes": {
                "DelayedCall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/PageVisibility.js": {
            "name": "src/utils/PageVisibility.js",
            "modules": {},
            "classes": {
                "PageVisibility": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/TimeUtils.js": {
            "name": "src/utils/TimeUtils.js",
            "modules": {},
            "classes": {
                "TimeUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/Translate.js": {
            "name": "src/utils/Translate.js",
            "modules": {},
            "classes": {
                "Translate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/namespace.js": {
            "name": "src/utils/namespace.js",
            "modules": {
                "window": 1
            },
            "classes": {
                "namespace": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Application.js": {
            "name": "src/Application.js",
            "modules": {
                "cloudkid": 1
            },
            "classes": {
                "Application": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "cloudkid": {
            "name": "cloudkid",
            "submodules": {},
            "classes": {
                "SavedData": 1,
                "GenericDisplay": 1,
                "EventDispatcher": 1,
                "CacheManager": 1,
                "LoaderQueueItem": 1,
                "MediaLoader": 1,
                "MediaLoaderResult": 1,
                "Captions": 1,
                "Sound": 1,
                "SoundContext": 1,
                "SoundInstance": 1,
                "SoundListTask": 1,
                "VOPlayer": 1,
                "Worker": 1,
                "SubWorker": 1,
                "FallbackWorker": 1,
                "BaseState": 1,
                "StateEvent": 1,
                "StateManager": 1,
                "FunctionTask": 1,
                "ListTask": 1,
                "LoadTask": 1,
                "PixiTask": 1,
                "Task": 1,
                "TaskEvent": 1,
                "TaskManager": 1,
                "Positioner": 1,
                "ScreenSettings": 1,
                "UIElement": 1,
                "UIElementSettings": 1,
                "UIScaler": 1,
                "CombinedCallback": 1,
                "DelayedCall": 1,
                "PageVisibility": 1,
                "TimeUtils": 1,
                "Translate": 1,
                "Application": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Application.js",
            "line": 6,
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The screen width in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The screen height in pixels",
                    "type": "Number"
                },
                {
                    "name": "ppi",
                    "description": "The screen pixel density (PPI)",
                    "type": "Number"
                }
            ]
        },
        "cloudkid.createjs": {
            "name": "cloudkid.createjs",
            "submodules": {},
            "classes": {
                "createjs.Animator": 1,
                "createjs.AnimatorTimeline": 1,
                "createjs.Button": 1,
                "createjs.CharacterClip": 1,
                "createjs.CharacterController": 1,
                "createjs.CreateJSDisplay": 1,
                "createjs.Cutscene": 1,
                "createjs.DisplayAdapter": 1,
                "createjs.DragManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/displays/createjs/DragManager.js",
            "line": 6
        },
        "cloudkid.pixi": {
            "name": "cloudkid.pixi",
            "submodules": {},
            "classes": {
                "pixi.Animator": 1,
                "pixi.AnimatorTimeline": 1,
                "pixi.AssetManager": 1,
                "pixi.Button": 1,
                "pixi.DisplayAdapter": 1,
                "pixi.DragManager": 1,
                "pixi.PixiDisplay": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 6
        },
        "window": {
            "name": "window",
            "submodules": {},
            "classes": {
                "Debug": 1,
                "namespace": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/utils/namespace.js",
            "line": 4
        }
    },
    "classes": {
        "SavedData": {
            "name": "SavedData",
            "shortname": "SavedData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/data/SavedData.js",
            "line": 6,
            "description": "The SavedData functions use localStorage and sessionStorage, with a cookie fallback."
        },
        "createjs.Animator": {
            "name": "createjs.Animator",
            "shortname": "createjs.Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/Animator.js",
            "line": 10,
            "description": "Animator is a static class designed to provided\nbase animation functionality, using frame labels of MovieClips",
            "static": 1
        },
        "createjs.AnimatorTimeline": {
            "name": "createjs.AnimatorTimeline",
            "shortname": "createjs.AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 6,
            "description": "Animator Timeline is a class designed to provide\nbase animation functionality",
            "is_constructor": 1
        },
        "createjs.Button": {
            "name": "createjs.Button",
            "shortname": "createjs.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/Button.js",
            "line": 6,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both CreateJS and PIXI, but slightly differently in\ninitialization and callbacks. Add event listeners for click and mouseover to know about\nbutton clicks and mouse overs, respectively.",
            "extends": "createjs.Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.\n       If this is an Image or Canvas element, then the button assumes that the image is full width and 3 images\n       tall, in the order (top to bottom) up, over, down. If so, then the properties of imageSettings are ignored.",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true,
                    "props": [
                        {
                            "name": "image",
                            "description": "The image to use for all of the button states.",
                            "type": "Image|HTMLCanvasElement",
                            "optional": true
                        },
                        {
                            "name": "priority",
                            "description": "The state priority order. If omitted, defaults to [\"disabled\", \"down\", \"over\", \"up\"].\n       Previous versions of Button used a hard coded order: [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "up",
                            "description": "The visual information about the up state.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were\n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data\n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The visual information about the over state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were\n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data\n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The visual information about the down state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were\n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data\n       in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The visual information about the disabled state. If omitted, uses the up state.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels were\n       trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override\n       data in the label parameter for this button state only. All values except \"text\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom state found in imageSettings.priority.\n       Any state added this way has a property of the same name added to the button. Examples of previous states that have been\n       moved to this system are \"selected\" and \"highlighted\".",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "src",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "createjs.Rectangle",
                                    "optional": true
                                },
                                {
                                    "name": "trim",
                                    "description": "Trim data about the state, where x & y are how many pixels\n       were trimmed off the left and right, and height & width are the untrimmed size of the button.",
                                    "type": "createjs.Rectangle",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter\n       override data in the label parameter for this button state only. All values except \"text\" from the label parameter may be\n       overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button graphics, in case you want button\n       positioning to not include a highlight glow, or any other reason you would want to offset the button art and label.",
                            "type": "createjs.Point",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "font",
                            "description": "The font name and size to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "The color of the text to use on the label, as createjs.Text expects.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "textBaseline",
                            "description": "The baseline for the label text, as createjs.Text expects.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"middle\""
                        },
                        {
                            "name": "stroke",
                            "description": "The stroke to use for the label text, if desired, as createjs.Text (CloudKid fork only) expects.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "shadow",
                            "description": "A shadow object to apply to the label text.",
                            "type": "createjs.Shadow",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to horizontally center the label on the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to vertically center the label on the button. This may be unreliable -\n       see documentation for createjs.Text.getMeasuredLineHeight().",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "createjs.CharacterClip": {
            "name": "createjs.CharacterClip",
            "shortname": "createjs.CharacterClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/CharacterClip.js",
            "line": 6,
            "description": "CharacterClip is used by the CharacterController class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "event",
                    "description": "Animator event to play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of loops",
                    "type": "Int"
                }
            ]
        },
        "createjs.CharacterController": {
            "name": "createjs.CharacterController",
            "shortname": "createjs.CharacterController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/CharacterController.js",
            "line": 9,
            "description": "Character Controller class is designed to play animated\nsequences on the timeline. This is a flexible way to\nanimate characters on a timeline"
        },
        "createjs.CreateJSDisplay": {
            "name": "createjs.CreateJSDisplay",
            "shortname": "createjs.CreateJSDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 6,
            "description": "CreateJSDisplay is a display plugin for the CloudKid Framework \n\tthat uses the EaselJS library for rendering.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the CreateJS stage.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "stageType",
                            "description": "If the stage should be a normal stage or a SpriteStage (use \"spriteStage\").",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"stage\""
                        },
                        {
                            "name": "clearView",
                            "description": "If the stage should wipe the canvas between renders.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "mouseOverRate",
                            "description": "How many times per second to check for mouseovers. To disable them, use 0 or -1.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ]
        },
        "createjs.Cutscene": {
            "name": "createjs.Cutscene",
            "shortname": "createjs.Cutscene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/Cutscene.js",
            "line": 6,
            "description": "Cutscene is a class for playing a single EaselJS animation synced to a\n\tsingle audio file with cloudkid.Sound, with optional captions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The runtime specific setup data for the cutscene.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "display",
                            "description": "The display or display id of the CreateJSDisplay to draw on.",
                            "type": "String|Display"
                        },
                        {
                            "name": "configUrl",
                            "description": "The url of the json config file describing the cutscene. See the example project.",
                            "type": "String"
                        },
                        {
                            "name": "loadCallback",
                            "description": "A function to call when loading is complete.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceTarg",
                            "description": "A string found in the paths of images that should be replaced with another value.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceVal",
                            "description": "The string to use when replacing options.pathReplaceTarg.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "imageScale",
                            "description": "Scaling to apply to all images loaded for the cutscene.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "captions",
                            "description": "A Captions instance to display captions text on.",
                            "type": "cloudkid.Captions",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "createjs.DisplayAdapter": {
            "name": "createjs.DisplayAdapter",
            "shortname": "createjs.DisplayAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 6,
            "description": "Provide a normalized way to get size, position, scale values\nas well as provide reference for different geometry classes."
        },
        "createjs.DragManager": {
            "name": "createjs.DragManager",
            "shortname": "createjs.DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.createjs",
            "namespace": "",
            "file": "src/displays/createjs/DragManager.js",
            "line": 6,
            "description": "Drag manager is responsible for handling the dragging of stage elements.\nSupports click-n-stick (click to start, move mouse, click to release) and click-n-drag (standard dragging) functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "createjs.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        },
        "GenericDisplay": {
            "name": "GenericDisplay",
            "shortname": "GenericDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 6,
            "description": "GenericDisplay is a display plugin for doing native rendering. This represents\nthe bare minimum needed by the Application to render.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the display.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "contextId",
                            "description": "Valid options are \"2d\" and \"webgl\"",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"2d\""
                        }
                    ]
                }
            ]
        },
        "pixi.Animator": {
            "name": "pixi.Animator",
            "shortname": "pixi.Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/Animator.js",
            "line": 9,
            "description": "Animator for interacting with Spine animations",
            "static": 1
        },
        "pixi.AnimatorTimeline": {
            "name": "pixi.AnimatorTimeline",
            "shortname": "pixi.AnimatorTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 6,
            "description": "Internal Animator class for keeping track of animations. AnimatorTimelines are pooled internally,\nso please only keep references to them while they are actively playing an animation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "clip",
                    "description": "The AnimatorTimeline's clip",
                    "type": "PIXI.MovieClip|Pixi.Spine"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the clip is finished playing",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which the clip should be played",
                    "type": "Int"
                }
            ]
        },
        "pixi.AssetManager": {
            "name": "pixi.AssetManager",
            "shortname": "pixi.AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/AssetManager.js",
            "line": 6,
            "description": "AssetManager is responsible for managing different resolutions of assets and spritesheets\nbased on the resolution of the stage. This is a helpful optimization for PIXI because some low-hardware\ndevices have a problem keeping up with larger images, or just refuse large images entirely.\nThe AssetManager does not load assets itself, or keep track of what is loaded. It merely assists in \nloading the appropriate assets, as well as easily unloading assets when you are done using them."
        },
        "pixi.Button": {
            "name": "pixi.Button",
            "shortname": "pixi.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/Button.js",
            "line": 6,
            "description": "A Multipurpose button class. It is designed to have one image, and an optional text label.\nThe button can be a normal button or a selectable button.\nThe button functions similarly with both CreateJS and PIXI, but slightly differently in\ninitialization and callbacks.\nUse releaseCallback and overCallback to know about button clicks and mouse overs, respectively.",
            "extends": "PIXI.DisplayObjectContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "priority",
                            "description": "The state priority order. If omitted, defaults to [\"disabled\", \"down\", \"over\", \"up\"].\n       Previous versions of Button used a hard coded order: [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "up",
                            "description": "The texture for the up state of the button. This can be either the texture itself,\n       or an object with 'tex' and 'label' properties.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "over",
                            "description": "The texture for the over state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "down",
                            "description": "The texture for the down state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "disabled",
                            "description": "The texture for the disabled state of the button. If omitted, uses the up state.",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The sourceRect for the state within the image.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter override data \n       in the label parameter for this button state only. All values except \"text\" and \"type\" from the label parameter may be overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "<yourCustomState>",
                            "description": "The visual information about a custom state found in imageSettings.priority.\n       Any state added this way has a property of the same name added to the button. Examples of previous states that have been\n       moved to this system are \"selected\" and \"highlighted\".",
                            "type": "Object|PIXI.Texture",
                            "optional": true,
                            "optdefault": "null",
                            "props": [
                                {
                                    "name": "tex",
                                    "description": "The texture for the custom state.",
                                    "type": "PIXI.Texture",
                                    "optional": true
                                },
                                {
                                    "name": "label",
                                    "description": "Label information specific to this state. Properties on this parameter \n       override data in the label parameter for this button state only. All values except \"text\" from the label parameter may be\n       overridden.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "null"
                                }
                            ]
                        },
                        {
                            "name": "origin",
                            "description": "An optional offset for all button graphics, in case you want button \n       positioning to not include a highlight glow, or any other reason you would want to offset the button art and label.",
                            "type": "PIXI.Point",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "scale",
                            "description": "The scale to use for the textures. This allows smaller art assets than the designed size to be used.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null",
                    "props": [
                        {
                            "name": "type",
                            "description": "If label.type is \"bitmap\", then a PIXI.BitmapText text is created, otherwise a PIXI.Text is created for the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "The text to display on the label.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The style of the text field, in the format that PIXI.BitmapText and PIXI.Text expect.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "x",
                            "description": "An x position to place the label text at relative to the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        },
                        {
                            "name": "y",
                            "description": "A y position to place the label text at relative to the button. If omitted,\n       \"center\" is used, which attempts to vertically center the label on the button.",
                            "type": "String|Number",
                            "optional": true,
                            "optdefault": "\"center\""
                        }
                    ]
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "pixi.DisplayAdapter": {
            "name": "pixi.DisplayAdapter",
            "shortname": "pixi.DisplayAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 6,
            "description": "Provide a normalized way to get size, position, scale values\nas well as provide reference for different geometry classes."
        },
        "pixi.DragManager": {
            "name": "pixi.DragManager",
            "shortname": "pixi.DragManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/DragManager.js",
            "line": 6,
            "description": "Drag manager is responsible for handling the dragging of stage elements\nsupports click-n-stick and click-n-drag functionality.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "PIXI.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ]
        },
        "pixi.PixiDisplay": {
            "name": "pixi.PixiDisplay",
            "shortname": "pixi.PixiDisplay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid.pixi",
            "namespace": "",
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 6,
            "description": "PixiDisplay is a display plugin for the CloudKid Framework \n\tthat uses the Pixi library for rendering.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element on the page to draw to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The setup data for the Pixi stage.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "forceContext",
                            "description": "If a specific renderer should be used instead of WebGL \n\t                                            falling back to Canvas. Use \"webgl\" or \"canvas2d\" to specify a renderer.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "clearView",
                            "description": "If the stage should wipe the canvas between renders.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "backgroundColor",
                            "description": "The background color of the stage (if it is not transparent).",
                            "type": "Uint",
                            "optional": true,
                            "optdefault": "0x000000"
                        },
                        {
                            "name": "transparent",
                            "description": "If the stage should be transparent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "antiAlias",
                            "description": "If the WebGL renderer should use anti-aliasing.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "preMultAlpha",
                            "description": "If the WebGL renderer should draw with all images as pre-multiplied alpha.\n\t                                              In most cases, you probably do not want to set this option to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "preserveDrawingBuffer",
                            "description": "Set this to true if you want to call toDataUrl\n\t                                                       on the WebGL rendering context.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/events/EventDispatcher.js",
            "line": 6,
            "description": "The EventDispatcher mirrors the functionality of AS3 and CreateJS's EventDispatcher, \nbut is more robust in terms of inputs for the `on()` and `off()` methods.",
            "is_constructor": 1
        },
        "CacheManager": {
            "name": "CacheManager",
            "shortname": "CacheManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/loaders/CacheManager.js",
            "line": 6,
            "description": "Used for managing the browser cache of loading external elements\ncan easily load version manifest and apply it to the media loader\nsupports cache busting all media load requests\nuses the query string to bust browser versions."
        },
        "LoaderQueueItem": {
            "name": "LoaderQueueItem",
            "shortname": "LoaderQueueItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 6,
            "description": "Represents a single item in the loader queue"
        },
        "MediaLoader": {
            "name": "MediaLoader",
            "shortname": "MediaLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/loaders/MediaLoader.js",
            "line": 6,
            "description": "The MediaLoader is the singleton loader for loading all assets\nincluding images, data, code and sounds. MediaLoader supports cache-busting\nin the browser using dynamic query string parameters."
        },
        "MediaLoaderResult": {
            "name": "MediaLoaderResult",
            "shortname": "MediaLoaderResult",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 6,
            "description": "The return result of the MediaLoader load",
            "is_constructor": 1,
            "params": [
                {
                    "name": "content",
                    "description": "The dynamic content loaded",
                    "type": "*"
                },
                {
                    "name": "url",
                    "description": "The url that was loaded",
                    "type": "String"
                },
                {
                    "name": "loader",
                    "description": "The LoadQueue that performed the load",
                    "type": "createjs.LoadQueue"
                }
            ]
        },
        "Captions": {
            "name": "Captions",
            "shortname": "Captions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/Captions.js",
            "line": 6,
            "description": "A class that creates captioning for multimedia content. Captions are\ncreated from a dictionary of captions and can be played by alias. Captions \nis a singleton class.",
            "example": [
                "\n\t\tvar captionsDictionary = {\n\t\t\t\"Alias1\": [\n\t\t\t\t{\"start\":0, \"end\":2000, \"content\":\"Ohh that looks awesome!\"}\n\t\t\t],\n\t\t\t\"Alias2\": [\n\t\t\t\t{\"start\":0, \"end\":2000, \"content\":\"Love it, absolutely love it!\"}\n\t\t\t]\n\t\t};\n\t\n\t\t// initialize the captions\n\t\tvar captions = new cloudkid.Captions(captionsDictionary);\n\t\tcaptions.play(\"Alias1\");\n\n\t\t// Provide the update to captions\n\t\tApplication.intance.on('up', captions.update.bind(captions));"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "captionDictionary",
                    "description": "The dictionary of captions",
                    "type": "Dictionary",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "field",
                    "description": "An text field to use as the output for this captions object",
                    "type": "createjs.Text",
                    "optional": true,
                    "optdefault": "null"
                }
            ]
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/Sound.js",
            "line": 14,
            "description": "Acts as a wrapper for SoundJS as well as adding lots of other functionality\nfor managing sounds."
        },
        "SoundContext": {
            "name": "SoundContext",
            "shortname": "SoundContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/SoundContext.js",
            "line": 6,
            "description": "A private class that represents a sound context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The name of the sound context.",
                    "type": "String"
                }
            ]
        },
        "SoundInstance": {
            "name": "SoundInstance",
            "shortname": "SoundInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/SoundInstance.js",
            "line": 8,
            "description": "A playing instance of a sound (or promise to play as soon as it loads). These can only\nbe created through cloudkid.Sound.instance.play()."
        },
        "SoundListTask": {
            "name": "SoundListTask",
            "shortname": "SoundListTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/SoundTask.js",
            "line": 11,
            "description": "A task for loading a list of sounds. These can only\nbe created through Sound.instance.createPreloadTask().\nThis class is not created if the Task library is not loaded before the Sound library.",
            "extends": "{cloudkid.Task}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The unique id of this task",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "The collection of sounds",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Completed callback function",
                    "type": "Function"
                }
            ]
        },
        "VOPlayer": {
            "name": "VOPlayer",
            "shortname": "VOPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/media/VOPlayer.js",
            "line": 12,
            "description": "A class for managing audio by only playing one at a time, playing a list, and even\nmanaging captions (CloudKidCaptions library) at the same time.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "useCaptions",
                    "description": "If a cloudkid.Captions object should be created for use \n\t\tor the captions object to use",
                    "type": "bool|cloudkid.Captions",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "Worker": {
            "name": "Worker",
            "shortname": "Worker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/polyfills/Worker.js",
            "line": 12,
            "description": "The Web Workers specification defines an API for spawning background scripts in your web \napplication. Web Workers allow you to do things like fire up long-running scripts to \nhandle computationally intensive tasks, but without blocking the UI or other scripts \nto handle user interactions. Because Workers aren't available on all browsers, we provide\na helpful polyfill for backward compatibility. This worker is designed to run \nasyncronously instead of calling an external file.\n\n\tvar workerCode = \"this.initialVariable = 10;\" +\n\t\"this.onmessage = function(event)\" +\n\t\"{\" +\n\t\t\"var data = event.data;\" +\n\t\t\"var returnVal = this.initialVariable + data.addValue;\" +\n\t\t\"this.postMessage(returnVal);\" +\n\t\"};\";\n\n\t// Create the worker\n\tvar worker = cloudkid.Worker.init(workerCode);\n\tworker.onmessage = function(e) {\n\t\t// e.data is the returnVal\n\t};\n\t\n\t// Start the worker.\n\tworker.postMessage();"
        },
        "SubWorker": {
            "name": "SubWorker",
            "shortname": "SubWorker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/polyfills/Worker.js",
            "line": 90,
            "description": "Internal class that pretends to be a Web Worker's context.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "codeString",
                    "description": "A string to evaluate into worker code.",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "The FallbackWorker that owns this SubWorker.",
                    "type": "FallbackWorker"
                }
            ]
        },
        "FallbackWorker": {
            "name": "FallbackWorker",
            "shortname": "FallbackWorker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/polyfills/Worker.js",
            "line": 129,
            "description": "An internal class that duplicates the Worker API as a fallback when WebWorkers are not supported.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "codeString",
                    "description": "A string to evaluate into worker code.",
                    "type": "String"
                }
            ]
        },
        "BaseState": {
            "name": "BaseState",
            "shortname": "BaseState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/states/BaseState.js",
            "line": 9,
            "description": "Defines the base functionality for a state used by the state manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "panel",
                    "description": "The panel to associate with this panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContainer"
                }
            ]
        },
        "StateEvent": {
            "name": "StateEvent",
            "shortname": "StateEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/states/StateEvent.js",
            "line": 6,
            "description": "A state-related event used by the State Manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "See createjs.Event",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility, default to currentState",
                    "type": "BaseState"
                }
            ]
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/states/StateManager.js",
            "line": 12,
            "description": "The State Manager used for managing the different states of a game or site",
            "is_constructor": 1,
            "params": [
                {
                    "name": "display",
                    "description": "The display on which the transition animation is displayed.",
                    "type": "cloudkid.CreateJSDisplay|cloudkid.PixiDisplay"
                },
                {
                    "name": "transition",
                    "description": "The transition MovieClip to play between transitions",
                    "type": "createjs.MovieClip|PIXI.Spine"
                },
                {
                    "name": "audio",
                    "description": "Data object with aliases and start times (seconds) for transition in, loop and out sounds: {in:{alias:\"myAlias\", start:0.2}}.\n\t\tThese objects are in the format for Animator from CreateJSDisplay or PixiDisplay, so they can be the alias instead of an object.",
                    "type": "Object"
                }
            ]
        },
        "FunctionTask": {
            "name": "FunctionTask",
            "shortname": "FunctionTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/FunctionTask.js",
            "line": 9,
            "description": "A task to do some generic async function task",
            "is_constructor": 1,
            "extends": "Task",
            "params": [
                {
                    "name": "id",
                    "description": "Alias for this task",
                    "type": "String"
                },
                {
                    "name": "serviceCall",
                    "description": "Function the service call",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to the service call",
                    "type": "*"
                }
            ]
        },
        "ListTask": {
            "name": "ListTask",
            "shortname": "ListTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/ListTask.js",
            "line": 12,
            "description": "A task that performs a list of tasks",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for this ListTask",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "The list of tasks",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                }
            ]
        },
        "LoadTask": {
            "name": "LoadTask",
            "shortname": "LoadTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/LoadTask.js",
            "line": 11,
            "description": "Load task is a common type of task used for loading assets\nthrough the MediaLoader",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for the task",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url from which to load the asset",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call once loading is complete",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "Optional call back to get load progress",
                    "type": "Function"
                },
                {
                    "name": "priority",
                    "description": "Media loader priority of the load",
                    "type": "Int"
                },
                {
                    "name": "data",
                    "description": "Opitonal loading options",
                    "type": "*"
                }
            ]
        },
        "PixiTask": {
            "name": "PixiTask",
            "shortname": "PixiTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/PixiTask.js",
            "line": 6,
            "description": "PixiTask loads things through PIXI.AssetLoader for pixi.js. \nThis means textures, spritesheets, and bitmap fonts.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "The urls to load using PIXI.AssetLoader",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the load is completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The optional callback to call each time an item finishes loading",
                    "type": "Function"
                },
                {
                    "name": "generateCanvasTexture=false",
                    "description": "If loaded images should be drawn to a canvas and used from there.",
                    "type": "Boolean"
                }
            ]
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/Task.js",
            "line": 6,
            "description": "A task is used by the Task Manager to do an \nasyncronous task (like loading or playback)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "Alias for the task",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when the task is completed",
                    "type": "Function"
                }
            ]
        },
        "TaskEvent": {
            "name": "TaskEvent",
            "shortname": "TaskEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/TaskEvent.js",
            "line": 6,
            "description": "Task events are used by the task manager to communicate\nwhen tasks change",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "task",
                    "description": "The task this event relates to",
                    "type": "Task"
                },
                {
                    "name": "data",
                    "description": "description",
                    "type": "Object"
                }
            ]
        },
        "TaskManager": {
            "name": "TaskManager",
            "shortname": "TaskManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/tasks/TaskManager.js",
            "line": 9,
            "description": "The task manager is responsible for doing a series\nof asyncronous tasks",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tasks",
                    "description": "The series of tasks to do",
                    "type": "Array"
                }
            ]
        },
        "Positioner": {
            "name": "Positioner",
            "shortname": "Positioner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/ui/Positioner.js",
            "line": 8,
            "description": "Initially layouts all interface elements"
        },
        "ScreenSettings": {
            "name": "ScreenSettings",
            "shortname": "ScreenSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/ui/ScreenSettings.js",
            "line": 6,
            "description": "Object that contains the screen settings to help scaling"
        },
        "UIElement": {
            "name": "UIElement",
            "shortname": "UIElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/ui/UIElement.js",
            "line": 9,
            "description": "A single UI item that needs to be resized"
        },
        "UIElementSettings": {
            "name": "UIElementSettings",
            "shortname": "UIElementSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/ui/UIElementSettings.js",
            "line": 6,
            "description": "The UI Item Settings which is the positioning settings used to adjust each element"
        },
        "UIScaler": {
            "name": "UIScaler",
            "shortname": "UIScaler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/ui/UIScaler.js",
            "line": 12,
            "description": "The UI scale is responsible for scaling UI components\nto help easy the burden of different device aspect ratios",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "The UI display container",
                    "type": "Object"
                },
                {
                    "name": "designedWidth",
                    "description": "The designed width of the UI",
                    "type": "Number"
                },
                {
                    "name": "designedHeight",
                    "description": "The designed height of the UI",
                    "type": "Number"
                },
                {
                    "name": "designedPPI",
                    "description": "The designed PPI of the UI",
                    "type": "Number"
                },
                {
                    "name": "display",
                    "description": "The display to use the UIScaler on",
                    "type": "Display",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ]
        },
        "CombinedCallback": {
            "name": "CombinedCallback",
            "shortname": "CombinedCallback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/utils/CombinedCallback.js",
            "line": 6,
            "description": "A function that is used as a normal callback, but checks an object for a property in order to combine two\ncallbacks into one. For example usage:\n\nvar voPlayer = new cloudkid.VOPlayer();\nvar callback = cloudkid.CombinedCallback.create(myFunc.bind(this), voPlayer, \"playing\", \"_callback\");\nAnimator.play(myClip, \"myAnim\", callback);\n\nIn this example, when Animator calls 'callback', if voPlayer[\"playing\"] is false, 'myFunc' is called immediately.\nIf voPlayer[\"playing\"] is true, then voPlayer[\"_callback\"] is set to 'myFunc' so that it will be called when voPlayer completes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "call",
                    "description": "The callback to call when everything is complete.",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object to check as an additional completion dependency.",
                    "type": "*"
                },
                {
                    "name": "prop",
                    "description": "The property to check on obj. If obj[prop] is false, then it is considered complete.",
                    "type": "String"
                },
                {
                    "name": "callProp",
                    "description": "The property to set on obj if obj[prop] is true when the CombinedCallback is called.",
                    "type": "String"
                }
            ]
        },
        "Debug": {
            "name": "Debug",
            "shortname": "Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "window",
            "namespace": "",
            "file": "src/utils/Debug.js",
            "line": 6,
            "description": "A static closure to provide easy access to the console\nwithout having errors if the console doesn't exist\nto use call: Debug.log('Your log here')",
            "static": 1
        },
        "DelayedCall": {
            "name": "DelayedCall",
            "shortname": "DelayedCall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/utils/DelayedCall.js",
            "line": 8,
            "description": "A class for delaying a call through the Application, instead of relying on setInterval() or setTimeout().",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the delay has completed.",
                    "type": "Function"
                },
                {
                    "name": "delay",
                    "description": "The time to delay the call, in milliseconds.",
                    "type": "Int"
                },
                {
                    "name": "repeat",
                    "description": "If the DelayedCall should automatically repeat itself when completed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "autoDestroy",
                    "description": "If the DelayedCall should clean itself up when completed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "PageVisibility": {
            "name": "PageVisibility",
            "shortname": "PageVisibility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/utils/PageVisibility.js",
            "line": 6,
            "description": "Handle the page visiblity change, if supported. Application uses one of these to\nmonitor page visibility. It is suggested that you listen to \"pause\", \"paused\", \nor \"unpaused\" events on the application instead of using one of these yourself.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "onFocus",
                    "description": "Callback when the page becomes visible",
                    "type": "Function"
                },
                {
                    "name": "onBlur",
                    "description": "Callback when the page loses visibility",
                    "type": "Function"
                }
            ]
        },
        "TimeUtils": {
            "name": "TimeUtils",
            "shortname": "TimeUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/utils/TimeUtils.js",
            "line": 19,
            "description": "A collection of Time related utility functions"
        },
        "Translate": {
            "name": "Translate",
            "shortname": "Translate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/utils/Translate.js",
            "line": 6,
            "description": "Internationalization/translation object with convenient jquery plugin",
            "static": 1
        },
        "namespace": {
            "name": "namespace",
            "shortname": "namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "window",
            "namespace": "",
            "file": "src/utils/namespace.js",
            "line": 4,
            "description": "Static class for namespacing objects and adding\nclasses to it.",
            "static": 1
        },
        "Application": {
            "name": "Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cloudkid",
            "namespace": "",
            "file": "src/Application.js",
            "line": 6,
            "description": "Creates a new application, for example (HappyCamel extends Application)\nmanages displays, update loop controlling, handles resizing\n\n\tvar app = new Application({fps:60, resizeElement:window});",
            "extends": "EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for creating the application",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fps",
                            "description": "The framerate to use for rendering the stage",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "raf",
                            "description": "Use request animation frame",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "versionsFile",
                            "description": "Path to a text file which contains explicit version\n\t\tnumbers for each asset. This is useful for controlling the live browser cache.\n\t\tFor instance, this text file would have an asset on each line followed by a number: \n \t\t`assets/config/config.json 2` this would load `assets/config/config.json?v=2`",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cacheBust",
                            "description": "Override the end-user browser cache by adding \"?v=\" \n\t\tto the end of each file path requested. Use for developmently, debugging only!",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "basePath",
                            "description": "The optional file path to prefix to any relative file requests\n\t\tthis is a great way to load all load requests with a CDN path.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "resizeElement",
                            "description": "The element to resize the canvas to",
                            "type": "String|DOMElement|Window",
                            "optional": true
                        },
                        {
                            "name": "uniformResize",
                            "description": "Whether to resize the displays to the original aspect ratio",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "queryStringParameters",
                            "description": "Parse the query string paramenters as options",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "debug",
                            "description": "Enable the Debugger",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "minLogLevel",
                            "description": "The minimum log level to show debug messages for from 0 (general) to 4 (error)",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "ip",
                            "description": "The host computer for IP remote debugging",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "canvasId",
                            "description": "The default display DOM ID name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "display",
                            "description": "The name of the class to instaniate as the display (e.g. cloudkid.PixiDisplay)",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "displayOptions",
                            "description": "Display-specific options",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/data/SavedData.js",
            "line": 13,
            "class": "SavedData",
            "module": "cloudkid"
        },
        {
            "file": "src/data/SavedData.js",
            "line": 16,
            "class": "SavedData",
            "module": "cloudkid"
        },
        {
            "file": "src/data/SavedData.js",
            "line": 33,
            "description": "Remove a saved variable by name.",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to remove",
                    "type": "String"
                }
            ],
            "class": "SavedData",
            "module": "cloudkid"
        },
        {
            "file": "src/data/SavedData.js",
            "line": 50,
            "description": "Save a variable.",
            "itemtype": "method",
            "name": "write",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the value to save",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to save. This will be run through JSON.stringify().",
                    "type": "Mixed"
                },
                {
                    "name": "tempOnly",
                    "description": "If the value should be saved only in the current browser session.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "SavedData",
            "module": "cloudkid"
        },
        {
            "file": "src/data/SavedData.js",
            "line": 84,
            "description": "Read the value of a saved variable",
            "itemtype": "method",
            "name": "read",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the variable",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value (run through `JSON.parse()`) or null if it doesn't exist",
                "type": "Mixed"
            },
            "class": "SavedData",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 19,
            "description": "The current version of the Animator class",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 28,
            "description": "If we fire debug statements",
            "itemtype": "property",
            "name": "debug",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 37,
            "description": "The instance of cloudkid.Audio or cloudkid.Sound for playing audio along with animations.\nThis MUST be set in order to play synced animations.",
            "itemtype": "property",
            "name": "soundLib",
            "type": "cloudkid.Audio|cloudkid.Sound",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 47,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "cloudkid.Captions",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 55,
            "description": "The collection of timelines",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 63,
            "description": "A collection of timelines for removal - kept out here so it doesn't need to be\nreallocated every frame",
            "itemtype": "property",
            "name": "_removedTimelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 72,
            "itemtype": "property",
            "name": "_timelinesMap",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 79,
            "description": "If the Animator is paused",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 87,
            "description": "An empty object to avoid creating new objects in play()\nwhen an options object is not used for parameters.",
            "itemtype": "property",
            "name": "_optionsHelper",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 96,
            "description": "An object to allow stop() calls to be better differentiated\nfrom animations ending naturally.",
            "itemtype": "property",
            "name": "EXTERNAL_STOP",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 104,
            "description": "Sets the variables of the Animator to their defaults. Use when _timelines is null,\nif the Animator data was cleaned up but was needed again later.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 120,
            "description": "Stops all animations and cleans up the variables used.",
            "itemtype": "method",
            "name": "destroy",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 138,
            "description": "Play an animation for a frame label event",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "startTime",
                            "description": "The time in milliseconds into the animation to start. A value of -1 makes the animation play at a random startTime.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object|String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 223,
            "description": "Play an animation for a frame label event, starting at a random frame within the animation",
            "itemtype": "method",
            "name": "playAtRandomFrame",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate.",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose_stop\").",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The callback function when the animation is done",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "onCompleteParams",
                            "description": "Parameters to pass to onComplete function",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "soundData",
                            "description": "soundData Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n\t\tstart is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "doCancelledCallback",
                            "description": "Should an overridden animation's callback function still run?",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 244,
            "description": "Creates the AnimatorTimeline for a given animation",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to animate",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                },
                {
                    "name": "onComplete",
                    "description": "The function to callback when we're done",
                    "type": "Function"
                },
                {
                    "name": "onCompleteParams",
                    "description": "Parameters to pass to onComplete function",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which to play the animation.",
                    "type": "Number"
                },
                {
                    "name": "soundData",
                    "description": "Data about sound to sync the animation to.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Timeline object",
                "type": "AnimatorTimeline"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 330,
            "description": "Determines if a given instance can be animated by Animator, to allow things that aren't\n\tMovieClips from EaselJS to be animated if they share the same API. Note - 'id' is a property with\n\ta unique value for each createjs.DisplayObject. If a custom object is made that does not inherit from DisplayObject,\n\tit needs to not have an id that is identical to anything from EaselJS.",
            "itemtype": "method",
            "name": "_canAnimate",
            "params": [
                {
                    "name": "instance",
                    "description": "The object to check for animation properties.",
                    "type": "easeljs.MovieClip"
                }
            ],
            "return": {
                "description": "If the instance can be animated or not.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 361,
            "description": "Checks if animation exists",
            "itemtype": "method",
            "name": "_makeTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "The timeline to check",
                    "type": "easeljs.MovieClip"
                },
                {
                    "name": "event",
                    "description": "The frame label event (e.g. \"onClose\" to \"onClose stop\")",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "does this animation exist?",
                "type": "Bool"
            },
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 394,
            "description": "Stop the animation.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "instance",
                    "description": "The MovieClip to stop the action on",
                    "type": "createjs.MovieClip"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we are suppose to do the complete callback when stopping (default is false)",
                    "type": "Bool"
                }
            ],
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 420,
            "description": "Stop all current Animator animations.\nThis is good for cleaning up all animation, as it doesn't do a callback on any of them.",
            "itemtype": "method",
            "name": "stopAll",
            "params": [
                {
                    "name": "container",
                    "description": "Optional - specify a container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 446,
            "description": "Remove a timeline from the stack",
            "itemtype": "method",
            "name": "_remove",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                },
                {
                    "name": "doOnComplete",
                    "description": "If we do the on complete callback",
                    "type": "Bool"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 503,
            "description": "Pause all tweens which have been excuted by Animator.play()",
            "itemtype": "method",
            "name": "pause",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 524,
            "description": "Resumes all tweens executed by the Animator.play()",
            "itemtype": "method",
            "name": "resume",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 546,
            "description": "Pauses or unpauses all timelines that are children of the specified DisplayObjectContainer.",
            "itemtype": "method",
            "name": "pauseInGroup",
            "params": [
                {
                    "name": "paused",
                    "description": "If this should be paused or unpaused",
                    "type": "Bool"
                },
                {
                    "name": "container",
                    "description": "The container to stop timelines contained within",
                    "type": "createjs.Container"
                }
            ],
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 568,
            "description": "Get the timeline object for an instance",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "instance",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "return": {
                "description": "The timeline",
                "type": "AnimatorTimeline"
            },
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 587,
            "description": "Whether the Animator class is currently paused.",
            "itemtype": "method",
            "name": "getPaused",
            "return": {
                "description": "if we're paused or not",
                "type": "Bool"
            },
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 598,
            "description": "Start the updating",
            "itemtype": "method",
            "name": "_startUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 611,
            "description": "Stop the updating",
            "itemtype": "method",
            "name": "_stopUpdate",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 624,
            "description": "The update every frame",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time in milliseconds since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 721,
            "description": "The sound has been started",
            "itemtype": "method",
            "name": "onSoundStarted",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 733,
            "description": "The sound is done",
            "itemtype": "method",
            "name": "onSoundDone",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "AnimatorTimeline"
                }
            ],
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 746,
            "description": "Check to see if we have timeline",
            "itemtype": "method",
            "name": "_hasTimelines",
            "return": {
                "description": "if we have timelines",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Animator.js",
            "line": 760,
            "description": "String representation of this class",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String"
            },
            "static": 1,
            "class": "createjs.Animator",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 18,
            "description": "The event to callback when we're done",
            "itemtype": "event",
            "name": "onComplete",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 25,
            "description": "The parameters to pass when completed",
            "itemtype": "property",
            "name": "onCompleteParams",
            "type": "Array",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 32,
            "description": "The event label",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 39,
            "description": "The instance of the timeline to animate",
            "itemtype": "property",
            "name": "instance",
            "type": "AnimatorTimeline",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 46,
            "description": "The frame number of the first frame",
            "itemtype": "property",
            "name": "firstFrame",
            "type": "Int",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 53,
            "description": "The frame number of the last frame",
            "itemtype": "property",
            "name": "lastFrame",
            "type": "Int",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 60,
            "description": "If the animation loops - determined by looking to see if it ends in \" stop\" or \" loop\"",
            "itemtype": "property",
            "name": "isLooping",
            "type": "Bool",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 67,
            "description": "Ensure we show the last frame before looping",
            "itemtype": "property",
            "name": "isLastFrame",
            "type": "Bool",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 74,
            "description": "length of timeline in frames",
            "itemtype": "property",
            "name": "length",
            "type": "Int",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 81,
            "description": "If this timeline plays captions",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Bool",
            "readonly": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 89,
            "description": "If the timeline is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 97,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 118,
            "description": "The animation start time in seconds on the movieclip's timeline.",
            "itemtype": "property",
            "name": "startTime",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 124,
            "description": "The animation duration in seconds.",
            "itemtype": "property",
            "name": "duration",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 130,
            "description": "The animation speed. Default is 1.",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 136,
            "description": "The position of the animation in seconds.",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 142,
            "description": "Sound alias to sync to during the animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 148,
            "description": "A sound instance object from cloudkid.Sound or cloudkid.Audio, used for tracking sound position.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 154,
            "description": "If the timeline will, but has yet to play a sound.",
            "itemtype": "property",
            "name": "playSound",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 160,
            "description": "The time (seconds) into the animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/AnimatorTimeline.js",
            "line": 166,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "createjs.AnimatorTimeline",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 82,
            "description": "The sprite that is the body of the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "back",
            "type": "createjs.Bitmap",
            "readonly": "",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 90,
            "description": "The text field of the button. The label is centered by both width and height on the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "label",
            "type": "createjs.Text",
            "readonly": "",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 99,
            "description": "Callback for mouse over, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_overCB",
            "type": "Function",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 106,
            "description": "Callback for mouse out, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_outCB",
            "type": "Function",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 113,
            "description": "Callback for mouse down, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_downCB",
            "type": "Function",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 120,
            "description": "Callback for press up, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upCB",
            "type": "Function",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 127,
            "description": "Callback for click, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_clickCB",
            "type": "Function",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 134,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 140,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 148,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 157,
            "description": "The width of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 164,
            "description": "The height of the button art, independent of the scaling of the button itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 171,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "createjs.Point",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 178,
            "description": "An event for when the button is pressed (while enabled).",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_PRESS",
            "type": "String",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 201,
            "description": "Constructor for the button when using CreateJS.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "imageSettings",
                    "description": "See the constructor for more information",
                    "type": "Object|Image|HTMLCanvasElement",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 362,
            "description": "The width of the button, based on the width of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 378,
            "description": "The height of the button, based on the height of back. This value is affected by scale.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 394,
            "description": "Sets the text of the label. This does nothing if the button was not initialized with a label.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "The text to set the label to.",
                    "type": "String"
                }
            ],
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 428,
            "description": "Whether or not the button is enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 465,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 491,
            "description": "Updates back based on the current button state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateState",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 546,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseDown",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 559,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseUp",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 574,
            "description": "The callback for when the button the button is clicked or tapped on. This is\nthe most reliable way of detecting mouse up/touch end events that are on this button\nwhile letting the pressup event handle the mouse up/touch ends on and outside the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onClick",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 586,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOver",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 597,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onMouseOut",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 608,
            "description": "Destroys the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Button.js",
            "line": 628,
            "description": "Generates a desaturated up state as a disabled state, and an update with a solid colored glow for a highlighted state.",
            "itemtype": "method",
            "name": "generateDefaultStates",
            "static": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The image to use for all of the button states, in the standard up/over/down format.",
                    "type": "Image|HTMLCanvasElement"
                },
                {
                    "name": "disabledSettings",
                    "description": "The settings object for the disabled state. If omitted, no disabled state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "saturation",
                            "description": "The saturation adjustment for the disabled state.\n\t\t\t100 is fully saturated, 0 is unchanged, -100 is desaturated.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "brightness",
                            "description": "The brightness adjustment for the disabled state.\n\t\t\t100 is fully bright, 0 is unchanged, -100 is completely dark.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "contrast",
                            "description": "The contrast adjustment for the disabled state.\n\t\t\t100 is full contrast, 0 is unchanged, -100 is no contrast.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "highlightSettings",
                    "description": "The settings object for the highlight state. If omitted, no state is created.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "How many pixels to make the glow, eg 8 for an 8 pixel increase on each side.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "red",
                            "description": "The red value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "green",
                            "description": "The green value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "blue",
                            "description": "The blue value for the glow, from 0 to 255.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "alpha",
                            "description": "The alpha value for the glow, from 0 to 255, with 0 being transparent and 255 fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "255"
                        },
                        {
                            "name": "rgba",
                            "description": "An array of values to use for red, green, blue, and optionally alpha that can be used\n\t\t\tinstead of providing separate properties on highlightSettings.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "createjs.Button",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterClip.js",
            "line": 21,
            "description": "The event to play",
            "itemtype": "property",
            "name": "event",
            "type": "String",
            "class": "createjs.CharacterClip",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterClip.js",
            "line": 28,
            "description": "The number of times to loop",
            "itemtype": "property",
            "name": "loops",
            "type": "Int",
            "class": "createjs.CharacterClip",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterClip.js",
            "line": 35,
            "description": "Initialiaze this character clip",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to play using Animator.play",
                    "type": "String"
                },
                {
                    "name": "loops",
                    "description": "The number of times to loop, default of 0 plays continuously",
                    "type": "Int"
                }
            ],
            "class": "createjs.CharacterClip",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 23,
            "description": "The current stack of animations to play",
            "itemtype": "property",
            "name": "_animationStack",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 31,
            "description": "The currently playing animation",
            "itemtype": "property",
            "name": "_currentAnimation",
            "type": "CharacterClip",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 39,
            "description": "Current number of loops for the current animation",
            "itemtype": "property",
            "name": "_loops",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 47,
            "description": "If the current animation choreographies can't be interrupted",
            "itemtype": "property",
            "name": "_interruptable",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 55,
            "description": "If frame dropping is allowed for this animation set",
            "itemtype": "property",
            "name": "_allowFrameDropping",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 63,
            "description": "The current character",
            "itemtype": "property",
            "name": "_character",
            "type": "createjs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 71,
            "description": "Callback function for playing animation",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 79,
            "description": "If this instance has been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 87,
            "description": "Initiliazes this Character controller",
            "itemtype": "method",
            "name": "initialize",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 97,
            "description": "Set the current character, setting to null clears character",
            "itemtype": "method",
            "name": "setCharacter",
            "params": [
                {
                    "name": "character",
                    "description": "MovieClip",
                    "type": "createjs.MovieClip"
                }
            ],
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 114,
            "description": "If we want to play a static frame",
            "itemtype": "method",
            "name": "gotoFrameAndStop",
            "params": [
                {
                    "name": "event",
                    "description": "The frame label to stop on",
                    "type": "String"
                }
            ],
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 128,
            "description": "Will play a sequence of animations",
            "itemtype": "method",
            "name": "playClips",
            "params": [
                {
                    "name": "clips",
                    "description": "an array of CharacterClip objects",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animations are either done, or\n            have been interrupted. Will pass true is interrupted,\n            false if they completed",
                    "type": "Function"
                },
                {
                    "name": "interruptable",
                    "description": "If calling this can interrupt the current animation(s)",
                    "type": "Bool"
                },
                {
                    "name": "cancelPreviousCallback",
                    "description": "Cancel the callback the last time this was called",
                    "type": "Bool"
                },
                {
                    "name": "allowFrameDropping",
                    "description": "If frame dropping is allowed for this frame, if the Animator is doing frame drop checks",
                    "type": "Bool"
                }
            ],
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 171,
            "description": "Start the next animation in the sequence",
            "itemtype": "method",
            "name": "startNext",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 199,
            "description": "When the animation has completed playing",
            "itemtype": "method",
            "name": "_animationComplete",
            "access": "private",
            "tagname": "",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 225,
            "description": "Clear any animations for the current character",
            "itemtype": "method",
            "name": "clear",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CharacterController.js",
            "line": 243,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "createjs.CharacterController",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 45,
            "description": "The Animator class to use when using this display.",
            "itemtype": "property",
            "name": "Animator",
            "type": "Animator",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 53,
            "description": "The DisplayAdapter class to use when providing standard\nways for accessing properties like position, scale, etc.",
            "itemtype": "property",
            "name": "DisplayAdapter",
            "type": "createjs.DisplayAdapter",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 65,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 73,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 81,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 90,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 99,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "",
            "type": "createjs.Stage|createjs.SpriteStage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 107,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 115,
            "description": "The rate at which EaselJS calculates mouseover events, in times/second.",
            "itemtype": "property",
            "name": "mouseOverRate",
            "type": "Int",
            "access": "public",
            "tagname": "",
            "default": "30",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 123,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 130,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 156,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 163,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 177,
            "description": "Resizes the canvas. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 190,
            "description": "Updates the stage and draws it. This is only called by the Application. \nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                }
            ],
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/CreateJSDisplay.js",
            "line": 204,
            "description": "Destroys the display. This method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "createjs.CreateJSDisplay",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 29,
            "description": "When the cutscene is ready to use",
            "itemtype": "property",
            "name": "isReady",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 36,
            "description": "The framerate the cutscene should play at.",
            "itemtype": "property",
            "name": "framerate",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 43,
            "description": "Reference to the display we are drawing on",
            "itemtype": "property",
            "name": "display",
            "type": "Display",
            "access": "public",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 50,
            "description": "The source url for the config until it is loaded, then the config object.",
            "itemtype": "property",
            "name": "config",
            "type": "String|Object",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 56,
            "description": "The scaling value for all images.",
            "itemtype": "property",
            "name": "imageScale",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 62,
            "description": "A string found in the paths of images that should be replaced with another value.",
            "itemtype": "property",
            "name": "pathReplaceTarg",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 68,
            "description": "The string to use when replacing options.pathReplaceTarg.",
            "itemtype": "property",
            "name": "pathReplaceVal",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 74,
            "description": "The TaskManager used to load up assets.",
            "itemtype": "property",
            "name": "_taskMan",
            "type": "cloudkid.TaskManager",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 80,
            "description": "The time elapsed in seconds.",
            "itemtype": "property",
            "name": "_elapsedTime",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 86,
            "description": "The clip that is being animated.",
            "itemtype": "property",
            "name": "_clip",
            "type": "easeljs.MovieClip",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 92,
            "description": "The sound instance of the playing audio",
            "itemtype": "property",
            "name": "_currentAudioInstance",
            "type": "cloudkid.Sound.soundInst",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 98,
            "description": "If the animation has finished playing.",
            "itemtype": "property",
            "name": "_animFinished",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 104,
            "description": "If the audio has finished playing.",
            "itemtype": "property",
            "name": "_audioFinished",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 110,
            "description": "The Captions object to use to manage captions.",
            "itemtype": "property",
            "name": "_captionsObj",
            "type": "cloudkid.Captions",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 116,
            "description": "The function to call when loading is complete.",
            "itemtype": "property",
            "name": "_loadCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 122,
            "description": "The function to call when playback is complete.",
            "itemtype": "property",
            "name": "_endCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 129,
            "description": "Called from the constructor to complete setup and start loading.",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "options",
                    "description": "The runtime specific setup data for the cutscene.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "display",
                            "description": "The display or display id of the CreateJSDisplay to draw on.",
                            "type": "String|Display"
                        },
                        {
                            "name": "configUrl",
                            "description": "The url of the json config file describing the cutscene. See the example project.",
                            "type": "String"
                        },
                        {
                            "name": "loadCallback",
                            "description": "A function to call when loading is complete.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceTarg",
                            "description": "A string found in the paths of images that should be replaced with another value.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pathReplaceVal",
                            "description": "The string to use when replacing options.pathReplaceTarg.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "imageScale",
                            "description": "Scaling to apply to all images loaded for the cutscene.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "captions",
                            "description": "A Captions instance to display captions text on.",
                            "type": "cloudkid.Captions",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 174,
            "description": "Callback for when the config file is loaded.",
            "itemtype": "method",
            "name": "onConfigLoaded",
            "params": [
                {
                    "name": "result",
                    "description": "The loaded result.",
                    "type": "cloudkid.MediaLoaderResult"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 208,
            "description": "Callback for when the audio has been preloaded.",
            "itemtype": "method",
            "name": "onAudioLoaded",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 218,
            "description": "Callback for when all art assets have been loaded.",
            "itemtype": "method",
            "name": "onArtLoaded",
            "params": [
                {
                    "name": "results",
                    "description": "The loaded results.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 267,
            "description": "Callback for when all loading is complete.",
            "itemtype": "method",
            "name": "onLoadComplete",
            "params": [
                {
                    "name": "evt",
                    "description": "An event",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 303,
            "description": "Listener for when the Application is resized.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The new width of the display.",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The new height of the display.",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 327,
            "description": "Starts playing the cutscene.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when playback is complete.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 347,
            "description": "Callback for when the audio has finished playing.",
            "itemtype": "method",
            "name": "_audioCallback",
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 362,
            "description": "Listener for frame updates.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "Time in milliseconds",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 400,
            "description": "Stops playback of the cutscene.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the end callback should be performed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/Cutscene.js",
            "line": 420,
            "description": "Destroys the cutscene.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "createjs.Cutscene",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 1,
            "modules": "cloudkid.createjs",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 13,
            "description": "The geometry class for Circle",
            "itemtype": "property",
            "name": "Circle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Circle",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 22,
            "description": "The geometry class for Ellipse",
            "itemtype": "property",
            "name": "Ellipse",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Ellipse",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 31,
            "description": "The geometry class for Rectangle",
            "itemtype": "property",
            "name": "Rectangle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Rectangle",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 40,
            "description": "The geometry class for Sector",
            "itemtype": "property",
            "name": "Sector",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Sector",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 49,
            "description": "The geometry class for point",
            "itemtype": "property",
            "name": "Point",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Point",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 58,
            "description": "The geometry class for Polygon",
            "itemtype": "property",
            "name": "Polygon",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "createjs.Polygon",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 67,
            "description": "If the rotation is expressed in radians",
            "itemtype": "property",
            "name": "useRadians",
            "type": "Boolean",
            "readonly": "",
            "static": 1,
            "default": "false",
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 76,
            "description": "Normalize the object scale",
            "itemtype": "method",
            "name": "getScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" to return a specific value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A scale object with x and y keys or a single number if direction is set",
                "type": "Object|Number"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 96,
            "description": "Normalize the object position setting",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "position",
                    "description": "The position object or the value\n \t\tif the direction is set.",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 122,
            "description": "Normalize the object position getting",
            "itemtype": "method",
            "name": "getPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\", default is an object of both",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position as an object with x and y keys if no direction\n\t\tvalue is set, or the value of the specific direction",
                "type": "Object|Number"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 143,
            "description": "Normalize the object scale setting",
            "itemtype": "method",
            "name": "setScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "scale",
                    "description": "The scaling object or scale value for x and y",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" if setting a specific value, default\n \t\tsets both the scale x and scale y.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 166,
            "description": "Set the pivot or registration point of an object",
            "itemtype": "method",
            "name": "setPivot",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "pivot",
                    "description": "The object pivot point or the value if the direction is set",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the pivot point",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y position of the pivot point",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" the value for specific direction, default\n \t\twill set using the object.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 189,
            "description": "Set the hit area of the shape",
            "itemtype": "method",
            "name": "setHitArea",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The createjs Display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "shape",
                    "description": "The geometry object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "createjs.DisplayObject"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DisplayAdapter.js",
            "line": 203,
            "description": "Get the original size of a bitmap",
            "itemtype": "method",
            "name": "getBitmapSize",
            "static": 1,
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap to measure",
                    "type": "createjs.Bitmap"
                }
            ],
            "return": {
                "description": "The width (w) and height (h) of the actual bitmap size",
                "type": "Object"
            },
            "class": "createjs.DisplayAdapter",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 21,
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 24,
            "description": "The object that's being dragged",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "createjs.DisplayObject",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 32,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 40,
            "description": "The position x, y of the mouse down on the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "Object",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 47,
            "description": "The position x, y of the object when interaction with it started.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "Object",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 54,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Bool",
            "default": "true",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 62,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Bool",
            "default": "false",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 71,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Bool",
            "default": "false",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 80,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Bool",
            "default": "false",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 89,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 108,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "CreatejsStage",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 115,
            "description": "The local to global position of the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "createjs.Point",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 122,
            "description": "Callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 129,
            "description": "Callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 136,
            "description": "Callback to test for the start a held drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerHeldDragCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 143,
            "description": "Callback to start a sticky click drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerStickyClickCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 150,
            "description": "Callback when we are done with the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stageMouseUpCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 157,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 164,
            "description": "The function call when the mouse/touch moves",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_updateCallback",
            "type": "Function",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 171,
            "description": "A point for reuse instead of lots of object creation.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_helperPoint",
            "type": "createjs.Point",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 178,
            "description": "Constructor",
            "itemtype": "method",
            "name": "initialize",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "createjs.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 200,
            "description": "Manually starts dragging an object. If a mouse down event is not supplied as the second argument, it \n   defaults to a held drag, that ends as soon as the mouse is released.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 213,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "A mouse down event to listen to to determine what type of drag should be used.",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 269,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "access": "private",
            "tagname": "",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 282,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "The mouse down event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 301,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "access": "private",
            "tagname": "",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 317,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called. Default is false.",
                    "type": "Bool"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 328,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse up event",
                    "type": "createjs.MouseEvent"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Bool"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 351,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "Mouse move event",
                    "type": "createjs.MouseEvent"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 383,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same space as the dragged object.",
                    "type": "createjs.Point"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 451,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on \nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function), _dragMan (cloudkid.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                },
                {
                    "name": "bound",
                    "description": "The rectangle bounds",
                    "type": "createjs.Rectangle"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 482,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "createjs.DisplayObject"
                }
            ],
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 501,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/createjs/DragManager.js",
            "line": 537,
            "class": "createjs.DragManager",
            "module": "cloudkid.createjs"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 26,
            "description": "The Animator class to use when using this display. GenericDisplay\ndoes not have an Animator.\nThe CloudKidStates library uses this to determine what animator to use\nwhen playing transition animations.",
            "itemtype": "property",
            "name": "Animator",
            "type": "Animator",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "default": "null",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 41,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 49,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 57,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 66,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 75,
            "description": "The main rendering context, typically either `CanvasRenderingContext2d` \nor `WebGLRenderingContext`",
            "itemtype": "property",
            "name": "",
            "type": "RenderingContext",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 84,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 92,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 99,
            "description": "If input is enabled on the stage for this display. The default is true.\nWithout a rendering library, this does not actually have an effect.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 113,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 120,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 134,
            "description": "Resizes the canvas. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 147,
            "description": "Updates the stage and draws it. This is only called by the Application. \nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                }
            ],
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/generic/GenericDisplay.js",
            "line": 159,
            "description": "Destroys the display. This method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "GenericDisplay",
            "module": "cloudkid"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 16,
            "description": "The collection of AnimatorTimelines that are playing",
            "itemtype": "property",
            "name": "_timelines",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 23,
            "description": "The number of animations",
            "itemtype": "property",
            "name": "_numAnims",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 31,
            "description": "Stored collection of AnimatorTimelines. This is internal to Animator and can't be accessed externally.",
            "itemtype": "property",
            "name": "_animPool",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 39,
            "description": "The instance of cloudkid.Audio or cloudkid.Sound for playing audio along with animations.",
            "itemtype": "property",
            "name": "soundLib",
            "type": "cloudkid.Audio|cloudkid.Sound",
            "access": "public",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 47,
            "description": "The global captions object to use with animator",
            "itemtype": "property",
            "name": "captions",
            "type": "Captions",
            "access": "public",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 54,
            "description": "Initializes the singleton instance of Animator.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 65,
            "description": "Play a specified animation",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "clip",
                    "description": "The clip to play",
                    "type": "PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "anim",
                    "description": "Depending on the type of clip, this could be one of several things.\n\nIf animating a MovieClip, this should be the array of Textures that is the animation (or null to use the existing array on the clip).\n\nIf animating a Spine object:\n- If anim is a string it will play that single animation by name.\n- If anim is an array of strings it will play as a list of animations (only the last one can loop).\n- If anim is an array of objects (with anim, loop, and speed properties) then multiple animations will be played simultaneously.\n   When multiple animations play, animation stops when any non looping animation ends.",
                    "type": "String|Array"
                },
                {
                    "name": "options",
                    "description": "The object of optional parameters or onComplete callback function",
                    "type": "Object|function",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "The function to call once the animation has finished",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "loop",
                            "description": "Whether the animation should loop",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "speed",
                            "description": "The speed at which to play the animation",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "startTime",
                            "description": "The time in milliseconds into the animation to start.",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "soundData",
                            "description": "Data about a sound to sync the animation to, as an alias or in the format {alias:\"MyAlias\", start:0}.\n       start is the seconds into the animation to start playing the sound. If it is omitted or soundData is a string, it defaults to 0.",
                            "type": "Object|String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The timeline object",
                "type": "pixi.AnimatorTimeline"
            },
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 213,
            "description": "Checks to see if a Spine animation includes a given animation alias",
            "itemtype": "method",
            "name": "instanceHasAnimation",
            "params": [
                {
                    "name": "instance",
                    "description": "The animation to search. This has to be a Spine animation.",
                    "type": "PIXI.Spine"
                },
                {
                    "name": "anim",
                    "description": "The animation alias to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the animation is found",
                "type": "Boolean"
            },
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 228,
            "description": "Checks to see if a Spine animation includes a given animation alias",
            "itemtype": "method",
            "name": "checkSpineForAnimation",
            "params": [
                {
                    "name": "clip",
                    "description": "The spine to search",
                    "type": "PIXI.Spine"
                },
                {
                    "name": "anim",
                    "description": "The animation alias to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if the animation is found",
                "type": "Boolean"
            },
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 241,
            "description": "Stop a clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "clip",
                    "description": "The clip to stop",
                    "type": "PIXI.MovieClip|PIXI.Spine"
                },
                {
                    "name": "doCallback",
                    "description": "Whether the animations callback should be run",
                    "type": "Bool"
                }
            ],
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 268,
            "description": "Stops all current animations",
            "itemtype": "method",
            "name": "stop",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 287,
            "description": "Put an AnimatorTimeline back into the general pool after it's done playing\nor has been manually stopped",
            "itemtype": "method",
            "name": "_repool",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "pixi.AnimatorTimeline"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 306,
            "description": "Update each frame",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time since the last frame",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 423,
            "description": "Called when a movie clip is done playing, calls the AnimatorTimeline's\ncallback if it has one",
            "itemtype": "method",
            "name": "_onMovieClipDone",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "pixi.AnimatorTimeline"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Animator.js",
            "line": 452,
            "description": "Destroy this",
            "itemtype": "method",
            "name": "destroy",
            "class": "pixi.Animator",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 26,
            "description": "Initialize the AnimatorTimeline",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "clip",
                    "description": "The AnimatorTimeline's clip",
                    "type": "PIXI.MovieClip|Pixi.Spine"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the clip is finished playing",
                    "type": "Function"
                },
                {
                    "name": "speed",
                    "description": "The speed at which the clip should be played",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Animator.AnimatorTimeline"
            },
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 37,
            "description": "The clip for this AnimTimeLine",
            "itemtype": "property",
            "name": "clip",
            "type": "PIXI.MovieClip|PIXI.Spine",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 44,
            "description": "Whether the clip is a PIXI.Spine",
            "itemtype": "property",
            "name": "isSpine",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 51,
            "description": "The function to call when the clip is finished playing",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 58,
            "description": "The speed at which the clip should be played",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 65,
            "itemtype": "property",
            "name": "spineStates",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 71,
            "description": "Not used by Animator, but potentially useful for other code to keep track of what type of animation is being played",
            "itemtype": "property",
            "name": "loop",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 78,
            "description": "The position of the animation in seconds",
            "itemtype": "property",
            "name": "time",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 85,
            "description": "Sound alias to sync to during the animation.",
            "itemtype": "property",
            "name": "soundAlias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 92,
            "description": "A sound instance object from cloudkid.Sound or cloudkid.Audio, used for tracking sound position.",
            "itemtype": "property",
            "name": "soundInst",
            "type": "Object",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 99,
            "description": "If the timeline will, but has yet to, play a sound",
            "itemtype": "property",
            "name": "playSound",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 106,
            "description": "The time (seconds) into the animation that the sound starts.",
            "itemtype": "property",
            "name": "soundStart",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 113,
            "description": "The time (seconds) into the animation that the sound ends",
            "itemtype": "property",
            "name": "soundEnd",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 120,
            "description": "If this timeline plays captions",
            "itemtype": "property",
            "name": "useCaptions",
            "type": "Bool",
            "readonly": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 128,
            "description": "If this animation is paused.",
            "itemtype": "property",
            "name": "_paused",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AnimatorTimeline.js",
            "line": 138,
            "description": "Sets and gets the animation's paused status.",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "pixi.AnimatorTimeline",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 17,
            "description": "Dictionary of scales by asset id. Use this to return your asset to normal size.\nAssets are only added to this dictionary after a url has been retrieved with getUrl().",
            "itemtype": "property",
            "name": "scales",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 26,
            "description": "The available size definitions, e.g., {\"maxSize\":400, \"order\": [\"tiny\", \"sd\"]}",
            "itemtype": "property",
            "name": "sizes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 34,
            "description": "Dictionary of assets by asset id",
            "itemtype": "property",
            "name": "assets",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 42,
            "description": "The cache of asset url paths",
            "itemtype": "property",
            "name": "assetUrlCache",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 50,
            "description": "The scaling value for each asset size id, e.g., {\"sd\" : 1, \"tiny\" : 2}",
            "itemtype": "property",
            "name": "scales",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 58,
            "description": "The paths to each resolution folder, e.g., {\"sd\":\"images/sd/\", \"tiny\":\"images/tiny/\"}",
            "itemtype": "property",
            "name": "paths",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 66,
            "description": "The collection of perferred size to load",
            "itemtype": "property",
            "name": "sizeOrder",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 74,
            "description": "If we should use low hardware, if we know we're on a slow device",
            "itemtype": "property",
            "name": "lowHW",
            "type": "Boolean",
            "static": 1,
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 81,
            "description": "Initialize the asset manager. The asset manager is capable of taking different paths for\neach size of image as well as an animation file path for Spine animations. Image assets do not\nhave to exist in each size. Fonts are marked for unloading purposes. Example config file:\n\n\t\t\t{\n\t\t\t\t\"path\": {\n\t\t\t\t\t\"sd\": \"images/sd/\",\n\t\t\t\t\t\"tiny\": \"images/tiny/\",\n\t\t\t\t\t\"anim\": \"anims/\"\n\t\t\t\t},\n\t\t\t\t\"scale\": {\n\t\t\t\t\t\"sd\": 1,\n\t\t\t\t\t\"tiny\": 2\n\t\t\t\t},\n\t\t\t\t\"sizing\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"maxSize\": 400,\n\t\t\t\t\t\t\"order\": [\n\t\t\t\t\t\t\t\"tiny\",\n\t\t\t\t\t\t\t\"sd\"\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"maxSize\": 10000,\n\t\t\t\t\t\t\"order\": [\n\t\t\t\t\t\t\t\"sd\",\n\t\t\t\t\t\t\t\"tiny\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"assets\": {\n\t\t\t\t\t\"transition\": {\n\t\t\t\t\t\t\"src\": \"transition.json\",\n\t\t\t\t\t\t\"anim\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"TransitionSheet\": {\n\t\t\t\t\t\t\"src\": \"ui/TransitionSheet.json\",\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":true\n\t\t\t\t\t},\n\t\t\t\t\t\"FoodTruck_Title\": {\n\t\t\t\t\t\t\"src\": \"backgrounds/FoodTruck_Title.jpg\",\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":true\n\t\t\t\t\t},\n\t\t\t\t\t\"StartButton\": {\n\t\t\t\t\t\t\"src\": \"ui/StartButton.png\",\n\t\t\t\t\t\t\"sd\":true,\n\t\t\t\t\t\t\"tiny\":false\n\t\t\t\t\t},\n\t\t\t        \"LevelTitleFont\": {\n\t\t\t\t\t\t\"src\": \"ui/LevelTitleFont.xml\",\n\t\t\t\t\t\t\"sd\": true,\n\t\t\t\t\t\t\"tiny\": false,\n\t\t\t\t\t\t\"isFont\": true\n\t\t\t\t\t}\n      \t\t}",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "The configuration file which contains keys for \"path\", \"scale\", \"sizing\", \"assets\"",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "The stage width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The stage height",
                    "type": "Number"
                }
            ],
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 157,
            "description": "Get the alias of the preferred size to use",
            "itemtype": "method",
            "name": "getPreferredSize",
            "static": 1,
            "return": {
                "description": "The alias for the preferred size",
                "type": "String"
            },
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 168,
            "description": "Get the preferred scale amount",
            "itemtype": "method",
            "name": "getPreferredScale",
            "static": 1,
            "return": {
                "description": "The scale amount associated with the preferred size",
                "type": "Number"
            },
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 179,
            "description": "Pick the preferred scale based on the screen resolution",
            "itemtype": "method",
            "name": "pickScale",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The stage width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The stage height",
                    "type": "Number"
                }
            ],
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 201,
            "description": "Get a asset url by asset id",
            "itemtype": "method",
            "name": "getUrl",
            "static": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "The unique asset id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The url of the asset at the appropriate size."
            },
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 243,
            "description": "Unload an asset or list of assets.",
            "itemtype": "method",
            "name": "unload",
            "static": 1,
            "params": [
                {
                    "name": "assetOrAsset",
                    "description": "The collection of asset ids or single asset id",
                    "type": "Array|String"
                }
            ],
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 265,
            "description": "Unload an asset",
            "itemtype": "method",
            "name": "unloadAsset",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "asset",
                    "description": "The asset id to unload",
                    "type": "String"
                }
            ],
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/AssetManager.js",
            "line": 289,
            "description": "Assemble a dictionary of Texture arrays representing animations from the PixiJS texture cache.\nExample of a getAnims() call:\n\n\t\t\tvar animationDictionary = AssetManager.getAnims(\n\t\t\t\t{\n\t\t\t\t\t\"bobIdleHappy\":{\"name\":\"bob_idle_happy#\", \"numberMin\":1, \"numberMax\":139},\n\t\t\t\t\t\"bobIdleNeutral\":{\"name\":\"bob_idle_neutral#\", \"numberMin\":1, \"numberMax\":140},\n\t\t\t\t\t\"bobIdleMad\":{\"name\":\"bob_idle_mad#\", \"numberMin\":1, \"numberMax\":140},\n\t\t\t\t\t\"bobPos\":{\"name\":\"bob_react_pos#\", \"numberMin\":1, \"numberMax\":23},\n\t\t\t\t\t\"bobNeg\":{\"name\":\"bob_react_neg#\", \"numberMin\":1, \"numberMax\":31},\n\t\t\t\t},\n\t\t\t\t4);",
            "itemtype": "method",
            "name": "getAnims",
            "static": 1,
            "params": [
                {
                    "name": "anims",
                    "description": "The dictionary of animation assets",
                    "type": "Object"
                },
                {
                    "name": "maxDigits",
                    "description": "Maximum number of digits, like 4 for an animation exported as anim_0001.png",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "outObj",
                    "description": "If already using an return object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An collection of PIXI.Textures for each animation id suitable for use in PIXI.MovieClip",
                "type": "Object"
            },
            "class": "pixi.AssetManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 81,
            "description": "The function that should be called when the button is released.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "releaseCallback",
            "type": "Function",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 88,
            "description": "The function that should be called when the button is moused over.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "overCallback",
            "type": "Function",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 95,
            "description": "The function that should be called when mouse leaves the button.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "outCallback",
            "type": "Function",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 102,
            "description": "A dictionary of state booleans, keyed by state name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateFlags",
            "type": "Object",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 108,
            "description": "An array of state names (Strings), in their order of priority.\nThe standard order previously was [\"highlighted\", \"disabled\", \"down\", \"over\", \"selected\", \"up\"].",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_statePriority",
            "type": "Array",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 116,
            "description": "A dictionary of state graphic data, keyed by state name.\nEach object contains the sourceRect (src) and optionally 'trim', another Rectangle.\nAdditionally, each object will contain a 'label' object if the button has a text label.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stateData",
            "type": "Object",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 125,
            "description": "The current style for the label, to avoid setting this if it is unchanged.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentLabelStyle",
            "type": "Object",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 132,
            "description": "An offset to button positioning, generally used to adjust for a highlight around the button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_offset",
            "type": "PIXI.Point",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 168,
            "description": "Callback for mouse up outside, bound to this button.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_upOutCB",
            "type": "Function",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 204,
            "description": "Constructor for the button when using PIXI.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "imageSettings",
                    "description": "Information about the art to be used for button states, as well as if the button is selectable or not.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "label",
                    "description": "Information about the text label on the button. Omitting this makes the button not use a label.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "enabled",
                    "description": "Whether or not the button is initially enabled.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 470,
            "description": "Adds a property to the button. Setting the property sets the value in\n_stateFlags and calls _updateState().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "The property name to add to the button.",
                    "type": "String"
                }
            ],
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 576,
            "description": "The callback for when the button is moused over.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onOver",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 589,
            "description": "The callback for when the mouse leaves the button area.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onOut",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 602,
            "description": "The callback for when the button receives a mouse down event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onDown",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 617,
            "description": "The callback for when the button for when the mouse/touch is released on the button\n- only when the button was held down initially.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onUp",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/Button.js",
            "line": 635,
            "description": "The callback for when the mouse/touch is released outside the button when the button was held down.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onUpOutside",
            "class": "pixi.Button",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 1,
            "modules": "cloudkid.pixi",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 13,
            "description": "The geometry class for Circle",
            "itemtype": "property",
            "name": "Circle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Circle",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 22,
            "description": "The geometry class for Ellipse",
            "itemtype": "property",
            "name": "Ellipse",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Ellipse",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 31,
            "description": "The geometry class for Rectangle",
            "itemtype": "property",
            "name": "Rectangle",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Rectangle",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 40,
            "description": "The geometry class for Sector",
            "itemtype": "property",
            "name": "Sector",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Sector",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 49,
            "description": "The geometry class for point",
            "itemtype": "property",
            "name": "Point",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Point",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 58,
            "description": "The geometry class for Polygon",
            "itemtype": "property",
            "name": "Polygon",
            "type": "Function",
            "readonly": "",
            "static": 1,
            "default": "PIXI.Polygon",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 67,
            "description": "If the rotation is expressed in radians",
            "itemtype": "property",
            "name": "useRadians",
            "type": "Boolean",
            "readonly": "",
            "static": 1,
            "default": "true",
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 76,
            "description": "Normalize the object scale",
            "itemtype": "method",
            "name": "getScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" to return a specific value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A scale object with x and y keys or a single number if direction is set",
                "type": "Object|Number"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 93,
            "description": "Normalize the object position setting",
            "itemtype": "method",
            "name": "setPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "position",
                    "description": "The position object or the value\n \t\tif the direction is set.",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" value",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 119,
            "description": "Normalize the object position getting",
            "itemtype": "method",
            "name": "getPosition",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\", default is an object of both",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The position as an object with x and y keys if no direction\n\t\tvalue is set, or the value of the specific direction",
                "type": "Object|Number"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 137,
            "description": "Normalize the object scale setting",
            "itemtype": "method",
            "name": "setScale",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "scale",
                    "description": "The scaling object or scale value for x and y",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" if setting a specific value, default\n \t\tsets both the scale x and scale y.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 160,
            "description": "Set the pivot or registration point of an object",
            "itemtype": "method",
            "name": "setPivot",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "pivot",
                    "description": "The object pivot point or the value if the direction is set",
                    "type": "Object|Number",
                    "props": [
                        {
                            "name": "x",
                            "description": "The x position of the pivot point",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "The y position of the pivot point",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "direction",
                    "description": "Either \"x\" or \"y\" the value for specific direction, default\n \t\twill set using the object.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 182,
            "description": "Set the hit area of the shape",
            "itemtype": "method",
            "name": "setHitArea",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The PIXI Display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "shape",
                    "description": "The geometry object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return the object for chaining",
                "type": "PIXI.DisplayObject"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DisplayAdapter.js",
            "line": 196,
            "description": "Get the original size of a bitmap",
            "itemtype": "method",
            "name": "getBitmapSize",
            "static": 1,
            "params": [
                {
                    "name": "bitmap",
                    "description": "The bitmap to measure",
                    "type": "PIXI.Bitmap"
                }
            ],
            "return": {
                "description": "The width (w) and height (h) of the actual bitmap size",
                "type": "Object"
            },
            "class": "pixi.DisplayAdapter",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 21,
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 24,
            "description": "The object that's being dragged",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "draggedObj",
            "type": "PIXI.DisplayObject",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 32,
            "description": "The radius in pixel to allow for dragging, or else does sticky click",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dragStartThreshold",
            "default": "20",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 40,
            "description": "The position x, y of the mouse down on the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownStagePos",
            "type": "PIXI.Point",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 47,
            "description": "The position x, y of the object when interaction with it started.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "mouseDownObjPos",
            "type": "PIXI.Point",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 54,
            "description": "Is the move touch based",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isTouchMove",
            "type": "Bool",
            "default": "false",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 63,
            "description": "Is the drag being held on mouse down (not sticky clicking)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isHeldDrag",
            "type": "Bool",
            "default": "false",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 72,
            "description": "Is the drag a sticky clicking (click on a item, then mouse the mouse)",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "isStickyClick",
            "type": "Bool",
            "default": "false",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 81,
            "description": "If sticky click dragging is allowed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "allowStickyClick",
            "type": "Bool",
            "default": "true",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 89,
            "description": "Settings for snapping.\n\n Format for snapping to a list of points:\n\t{\n\t\tmode:\"points\",\n\t\tdist:20,//snap when within 20 pixels/units\n\t\tpoints:[\n\t\t\t{ x: 20, y:30 },\n\t\t\t{ x: 50, y:10 }\n\t\t]\n\t}",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "snapSettings",
            "type": "Object",
            "default": "null",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 108,
            "description": "Reference to the stage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_theStage",
            "type": "PIXI.Stage",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 115,
            "description": "The local to global position of the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragOffset",
            "type": "PIXI.Point",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 122,
            "description": "External callback when we start dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragStartCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 129,
            "description": "External callback when we are done dragging",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_dragEndCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 136,
            "description": "Callback to test for the start a held drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerHeldDragCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 143,
            "description": "Callback to start a sticky click drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_triggerStickyClickCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 150,
            "description": "Callback when we are done with the drag",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_stageMouseUpCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 157,
            "description": "The function call when the mouse/touch moves",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_updateCallback",
            "type": "Function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 164,
            "description": "The collection of draggable objects",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_draggableObjects",
            "type": "Array",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 176,
            "description": "Constructor",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "stage",
                    "description": "The stage that this DragManager is monitoring.",
                    "type": "PIXI.Stage"
                },
                {
                    "name": "startCallback",
                    "description": "The callback when when starting",
                    "type": "Function"
                },
                {
                    "name": "endCallback",
                    "description": "The callback when ending",
                    "type": "Function"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 198,
            "description": "Manually starts dragging an object. If a mouse down event is not supplied as the second argument, it \n   defaults to a held drag, that ends as soon as the mouse is released.",
            "itemtype": "method",
            "name": "startDrag",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "interactionData",
                    "description": "The interaction data about the input event that triggered this.",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 211,
            "description": "Mouse down on an obmect",
            "itemtype": "method",
            "name": "_objMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The type of input that triggered this call - either TYPE_MOUSE or TYPE_TOUCH.",
                    "type": "Int"
                },
                {
                    "name": "object",
                    "description": "The object that should be dragged.",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 253,
            "description": "Start the sticky click",
            "itemtype": "method",
            "name": "_triggerStickyClick",
            "access": "private",
            "tagname": "",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 266,
            "description": "Start hold dragging",
            "itemtype": "method",
            "name": "_triggerHeldDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "interactionData",
                    "description": "The ineraction data about the moved mouse",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 285,
            "description": "Internal start dragging on the stage",
            "itemtype": "method",
            "name": "_startDrag",
            "access": "private",
            "tagname": "",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 299,
            "description": "Stops dragging the currently dragged object.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopDrag",
            "params": [
                {
                    "name": "doCallback",
                    "description": "If the drag end callback should be called. Default is false.",
                    "type": "Bool"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 310,
            "description": "Internal stop dragging on the stage",
            "itemtype": "method",
            "name": "_stopDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse up event",
                    "type": "Event"
                },
                {
                    "name": "doCallback",
                    "description": "If we should do the callback",
                    "type": "Bool"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 333,
            "description": "Update the object position based on the mouse",
            "itemtype": "method",
            "name": "_updateObjPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "interactionData",
                    "description": "Mouse move event",
                    "type": "PIXI.InteractionData"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 369,
            "description": "Handles snapping the dragged object to the nearest among a list of points",
            "itemtype": "method",
            "name": "_handlePointSnap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "localMousePos",
                    "description": "The mouse position in the same space as the dragged object.",
                    "type": "createjs.Point"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 411,
            "description": "Simple clamp function",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 438,
            "description": "Adds properties and functions to the object - use enableDrag() and disableDrag() on \nobjects to enable/disable them (they start out disabled). Properties added to objects:\n_dragBounds (Rectangle), _onMouseDownListener (Function), _dragMan (cloudkid.DragManager) reference to the DragManager\nthese will override any existing properties of the same name",
            "itemtype": "method",
            "name": "addObject",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "PIXI.DisplayObject"
                },
                {
                    "name": "bound",
                    "description": "The rectangle bounds",
                    "type": "PIXI.Rectangle"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 472,
            "description": "Removes properties and functions added by addObject().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The display object",
                    "type": "PIXI.DisplayObject"
                }
            ],
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 494,
            "description": "Destroy the manager",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/DragManager.js",
            "line": 526,
            "class": "pixi.DragManager",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 82,
            "description": "The Animator class to use when using this display.",
            "itemtype": "property",
            "name": "Animator",
            "type": "Animator",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 90,
            "description": "The DisplayAdapter class to use when providing standard\nways for accessing properties like position, scale, etc.",
            "itemtype": "property",
            "name": "DisplayAdapter",
            "type": "pixi.DisplayAdapter",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 102,
            "description": "the canvas managed by this display",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMElement",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 110,
            "description": "The DOM id for the canvas",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 118,
            "description": "Convenience method for getting the width of the canvas element\nwould be the same thing as canvas.width",
            "itemtype": "property",
            "name": "width",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 127,
            "description": "Convenience method for getting the height of the canvas element\nwould be the same thing as canvas.height",
            "itemtype": "property",
            "name": "height",
            "type": "Int",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 136,
            "description": "The rendering library's stage element, the root display object",
            "itemtype": "property",
            "name": "",
            "type": "PIXI.Stage",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 144,
            "description": "The Pixi renderer.",
            "itemtype": "property",
            "name": "",
            "type": "PIXI.CanvasRenderer|PIXI.WebGLRenderer",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 152,
            "description": "If Pixi is being rendered with WebGL.",
            "itemtype": "property",
            "name": "",
            "type": "Boolean",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 160,
            "description": "If rendering is paused on this display only. Pausing all displays can be done\nusing Application.paused setter.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 168,
            "description": "If input is enabled on the stage.",
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 175,
            "description": "If input is enabled on the stage for this display. The default is true.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 199,
            "description": "If the display is visible.",
            "itemtype": "property",
            "name": "_visible",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 206,
            "description": "If the display is visible, using \"display: none\" css on the canvas. Invisible displays won't render.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "access": "public",
            "tagname": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 220,
            "description": "Resizes the canvas and the renderer. This is only called by the Application.",
            "itemtype": "method",
            "name": "resize",
            "internal": "",
            "params": [
                {
                    "name": "width",
                    "description": "The width that the display should be",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height that the display should be",
                    "type": "Int"
                }
            ],
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 234,
            "description": "Updates the stage and draws it. This is only called by the Application.\nThis method does nothing if paused is true or visible is false.",
            "itemtype": "method",
            "name": "render",
            "internal": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/displays/pixi/PixiDisplay.js",
            "line": 248,
            "description": "Destroys the display. This method is called by the Application and should \nnot be called directly, use Application.removeDisplay(id). \nThe stage recursively removes all display objects here.",
            "itemtype": "method",
            "name": "destroy",
            "internal": "",
            "class": "pixi.PixiDisplay",
            "module": "cloudkid.pixi"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 18,
            "description": "The collection of listeners",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 25,
            "description": "Dispatch an event",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The event string name,",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "Additional parameters for the listener functions.",
                    "type": "*"
                }
            ],
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 51,
            "description": "Add an event listener. The parameters for the listener functions depend on the event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "The type of event (can be multiple events separated by spaces), \n        or a map of events to handlers",
                    "type": "String|object"
                },
                {
                    "name": "callback",
                    "description": "The callback function when event is fired or an array of callbacks.",
                    "type": "Function|Array*"
                }
            ],
            "return": {
                "description": "Return this EventDispatcher for chaining calls.",
                "type": "EventDispatcher"
            },
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 99,
            "description": "Remove the event listener",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "The type of event string separated by spaces, if no name is specifed remove all listeners.",
                    "type": "String*"
                },
                {
                    "name": "callback",
                    "description": "The listener function or collection of callback functions",
                    "type": "Function|Array*"
                }
            ],
            "return": {
                "description": "Return this EventDispatcher for chaining calls.",
                "type": "EventDispatcher"
            },
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 148,
            "description": "Checks if the EventDispatcher has a specific listener.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the single event type to check for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function to check for",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "If the EventDispatcher has the specified listener.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 165,
            "description": "Return type of the value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The type",
                "type": "String"
            },
            "class": "EventDispatcher",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 19,
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 22,
            "description": "The collection of version numbers",
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_versions",
            "type": "Dictionary",
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 29,
            "description": "If we are suppose to cache bust every file",
            "itemtype": "property",
            "name": "cacheBust",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "default": "false",
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 37,
            "description": "The constructor for the Cache manager",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "name": "initialize",
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 56,
            "description": "Destroy the cache manager, don't use after this",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 66,
            "description": "Add the versions",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addVersionsFile",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the versions file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback when the url has been laoded",
                    "type": "Function"
                },
                {
                    "name": "baseUrl",
                    "description": "A base url to prepend all lines of the file",
                    "type": "String"
                }
            ],
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 124,
            "description": "Add a version number for a file",
            "itemtype": "method",
            "name": "addVersion",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url of the object",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "Version number or has of file",
                    "type": "String"
                }
            ],
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 138,
            "description": "Search for a version number by url",
            "itemtype": "method",
            "name": "_getVersionByUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The url to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The version number as a string or null",
                "type": "String"
            },
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/CacheManager.js",
            "line": 158,
            "description": "Prepare a URL with the necessary cache busting and/or versioning\nas well as the base directoryr",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "url",
                    "description": "The url to prepare",
                    "type": "String"
                },
                {
                    "name": "applyBasePath",
                    "description": "If the global base path should be applied to the url. This defaults to false because it can \n\t\t\t\t\t\t\t\tpotentially interfere with later regular expression checks, particularly with PreloadJS",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "The final url with version/cache and basePath added",
                "type": "String"
            },
            "class": "CacheManager",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 13,
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 16,
            "description": "Highest priority",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_HIGH",
            "type": "Int",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 25,
            "description": "Normal priority, the default",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_NORMAL",
            "type": "Int",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 34,
            "description": "Lowest priority",
            "static": 1,
            "access": "public",
            "tagname": "",
            "final": 1,
            "itemtype": "property",
            "name": "PRIORITY_LOW",
            "type": "Int",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 43,
            "description": "The url of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 50,
            "description": "Data associate with the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 57,
            "description": "The callback function of the load, to call when \nthe load as finished, takes one argument as result",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 65,
            "description": "The priority of this item",
            "itemtype": "property",
            "name": "priority",
            "type": "Int",
            "access": "public",
            "tagname": "",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 72,
            "description": "The amount we've loaded so far, from 0 to 1",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 79,
            "description": "The progress callback",
            "access": "public",
            "tagname": "",
            "proprty": "{function} updateCallback",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 90,
            "description": "Represent this object as a string",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The string representation of this object",
                "type": "String"
            },
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/LoaderQueueItem.js",
            "line": 101,
            "description": "Destroy this result",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "LoaderQueueItem",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 15,
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 18,
            "description": "Reference to the private instance object",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 25,
            "description": "The collection of LoaderQueueItems",
            "access": "private",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 31,
            "description": "The collection of LoaderQueueItems by url",
            "access": "private",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 37,
            "description": "The collection of loaders",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "loaders",
            "type": "Object",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 48,
            "description": "The current number of items loading",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "numLoads",
            "type": "Int",
            "default": "0",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 58,
            "description": "If we can load",
            "access": "private",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 64,
            "description": "The maximum number of simulaneous loads",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxSimultaneousLoads",
            "type": "Int",
            "default": "2",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 72,
            "description": "The reference to the cache manager",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "cacheManager",
            "type": "CacheManager",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 79,
            "description": "Static constructor creating the singleton",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 102,
            "description": "Static function for getting the singleton instance",
            "static": 1,
            "readonly": "",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "instance",
            "type": "MediaLoader",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 120,
            "description": "Destroy the MediaLoader singleton, don't use after this",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 157,
            "description": "Initilize the object",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_initialize",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 174,
            "description": "Load a file",
            "itemtype": "method",
            "name": "load",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The file path to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function when completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The callback for load progress update, passes 0-1 as param",
                    "type": "Function*"
                },
                {
                    "name": "priority",
                    "description": "The priority of the load",
                    "type": "Int*"
                },
                {
                    "name": "data",
                    "description": "optional data",
                    "type": "*"
                }
            ],
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 211,
            "description": "There was an error loading the file",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onLoadFailed",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                }
            ],
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 243,
            "description": "The file load progress event",
            "itemtype": "method",
            "name": "_onLoadProgress",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "event",
                    "description": "The progress event",
                    "type": "Object"
                }
            ],
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 258,
            "description": "The file was loaded successfully",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onLoadCompleted",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "ev",
                    "description": "The load event",
                    "type": "Object"
                }
            ],
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 281,
            "description": "Attempt to do the next load",
            "itemtype": "method",
            "name": "_tryNextLoad",
            "access": "private",
            "tagname": "",
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 313,
            "description": "Alert that the loading is finished",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadDone",
            "params": [
                {
                    "name": "qi",
                    "description": "The loader queue item",
                    "type": "LoaderQueueItem"
                },
                {
                    "name": "result",
                    "description": "The event from preloadjs or null",
                    "type": "Object"
                }
            ],
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoader.js",
            "line": 331,
            "description": "Cancel a load that's currently in progress",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "url",
                    "description": "The url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If canceled returns true, false if not canceled",
                "type": "Bool"
            },
            "class": "MediaLoader",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 21,
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 24,
            "description": "The contents of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "content",
            "type": "*",
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 31,
            "description": "The url of the load",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 38,
            "description": "Reference to the preloader object",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "loader",
            "type": "createjs.LoaderQueue",
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 45,
            "description": "A to string method",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string rep of the object",
                "type": "String"
            },
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/loaders/MediaLoaderResult.js",
            "line": 56,
            "description": "Destroy this result",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "MediaLoaderResult",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 38,
            "description": "Reference to the inherieted task",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "p",
            "type": "Object",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 46,
            "description": "An object used as a dictionary with keys that should be the same as sound aliases",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_captionDict",
            "type": "Dictionary",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 54,
            "description": "A reference to the CreateJS Text object that Captions should be controlling. \nOnly one text field can be controlled at a time.\nWhen using PIXI textfields, textIsProp should be false.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_textField",
            "type": "createjs.Text|PIXI.Text|PIXI.BitmapText",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 64,
            "description": "The function to call when playback is complete.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_completeCallback",
            "type": "Function",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 72,
            "description": "The collection of line objects {start:0, end:0, content:\"\"}",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lines",
            "type": "Array",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 80,
            "description": "The duration in milliseconds of the current sound.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentDuration",
            "type": "Int",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 88,
            "description": "The current playback time",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentTime",
            "type": "Int",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 96,
            "description": "Save the current line index",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_currentLine",
            "type": "Int",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 104,
            "description": "Cache the last active line",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lastActiveLine",
            "type": "Int",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 112,
            "description": "If we're playing",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_playing",
            "type": "Bool",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 120,
            "description": "The singleton instance of Captions",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_instance",
            "type": "Captions",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 128,
            "description": "If you want to mute the captions, doesn't remove the current caption",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_muteAll",
            "type": "Bool",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 136,
            "description": "If text should be set on the text field with '.text = ' instead of '.setText()'.\nWhen using PIXI textfields, textIsProp should be false.\nDefault is true.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "textIsProp",
            "type": "Bool",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 146,
            "description": "If this instance has been destroyed already",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_isDestroyed",
            "type": "Bool",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 154,
            "description": "The version number of this library",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 163,
            "description": "Creates the singleton instance of Captions, with an optional dictionary ready to go",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "captionDictionary",
                    "description": "An object set up in dictionary format of caption objects.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "field",
                    "description": "An text field to use as the output for this captions object",
                    "type": "createjs.Text",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "static": 1,
            "return": {
                "description": "The captions object instance",
                "type": "Captions"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 179,
            "description": "The singleton instance of Captions",
            "static": 1,
            "readonly": "",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "instance",
            "type": "Captions",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 194,
            "description": "Constructor for caption.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "captionDictionary",
                    "description": "An object set up in dictionary format of caption objects.",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "field",
                    "description": "An text field to use as the \n\toutput for this captions object. When using PIXI textfields, textIsProp should be false.",
                    "type": "createjs.Text|PIXI.Text|PIXI.BitmapText",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 211,
            "description": "Mute all of the captions.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMuteAll",
            "params": [
                {
                    "name": "muteAll",
                    "description": "Whether to mute or unmute",
                    "type": "Bool"
                }
            ],
            "static": 1,
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 227,
            "description": "If the captions are all currently muted.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMuteAll",
            "static": 1,
            "return": {
                "description": "Whether the captions are all muted",
                "type": "Bool"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 240,
            "description": "Sets the dictionary object to use for captions. This overrides the current dictionary, if present.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDictionary",
            "params": [
                {
                    "name": "dict",
                    "description": "The dictionary object to use for captions.",
                    "type": "Dictionary"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 284,
            "description": "Sets the CreateJS Text or Pixi BitmapText/Text object that Captions should control the text of. \nOnly one text field can be controlled at a time. When using PIXI textfields, textIsProp should be false.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setTextField",
            "params": [
                {
                    "name": "field",
                    "description": "The CreateJS or PIXI Text object",
                    "type": "createjs.Text|PIXI.Text|PIXI.BitmapText"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 304,
            "description": "Returns if there is a caption under that alias or not.",
            "itemtype": "method",
            "name": "hasCaption",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias to check against",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the caption was found or not",
                "type": "Bool"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 316,
            "description": "A utility function for getting the full text of a caption by alias\nthis can be useful for debugging purposes.",
            "itemtype": "method",
            "name": "getFullCaption",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias to get the text of",
                    "type": "String"
                },
                {
                    "name": "[separator=\"",
                    "description": "\"] The separation between each line",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The entire captions concatinated by the separator",
                "type": "String"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 352,
            "description": "Sets an array of line data as the current caption data to play.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_load",
            "params": [
                {
                    "name": "data",
                    "description": "The string",
                    "type": "String"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 375,
            "description": "Reset the captions",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_reset",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 387,
            "description": "Take the captions timecode and convert to milliseconds\nformat is in HH:MM:ss:mmm",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_timeCodeToMilliseconds",
            "params": [
                {
                    "name": "input",
                    "description": "The input string of the format",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Time in milliseconds",
                "type": "Int"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 408,
            "description": "The playing status.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "If the caption is playing",
                "type": "Bool"
            },
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 420,
            "description": "Calculate the total duration of the current caption",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getTotalDuration",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 431,
            "description": "Get the current duration of the current caption",
            "itemtype": "property",
            "name": "currentDuration",
            "type": "Int",
            "readonly": "",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 441,
            "description": "Start the caption playback.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "alias",
                    "description": "The desired caption's alias",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the caption is finished playing",
                    "type": "Function"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 460,
            "description": "Convience function for stopping captions. Is also called by \ncloudkid.AudioAnimation when it is finished.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 475,
            "description": "Goto a specific time.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "time",
                    "description": "The time in milliseconds to seek to in the captions",
                    "type": "Int"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 521,
            "description": "Callback for when a frame is entered.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updatePercent",
            "params": [
                {
                    "name": "progress",
                    "description": "The progress in the current sound as a percentage (0-1)",
                    "type": "Number"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 535,
            "description": "Function to update the amount of time elapsed for the caption playback.\nCall this to advance the caption by a given amount of time.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "progress",
                    "description": "The time elapsed since the last frame in milliseconds",
                    "type": "Int"
                }
            ],
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 550,
            "description": "Calculates the captions after increasing the current time.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_calcUpdate",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 587,
            "description": "Updates the text in the managed text field.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateCaptions",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Captions.js",
            "line": 605,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "Captions",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 28,
            "description": "A copy of _playAfterLoad bound to this Sound instance.",
            "itemtype": "property",
            "name": "_playAfterLoadBound",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 40,
            "description": "Dictionary of sound objects, containing configuration info and playback objects.",
            "itemtype": "property",
            "name": "_sounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 46,
            "description": "*  Array of SoundInstance objects that are being faded in or out.\n\t*  @property {Array} _fades\n\t*  @private",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 54,
            "description": "Array of SoundInstance objects waiting to be used.",
            "itemtype": "property",
            "name": "_pool",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 61,
            "description": "The extension of the supported sound type that will be used.",
            "itemtype": "property",
            "name": "supportedSound",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 68,
            "description": "Dictionary of SoundContexts.",
            "itemtype": "property",
            "name": "_contexts",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 82,
            "description": "A constant for telling Sound not to handle a sound with play(), but to\nreturn what SoundJS returns directly.",
            "itemtype": "property",
            "name": "UNHANDLED",
            "type": "String",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 91,
            "description": "Initializes the Sound singleton. If using createjs.FlashPlugin, you will be responsible for setting\ncreatejs.FlashPlugin.BASE_PATH.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "pluginOrder",
                    "description": "The SoundJS plugins to pass to createjs.Sound.registerPlugins().",
                    "type": "Array"
                },
                {
                    "name": "filetypeOrder",
                    "description": "The order in which file types are preferred, where \"ogg\" becomes a \".ogg\"\n\t\t\t\textension on all sound file urls.",
                    "type": "Array"
                },
                {
                    "name": "completeCallback",
                    "description": "A function to call when initialization is complete.",
                    "type": "Function"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 169,
            "description": "The singleton instance of Sound.",
            "itemtype": "property",
            "name": "instance",
            "type": "Sound",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 180,
            "description": "Loads a config object. This should not be called until after Sound.init() is complete.",
            "itemtype": "method",
            "name": "loadConfig",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "The config to load.",
                    "type": "Object"
                },
                {
                    "name": "defaultContext",
                    "description": "The optional sound context to load sounds into unless \n\totherwise specified. Sounds do not require a context.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 225,
            "description": "If a sound exists in the list of recognized sounds.",
            "itemtype": "method",
            "name": "exists",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound exists, false otherwise.",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 237,
            "description": "If a sound is unloaded.",
            "itemtype": "method",
            "name": "isUnloaded",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is unloaded, false if it is loaded, loading or does not exist.",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 249,
            "description": "If a sound is loaded.",
            "itemtype": "method",
            "name": "isLoaded",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is loaded, false if it is not loaded or does not exist.",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 261,
            "description": "If a sound is in the process of being loaded",
            "itemtype": "method",
            "name": "isLoading",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is currently loading, false if it is loaded, unloaded, or does not exist.",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 273,
            "description": "If a sound is playing.",
            "itemtype": "method",
            "name": "isPlaying",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to look for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the sound is currently playing or loading with an intent to play, false if it is not playing or does not exist.",
                "type": "Bool"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 286,
            "description": "Fades a sound from 0 to a specified volume.",
            "itemtype": "method",
            "name": "fadeIn",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "aliasOrInst",
                    "description": "The alias of the sound to fade the last played instance of, or an instance returned from play().",
                    "type": "String|SoundInstance"
                },
                {
                    "name": "duration",
                    "description": "The duration in milliseconds to fade for. The default is 500ms.",
                    "type": "Number"
                },
                {
                    "name": "targetVol",
                    "description": "The volume to fade to. The default is the sound's default volume.",
                    "type": "Number"
                },
                {
                    "name": "startVol",
                    "description": "The volume to start from. The default is 0.",
                    "type": "Number"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 325,
            "description": "Fades a sound from the current volume to a specified volume. A sound that ends at 0 volume\nis stopped after the fade.",
            "itemtype": "method",
            "name": "fadeOut",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "aliasOrInst",
                    "description": "The alias of the sound to fade the last played instance of, or an instance returned from play().",
                    "type": "String|SoundInstance"
                },
                {
                    "name": "duration",
                    "description": "The duration in milliseconds to fade for. The default is 500ms.",
                    "type": "Number"
                },
                {
                    "name": "targetVol",
                    "description": "The volume to fade to. The default is 0.",
                    "type": "Number"
                },
                {
                    "name": "startVol",
                    "description": "The volume to fade from. The default is the current volume.",
                    "type": "Number"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 370,
            "description": "The update call, used for fading sounds. This is bound to the instance of Sound",
            "itemtype": "method",
            "name": "_update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 422,
            "description": "Plays a sound.",
            "itemtype": "method",
            "name": "play",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to play.",
                    "type": "String"
                },
                {
                    "name": "completeCallback",
                    "description": "An optional function to call when the sound is finished. \n\t\tPassing cloudkid.Sound.UNHANDLED results in cloudkid.Sound not handling the sound \n\t\tand merely returning what SoundJS returns from its play() call.",
                    "type": "Function"
                },
                {
                    "name": "startCallback",
                    "description": "An optional function to call when the sound starts playback.\n\t\tIf the sound is loaded, this is called immediately, if not, it calls when the \n\t\tsound is finished loading.",
                    "type": "Function"
                },
                {
                    "name": "interrupt",
                    "description": "If the sound should interrupt previous sounds (SoundJS parameter). Default is false.",
                    "type": "Bool"
                },
                {
                    "name": "delay",
                    "description": "The delay to play the sound at in milliseconds(SoundJS parameter). Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The offset into the sound to play in milliseconds(SoundJS parameter). Default is 0.",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "How many times the sound should loop. Use -1 (or true) for infinite loops (SoundJS parameter).\n\t\tDefault is no looping.",
                    "type": "Int"
                },
                {
                    "name": "volume",
                    "description": "The volume to play the sound at (0 to 1). Omit to use the default for the sound.",
                    "type": "Number"
                },
                {
                    "name": "pan",
                    "description": "The panning to start the sound at (-1 to 1). Default is centered (0).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An internal SoundInstance object that can be used for fading in/out as well as \n\t\tpausing and getting the sound's current position.",
                "type": "SoundInstance"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 544,
            "description": "Gets a SoundInstance, from the pool if available or maks a new one if not.",
            "itemtype": "method",
            "name": "_getSoundInst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "channel",
                    "description": "A createjs SoundInstance to initialize the object with.",
                    "type": "createjs.SoundInstance"
                },
                {
                    "name": "id",
                    "description": "The alias of the sound that is going to be used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The SoundInstance that is ready to use.",
                "type": "SoundInstance"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 569,
            "description": "Plays a sound after it finishes loading.",
            "itemtype": "method",
            "name": "_playAfterload",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The sound to play.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 617,
            "description": "The callback used for when a sound instance is complete.",
            "itemtype": "method",
            "name": "_onSoundComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The SoundInstance that is complete.s",
                    "type": "SoundInstance"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 634,
            "description": "Stops all playing or loading instances of a given sound.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to stop.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 661,
            "description": "Stops all playing SoundInstances for a sound.",
            "itemtype": "method",
            "name": "_stopSound",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "s",
                    "description": "The sound (from the _sounds dictionary) to stop.",
                    "type": "Object"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 677,
            "description": "Stops and repools a specific SoundInstance.",
            "itemtype": "method",
            "name": "_stopInst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The SoundInstance to stop.",
                    "type": "SoundInstance"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 690,
            "description": "Stops all sounds in a given context.",
            "itemtype": "method",
            "name": "stopContext",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to stop.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 713,
            "description": "Pauses a specific sound.",
            "itemtype": "method",
            "name": "pauseSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to pause. \n\tInternally, this can also be the object from the _sounds dictionary directly.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 732,
            "description": "Unpauses a specific sound.",
            "itemtype": "method",
            "name": "unpauseSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to pause. \n\tInternally, this can also be the object from the _sounds dictionary directly.",
                    "type": "String"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 754,
            "description": "Pauses all sounds.",
            "itemtype": "method",
            "name": "pauseAll",
            "access": "public",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 766,
            "description": "Unpauses all sounds.",
            "itemtype": "method",
            "name": "unpauseAll",
            "access": "public",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 778,
            "description": "Sets mute status of all sounds in a context",
            "itemtype": "method",
            "name": "setContextMute",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to modify.",
                    "type": "String"
                },
                {
                    "name": "muted",
                    "description": "If the context should be muted.",
                    "type": "Bool"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 808,
            "description": "Sets volume of a context. Individual sound volumes are multiplied by this value.",
            "itemtype": "method",
            "name": "setContextVolume",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "The name of the context to modify.",
                    "type": "String"
                },
                {
                    "name": "volume",
                    "description": "The volume for the context (0 to 1).",
                    "type": "Number"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 838,
            "description": "Preloads a specific sound.",
            "itemtype": "method",
            "name": "preloadSound",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to load.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the sound is finished loading.",
                    "type": "Function"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 865,
            "description": "Preloads a list of sounds.",
            "itemtype": "method",
            "name": "preload",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "An array of sound aliases to load.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when all sounds have been loaded.",
                    "type": "Function"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 913,
            "description": "Marks a sound as loaded. If it needs to play after the load, then it is played.",
            "itemtype": "method",
            "name": "_markLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "alias",
                    "description": "The alias of the sound to mark.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to call to show that the sound is loaded.",
                    "type": "Function"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 938,
            "description": "Creates a Task for the CloudKid Task library for preloading a list of sounds.\nThis function will not work if the Task library was not loaded before the Sound library.",
            "itemtype": "method",
            "name": "createPreloadTask",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task.",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "An array of sound aliases to load.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the task is complete.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A task to load up all of the sounds in the list.",
                "type": "cloudkid.Task"
            },
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 954,
            "description": "Unloads a list of sounds to reclaim memory if possible. \nIf the sounds are playing, they are stopped.",
            "itemtype": "method",
            "name": "unload",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "An array of sound aliases to unload.",
                    "type": "Array"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 977,
            "description": "Places a SoundInstance back in the pool for reuse.",
            "itemtype": "method",
            "name": "_poolinst",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "inst",
                    "description": "The instance to repool.",
                    "type": "SoundInstance"
                }
            ],
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/Sound.js",
            "line": 995,
            "description": "Destroys cloudkid.Sound. This does not unload loaded sounds, destroy SoundJS to do that.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "Sound",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 1,
            "modules": "cloudkid",
            "class": "SoundContext",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 14,
            "description": "The name of the sound context.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "SoundContext",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 20,
            "description": "The current volume to apply to all sounds in the context (0 to 1).",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "SoundContext",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 26,
            "description": "If all sounds in the sound context are muted or not.",
            "itemtype": "property",
            "name": "muted",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "SoundContext",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundContext.js",
            "line": 32,
            "description": "The sound objects in this context, from Sound.instance._sounds;",
            "itemtype": "property",
            "name": "sounds",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "SoundContext",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 17,
            "description": "SoundJS SoundInstanceance, essentially a sound channel.",
            "itemtype": "property",
            "name": "_channel",
            "type": "createjs.SoundInstanceance",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 24,
            "description": "Internal callback function for when the sound ends.",
            "itemtype": "property",
            "name": "_endFunc",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 31,
            "description": "User's callback function for when the sound ends.",
            "itemtype": "property",
            "name": "_endCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 38,
            "description": "User's callback function for when the sound starts. This is only used if the sound wasn't loaded before play() was called.",
            "itemtype": "property",
            "name": "_startFunc",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 45,
            "description": "An array of relevant parameters passed to play(). This is only used if the sound wasn't loaded before play() was called.",
            "itemtype": "property",
            "name": "_startParams",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 52,
            "description": "The alias for the sound that this instance was created from.",
            "itemtype": "property",
            "name": "alias",
            "type": "String",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 60,
            "description": "The current time in milliseconds for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fTime",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 67,
            "description": "The duration in milliseconds for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fDur",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 74,
            "description": "The starting volume for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fEnd",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 81,
            "description": "The ending volume for the fade that this sound instance is performing.",
            "itemtype": "property",
            "name": "_fEnd",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 88,
            "description": "The current sound volume (0 to 1). This is multiplied by the sound context's volume.\nSetting this won't take effect until updateVolume() is called.",
            "itemtype": "property",
            "name": "curVol",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 96,
            "description": "The length of the sound in milliseconds. This is 0 if it hasn't finished loading.",
            "itemtype": "property",
            "name": "length",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 103,
            "description": "If the sound is currently paused. Setting this has no effect - use pause() and unpause().",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 111,
            "description": "An active SoundInstance should always be valid. This is primarily for compatability with cloudkid.Audio.",
            "itemtype": "property",
            "name": "isValid",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 123,
            "description": "The position of the sound playhead in milliseconds, or 0 if it hasn't started playing yet.",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 133,
            "description": "Stops this SoundInstance.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 146,
            "description": "Updates the volume of this SoundInstance.",
            "itemtype": "method",
            "name": "updateVolume",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "contextVol",
                    "description": "The volume of the sound context that the sound belongs to. If omitted, the volume is automatically collected.",
                    "type": "Number"
                }
            ],
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 170,
            "description": "Pauses this SoundInstance.",
            "itemtype": "method",
            "name": "pause",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundInstance.js",
            "line": 183,
            "description": "Unpauses this SoundInstance.",
            "itemtype": "method",
            "name": "unpause",
            "access": "public",
            "tagname": "",
            "class": "SoundInstance",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundTask.js",
            "line": 1,
            "modules": "cloudkid",
            "class": "SoundListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundTask.js",
            "line": 26,
            "description": "The collection of sounds to load",
            "itemtype": "property",
            "name": "list",
            "type": "Array",
            "class": "SoundListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundTask.js",
            "line": 39,
            "description": "Begin the task",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when we're done",
                    "type": "Function"
                }
            ],
            "class": "SoundListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/media/SoundTask.js",
            "line": 49,
            "description": "Destroy the task",
            "itemtype": "method",
            "name": "destroy",
            "class": "SoundListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 39,
            "description": "If the VOPlayer should keep a list of all audio it plays for unloading later. Default is false.",
            "itemtype": "property",
            "name": "trackAudio",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 46,
            "description": "The current list of audio/silence times/functions. Generally you will not need to modify this.",
            "itemtype": "property",
            "name": "audioList",
            "type": "Array",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 53,
            "description": "The current position in audioList.",
            "itemtype": "property",
            "name": "_listCounter",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 60,
            "description": "The current audio alias being played.",
            "itemtype": "property",
            "name": "_currentAudio",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 67,
            "description": "The current audio instance being played.",
            "itemtype": "property",
            "name": "_audioInst",
            "type": "SoundInst",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 74,
            "description": "The callback for when the list is finished.",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 81,
            "description": "The callback for when the list is interrupted for any reason.",
            "itemtype": "property",
            "name": "_cancelledCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 88,
            "description": "The bound _onAudioFinished call.",
            "itemtype": "property",
            "name": "_audioListener",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 95,
            "description": "A list of audio file played by this, so that they can be unloaded later.",
            "itemtype": "property",
            "name": "_playedAudio",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 102,
            "description": "A timer for silence entries in the list, in milliseconds.",
            "itemtype": "property",
            "name": "_timer",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 109,
            "description": "The cloudkid.Captions object used for captions. The developer is responsible for initializing this with a captions\ndictionary config file and a reference to a text field.",
            "itemtype": "property",
            "name": "captions",
            "type": "cloudkid.Captions",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 117,
            "description": "An Array used when play() is called to avoid creating lots of Array objects.",
            "itemtype": "property",
            "name": "_listHelper",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 125,
            "description": "If VOPlayer is currently playing (audio or silence).",
            "itemtype": "property",
            "name": "playing",
            "type": "Bool",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 136,
            "description": "Plays a single audio alias, interrupting any current playback.\nAlternatively, plays a list of audio files, timers, and/or functions.\nAudio in the list will be preloaded to minimize pauses for loading.",
            "itemtype": "method",
            "name": "play",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "idOrList",
                    "description": "The alias of the audio file to play or the array of items to play/call in order.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when playback is complete.",
                    "type": "Function"
                },
                {
                    "name": "cancelledCallback",
                    "description": "The function to call when playback is interrupted with a stop() or play() call.",
                    "type": "Function"
                }
            ],
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 163,
            "description": "Callback for when audio/timer is finished to advance to the next item in the list.",
            "itemtype": "method",
            "name": "_onAudioFinished",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 216,
            "description": "The update callback used for silence timers and updating captions without active audio.\nThis method is bound to the VOPlayer instance.",
            "itemtype": "method",
            "name": "_update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 236,
            "description": "The update callback used for updating captions with active audio.\nThis method is bound to the VOPlayer instance.",
            "itemtype": "method",
            "name": "_updateCaptionPos",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame, in milliseconds.",
                    "type": "Int"
                }
            ],
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 250,
            "description": "Plays the current audio item and begins preloading the next item.",
            "itemtype": "method",
            "name": "_playAudio",
            "access": "private",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 300,
            "description": "Stops playback of any audio/timer.",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 326,
            "description": "Unloads all audio this VOPlayer has played. If trackAudio is false, this won't do anything.",
            "itemtype": "method",
            "name": "unloadPlayedAudio",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/media/VOPlayer.js",
            "line": 337,
            "description": "Cleans up this VOPlayer.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "VOPlayer",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 41,
            "description": "Initialize the worker, this is how you create a Worker or FallbackWorker object.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "codeString",
                    "description": "The code in string form to make the worker from. As a string, fallback support is easier.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Either a Web Worker or a fallback with the same API to use.",
                "type": "FallbackWorker|window.Worker"
            },
            "class": "Worker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 105,
            "description": "see https://developer.mozilla.org/en-US/docs/Web/API/Worker.onmessage",
            "itemtype": "property",
            "name": "onmessage",
            "type": "Function",
            "class": "SubWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 111,
            "description": "The FallbackWorker that is controlls by this SubWorker.",
            "itemtype": "property",
            "name": "_wParent",
            "type": "FallbackWorker",
            "access": "private",
            "tagname": "",
            "class": "SubWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 118,
            "description": "See https://developer.mozilla.org/en-US/docs/Web/API/Worker.postMessage",
            "itemtype": "method",
            "name": "postMessage",
            "params": [
                {
                    "name": "data",
                    "description": "The data to send.",
                    "type": "*"
                }
            ],
            "class": "SubWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 142,
            "description": "See https://developer.mozilla.org/en-US/docs/Web/API/Worker.postMessage",
            "itemtype": "method",
            "name": "postMessage",
            "params": [
                {
                    "name": "data",
                    "description": "The data to send.",
                    "type": "*"
                }
            ],
            "class": "FallbackWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 153,
            "description": "See https://developer.mozilla.org/en-US/docs/Web/API/Worker.terminate",
            "itemtype": "method",
            "name": "terminate",
            "class": "FallbackWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 166,
            "description": "See https://developer.mozilla.org/en-US/docs/Web/API/Worker.onmessage",
            "itemtype": "property",
            "name": "onmessage",
            "type": "Function",
            "class": "FallbackWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/polyfills/Worker.js",
            "line": 172,
            "description": "The SubWorker that is controlled by this FallbackWorker.",
            "itemtype": "property",
            "name": "_wChild",
            "type": "SubWorker",
            "access": "private",
            "tagname": "",
            "class": "FallbackWorker",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 24,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 33,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 41,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 48,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 57,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 65,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 75,
            "description": "The id reference",
            "itemtype": "property",
            "name": "stateID",
            "type": "String",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 82,
            "description": "A reference to the state manager",
            "itemtype": "property",
            "name": "manager",
            "type": "StateManager",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 89,
            "description": "Save the panel",
            "itemtype": "property",
            "name": "panel",
            "type": "createjs.MovieClip|PIXI.DisplayObjectContainer",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 96,
            "description": "Check to see if we've been destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 104,
            "description": "If the manager considers this the active panel",
            "itemtype": "property",
            "name": "_active",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 112,
            "description": "If we are pre-loading the state",
            "itemtype": "property",
            "name": "_isLoading",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 120,
            "description": "If we canceled entering the state",
            "itemtype": "property",
            "name": "_canceled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 128,
            "description": "When we're finishing loading",
            "itemtype": "property",
            "name": "_onEnterStateProceed",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 136,
            "itemtype": "property",
            "name": "_onLoadingComplete",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 143,
            "itemtype": "property",
            "name": "_enabled",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 150,
            "description": "If we are currently transitioning",
            "itemtype": "property",
            "name": "isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 158,
            "description": "Initialize the Base State",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "panel",
                    "description": "The panel",
                    "type": "createjs.MovieClip|PIXI.DisplayObjectContaner"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 168,
            "description": "Status of whether the panel load was canceled",
            "itemtype": "method",
            "name": "getCanceled",
            "return": {
                "description": "If the load was canceled",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 179,
            "description": "This is called by the State Manager to exit the state",
            "itemtype": "method",
            "name": "_internalExitState",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 199,
            "description": "When the state is exited",
            "itemtype": "method",
            "name": "exitState",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 206,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalExitStateStart",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 217,
            "description": "When the state has requested to be exit, pre-transition",
            "itemtype": "method",
            "name": "exitStateStart",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 224,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterState",
            "params": [
                {
                    "name": "proceed",
                    "description": "The function to call after enterState has been called",
                    "type": "Functon"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 254,
            "description": "Internal function to start the preloading",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 279,
            "description": "Internal function to finish the preloading",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 302,
            "description": "Cancel the loading of this state",
            "itemtype": "method",
            "name": "_internalCancel",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 318,
            "description": "Cancel the load, implementation-specific\nthis is where any async actions are removed",
            "itemtype": "method",
            "name": "cancel",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 326,
            "description": "When the state is entered",
            "itemtype": "method",
            "name": "enterState",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 333,
            "description": "Exit the state start, called by the State Manager",
            "itemtype": "method",
            "name": "_internalEnterStateDone",
            "access": "private",
            "tagname": "",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 347,
            "description": "When the state is visually entered fully\nthat is, after the transition is done",
            "itemtype": "method",
            "name": "enterStateDone",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 355,
            "description": "Get if this is the active state",
            "itemtype": "method",
            "name": "getActive",
            "return": {
                "description": "If this is the active state",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 366,
            "description": "Transition the panel in",
            "itemtype": "method",
            "name": "transitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 389,
            "description": "Transition the panel out",
            "itemtype": "method",
            "name": "transitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 413,
            "description": "Get if this State has been destroyed",
            "itemtype": "method",
            "name": "getDestroyed",
            "return": {
                "description": "If this has been destroyed",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 424,
            "description": "Enable this panel, true is only non-loading and non-transitioning state",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": "The enabled state",
                    "type": "Bool"
                }
            ],
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 435,
            "description": "Get the enabled status",
            "itemtype": "method",
            "name": "getEnabled",
            "return": {
                "description": "If this state is enabled",
                "type": "Bool"
            },
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/BaseState.js",
            "line": 446,
            "description": "Don't use the state object after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "BaseState",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 22,
            "description": "The name of the event for when the state starts transitioning in",
            "itemtype": "event",
            "name": "onTransitionStateIn",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 29,
            "description": "The name of the event for when the state finishes transition in",
            "itemtype": "event",
            "name": "onTransitionStateInDone",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 36,
            "description": "The name of the event for when the state starts transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOut",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 43,
            "description": "The name of the event for when the state is done transitioning out",
            "itemtype": "event",
            "name": "onTransitionStateOutDone",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 50,
            "description": "When the state besome visible",
            "itemtype": "event",
            "name": "onVisible",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 57,
            "description": "When the state becomes hidden",
            "itemtype": "event",
            "name": "onHidden",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 64,
            "description": "A reference to the current state of the state manager",
            "itemtype": "property",
            "name": "currentState",
            "type": "BaseState",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 71,
            "description": "A reference to the state who's actually being transitioned or being changed",
            "itemtype": "property",
            "name": "visibleState",
            "type": "BaseState",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 78,
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateEvent.js",
            "line": 84,
            "description": "Initialize the event",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "currentState",
                    "description": "The currentState of the state manager",
                    "type": "BaseState"
                },
                {
                    "name": "visibleState",
                    "description": "The current state being transitioned or changing visibility",
                    "type": "BaseState"
                }
            ],
            "class": "StateEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 29,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 38,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 46,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 53,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 62,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 70,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 80,
            "description": "The current version of the state manager",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 89,
            "description": "The display that holds the states this StateManager is managing.",
            "itemtype": "property",
            "name": "_display",
            "type": "cloudkid.CreateJSDisplay|cloudkid.PixiDisplay",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 97,
            "description": "The click to play in between transitioning states",
            "itemtype": "property",
            "name": "_transition",
            "type": "createjs.MovieClip|PIXI.Spine",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 105,
            "description": "The sounds for the transition",
            "itemtype": "property",
            "name": "_transitionSounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 113,
            "description": "The collection of states map",
            "itemtype": "property",
            "name": "_states",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 121,
            "description": "The currently selected state",
            "itemtype": "property",
            "name": "_state",
            "type": "BaseState",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 129,
            "description": "The currently selected state id",
            "itemtype": "property",
            "name": "_stateID",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 137,
            "description": "The old state",
            "itemtype": "property",
            "name": "_oldState",
            "type": "BaseState",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 145,
            "description": "If the manager is loading a state",
            "itemtype": "property",
            "name": "name description",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 153,
            "description": "If the state or manager is current transitioning",
            "itemtype": "property",
            "name": "_isTransitioning",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 161,
            "description": "If the current object is destroyed",
            "itemtype": "property",
            "name": "_destroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 169,
            "description": "If we're transitioning the state, the queue the id of the next one",
            "itemtype": "property",
            "name": "_queueStateId",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 177,
            "description": "The name of the Animator label and event for transitioning state in",
            "itemtype": "event",
            "name": "onTransitionIn",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 184,
            "description": "The name of the event for done with transitioning state in",
            "itemtype": "event",
            "name": "onTransitionInDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 191,
            "description": "The name of the Animator label and event for transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOut",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 198,
            "description": "The name of the event for done with transitioning state out",
            "itemtype": "event",
            "name": "onTransitionOutDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 205,
            "description": "The name of the event for done with initializing",
            "itemtype": "event",
            "name": "onInitDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 212,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingStart",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 219,
            "description": "Event when the state transitions the first time",
            "itemtype": "event",
            "name": "onLoadingDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 226,
            "description": "Initialize the State Manager",
            "itemtype": "method",
            "name": "intialize",
            "params": [
                {
                    "name": "display",
                    "description": "The display on which the transition animation is displayed.",
                    "type": "cloudkid.CreateJSDisplay|cloudkid.PixiDisplay"
                },
                {
                    "name": "transition",
                    "description": "The transition MovieClip to play between transitions",
                    "type": "createjs.MovieClip|PIXI.Spine"
                },
                {
                    "name": "transitionSounds",
                    "description": "Data object with aliases and start times (seconds) for transition in, loop and out sounds: {in:{alias:\"myAlias\", start:0.2}}",
                    "type": "Object"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 250,
            "description": "Register a state with the state manager, done initially",
            "itemtype": "method",
            "name": "addState",
            "params": [
                {
                    "name": "id",
                    "description": "The string alias for a state",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "State object reference",
                    "type": "BaseState"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 277,
            "description": "Dynamically change the transition",
            "itemtype": "method",
            "name": "changeTransition",
            "params": [
                {
                    "name": "Clip",
                    "description": "to swap for transition",
                    "type": "createjs.MovieClip|PIXI.Spine"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 288,
            "description": "Get the currently selected state",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "The id of the current state",
                "type": "String"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 299,
            "description": "Get the current selected state (state object)",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The Base State object",
                "type": "BaseState"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 310,
            "description": "Access a certain state by the ID",
            "itemtype": "method",
            "name": "getStateById",
            "params": [
                {
                    "name": "id",
                    "description": "State alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The base State object",
                "type": "BaseState"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 323,
            "description": "If the StateManager is busy because it is currently loading or transitioning.",
            "itemtype": "method",
            "name": "isBusy",
            "return": {
                "description": "If StateManager is busy",
                "type": "Bool"
            },
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 334,
            "description": "If the state needs to do some asyncronous tasks,\nThe state can tell the manager to stop the animation",
            "itemtype": "method",
            "name": "loadingStart",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 350,
            "description": "If the state has finished it's asyncronous task loading\nLets enter the state",
            "itemtype": "method",
            "name": "loadingDone",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 364,
            "description": "Show, enable the blocker clip to disable mouse clicks",
            "itemtype": "method",
            "name": "showBlocker",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 375,
            "description": "Re-enable interaction with the stage",
            "itemtype": "method",
            "name": "hideBlocker",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 385,
            "description": "This transitions out of the current state and \nenters it again. Can be useful for clearing a state",
            "itemtype": "method",
            "name": "refresh",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 397,
            "description": "Set the current State",
            "itemtype": "method",
            "name": "setState",
            "params": [
                {
                    "name": "id",
                    "description": "The state id",
                    "type": "String"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 487,
            "description": "When the state has completed it's loading sequence\nthis should be treated as an asyncronous process",
            "itemtype": "method",
            "name": "_onStateLoaded",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 528,
            "description": "Process the state queue",
            "itemtype": "method",
            "name": "_processQueue",
            "return": {
                "description": "If there is a queue to process"
            },
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 550,
            "description": "Plays the animation \"transitionLoop\" on the transition. Also serves as the animation callback.\nManually looping the animation allows the animation to be synced to the audio while looping.",
            "itemtype": "method",
            "name": "_loopTransition",
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 570,
            "description": "Displays the transition out animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionOut",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 590,
            "description": "Displays the transition in animation, without changing states.",
            "itemtype": "method",
            "name": "showTransitionIn",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the animation is complete.",
                    "type": "Function"
                }
            ],
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 602,
            "description": "Generalized function for transitioning with the manager",
            "itemtype": "method",
            "name": "_transitioning",
            "params": [
                {
                    "name": "The",
                    "description": "animator event to play",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "callback function after transition is done",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/states/StateManager.js",
            "line": 624,
            "description": "Remove the state manager",
            "itemtype": "method",
            "name": "destroy",
            "class": "StateManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 25,
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 28,
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 31,
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 34,
            "description": "The url of the file to load",
            "itemtype": "property",
            "name": "serviceCall",
            "type": "Function",
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 41,
            "description": "The media loader priorty of the load",
            "itemtype": "property",
            "name": "args",
            "type": "*",
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 47,
            "description": "Create the service task",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "id",
                    "description": "The key for the task",
                    "type": "String"
                },
                {
                    "name": "serviceCall",
                    "description": "Function the service call",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "The function to callback when done",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to the service call, (callback is first)",
                    "type": "*"
                }
            ],
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 72,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done",
                    "type": "Function"
                }
            ],
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 82,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/FunctionTask.js",
            "line": 93,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "FunctionTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 30,
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 33,
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 36,
            "description": "The list of other tasks, as an array",
            "itemtype": "property",
            "name": "list",
            "type": "Array",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 43,
            "description": "The internal task manager",
            "itemtype": "property",
            "name": "_manager",
            "type": "TaskManager",
            "access": "private",
            "tagname": "",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 51,
            "description": "The load results dictionary",
            "itemtype": "property",
            "name": "_results",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 59,
            "description": "Make the list task but don't start.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the task",
                    "type": "String"
                },
                {
                    "name": "list",
                    "description": "List of tasks to start or a preloadJS manifest.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback to to call with the result of the tasks, this\n       task, and the TaskManager that loaded it",
                    "type": "Function"
                }
            ],
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 100,
            "description": "Start the load",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the task is done",
                    "type": "Function"
                }
            ],
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 120,
            "description": "Callback for when an task is done",
            "itemtype": "method",
            "name": "_onTaskDone",
            "params": [
                {
                    "name": "ev",
                    "description": "Task Loaded event",
                    "type": "TaskEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 133,
            "description": "Callback for when the whole list is done",
            "itemtype": "method",
            "name": "_onAllTasksComplete",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback passed to start()",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 146,
            "description": "Cancel the TaskManager used for the list of tasks. As the individual tasks are not \nkept track of, this always returns true.",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "Returns true."
            },
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 158,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/ListTask.js",
            "line": 168,
            "description": "Don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "ListTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 30,
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 33,
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 36,
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 39,
            "description": "The url of the file to load",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 46,
            "description": "Loading options",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 53,
            "description": "The media loader priorty of the load",
            "itemtype": "property",
            "name": "priority",
            "type": "Int",
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 60,
            "description": "The optional callback to get updates (to show load progress)",
            "itemtype": "property",
            "name": "updateCallback",
            "type": "Function",
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 67,
            "description": "Init the laod task",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the load is completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The optional callback to get updates (to show load progress)",
                    "type": "Function"
                },
                {
                    "name": "priority",
                    "description": "The optional priority, defaults to normal",
                    "type": "Int"
                },
                {
                    "name": "data",
                    "description": "The optional data object, for any loading options that may have been added to the preloader",
                    "type": "*"
                }
            ],
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 90,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done",
                    "type": "Function"
                }
            ],
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 107,
            "description": "Cancel the task - for use in inherited classes",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the loader removed it from the queue successfully - \n    false means that there is a 'load finished' event inbound \n    for the task manager",
                "type": "Bool"
            },
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 120,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "ToString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/LoadTask.js",
            "line": 131,
            "description": "Destroy this load task and don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "LoadTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 24,
            "description": "Super for the constructor",
            "itemtype": "property",
            "name": "Task_initialize",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 31,
            "description": "Super for the destroy function",
            "itemtype": "property",
            "name": "Task_destroy",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 38,
            "description": "The urls of the files to load",
            "itemtype": "property",
            "name": "urls",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 45,
            "description": "The optional callback to get updates (to show load progress)",
            "itemtype": "property",
            "name": "updateCallback",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 52,
            "description": "If loaded images should be drawn to a canvas and used from there.",
            "itemtype": "property",
            "name": "generateCanvas",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 59,
            "description": "The AssetLoader used to load all files.",
            "itemtype": "property",
            "name": "_assetLoader",
            "type": "PIXI.AssetLoader",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 66,
            "description": "Construct the load task",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the task",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "The urls to load using PIXI.AssetLoader",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the load is completed",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "The optional callback to call each time an item finishes loading",
                    "type": "Function"
                },
                {
                    "name": "generateCanvasTexture=false",
                    "description": "If loaded images should be drawn to a canvas and used from there.",
                    "type": "Boolean"
                }
            ],
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 89,
            "description": "Start the load",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done"
                }
            ],
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 104,
            "description": "A callback for when an individual item has been loaded.",
            "itemtype": "method",
            "name": "onProgress",
            "access": "private",
            "tagname": "",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 114,
            "description": "Cancel the task",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the loader removed it from the queue successfully - \n\t\tfalse means that there is a 'load finished' event inbound \n\t\tfor the task manager"
            },
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 128,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task"
            },
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/PixiTask.js",
            "line": 138,
            "description": "Destroy this load task and don't use after this.",
            "itemtype": "method",
            "name": "destroy",
            "class": "PixiTask",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 20,
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 23,
            "description": "The unique id of the task",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 30,
            "description": "Callback to call when the task is completed",
            "itemtype": "property",
            "name": "callback",
            "type": "Function",
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 37,
            "description": "Bool to keep track if this has been destroyed",
            "itemtype": "property",
            "name": "_isDestroyed",
            "type": "Bool",
            "access": "protected",
            "tagname": "",
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 45,
            "description": "Make a task but don't load",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the task",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback to to call with the result, this task, and the\n       TaskManager that started it",
                    "type": "Function"
                }
            ],
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 58,
            "description": "Called from the task manager when a Task is finished",
            "itemtype": "method",
            "name": "done",
            "params": [
                {
                    "name": "result",
                    "description": "The resulting data from the return",
                    "type": "Type"
                },
                {
                    "name": "manager",
                    "description": "The reference to the manager",
                    "type": "TaskManager"
                }
            ],
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 72,
            "description": "Start the load. This implementation is a NOP.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to call when the load is done",
                    "type": "Function"
                }
            ],
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 83,
            "description": "Cancel the task - for use in inherited classes",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "If the cancel was successful",
                "type": "Bool"
            },
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 93,
            "description": "Get a string representation of this task",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of this task",
                "type": "String"
            },
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/Task.js",
            "line": 104,
            "description": "If this task has been __isDestroyed\nDon't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "Task",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 24,
            "description": "A task is about to start",
            "itemtype": "event",
            "name": "onItemAboutToLoad",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 30,
            "description": "A task is now starting\nevent onItemLoading",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 36,
            "description": "An task is done. The data of this event is the task's result.",
            "itemtype": "event",
            "name": "onItemLoaded",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 42,
            "description": "Task this event pertains to",
            "itemtype": "property",
            "name": "task",
            "type": "Task",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 49,
            "description": "The task result",
            "itemtype": "property",
            "name": "data",
            "type": "*",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 56,
            "description": "The type of event",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskEvent.js",
            "line": 63,
            "description": "Init the event",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "task",
                    "description": "The task attached to this event",
                    "type": "Task"
                },
                {
                    "name": "data",
                    "description": "The data result associated with this task",
                    "type": "*"
                }
            ],
            "class": "TaskEvent",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 24,
            "description": "Adds the specified event listener",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when the event is dispatched",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment",
                "type": "Function|object"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 33,
            "description": "Removes the specified event listener",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object",
                    "type": "Function|object"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 41,
            "description": "Removes all listeners for the specified type, or all listeners of all types",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 48,
            "description": "Dispatches the specified event",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "enventObj",
                    "description": "An object with a \"type\" property, or a string type",
                    "type": "Object|String"
                },
                {
                    "name": "target",
                    "description": "The object to use as the target property of the event object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if any listener returned true",
                "type": "Bool"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 57,
            "description": "Indicates whether there is at least one listener for the specified event type",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event",
                "type": "Bool"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 65,
            "description": "Createjs EventDispatcher method",
            "itemtype": "property",
            "name": "_listeners description",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 76,
            "description": "The current version of the state manager",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 85,
            "description": "Event dispatched when tasks are all done",
            "itemtype": "event",
            "name": "onAllTasksDone",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 92,
            "description": "Collection of all tasks",
            "itemtype": "property",
            "name": "tasks",
            "type": "Array",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 99,
            "description": "The current tasks",
            "itemtype": "property",
            "name": "_currentTaskes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 107,
            "description": "If we're paused and should therefore not automatically proceed to the\nnext task after each task completes",
            "itemtype": "property",
            "name": "paused",
            "type": "Bool",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 115,
            "description": "The number of tasks that are currently in progress",
            "itemtype": "property",
            "name": "_tasksInProgress",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 123,
            "description": "If the manager is destroyed",
            "itemtype": "property",
            "name": "_isDestroyed",
            "type": "Bool",
            "access": "private",
            "tagname": "",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 131,
            "description": "Convenience method to execute tasks without having to setup the event listener",
            "itemtype": "method",
            "name": "process",
            "static": 1,
            "params": [
                {
                    "name": "tasks",
                    "description": "The collection of tasks",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The callback",
                    "type": "Function"
                },
                {
                    "name": "startAll",
                    "description": "If we should start all tasks",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "immediateDestroy",
                    "description": "Destroy after load",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The instance of the task manager created",
                "type": "TaskManager"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 173,
            "description": "Initializes the task manager",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "tasks",
                    "description": "The optional array of tasks, we can also add this later",
                    "type": "Array"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 185,
            "description": "Convenience function to add a task",
            "itemtype": "method",
            "name": "addTask",
            "params": [
                {
                    "name": "task",
                    "description": "The task object to load",
                    "type": "Task"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 196,
            "description": "Add bunch of tasks",
            "itemtype": "method",
            "name": "addTasks",
            "params": [
                {
                    "name": "tasks",
                    "description": "Collection of tasks to add",
                    "type": "Array"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 209,
            "description": "Cancel and remove all tasks",
            "itemtype": "method",
            "name": "removeAll",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 239,
            "description": "Cancels all tasks with a given id",
            "itemtype": "method",
            "name": "cancelTask",
            "params": [
                {
                    "name": "taskId",
                    "description": "The task id to remove.",
                    "type": "String"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 271,
            "description": "Start the next task in the tasks list. When it is done, the\ntask's callback will be called.  If the manager is not paused after\nthe task's callback returns, the manager will start the next task.",
            "itemtype": "method",
            "name": "startNext",
            "return": {
                "description": "The task that was started or null if the list contained no\n        tasks to be processed",
                "type": "Task"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 314,
            "description": "Callback for when an task is done",
            "itemtype": "method",
            "name": "onTaskDone",
            "params": [
                {
                    "name": "result",
                    "description": "Result of the task",
                    "type": "*"
                },
                {
                    "name": "task",
                    "description": "Task that is done",
                    "type": "Task"
                }
            ],
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 353,
            "description": "Start the next task until there are no more tasks to start",
            "itemtype": "method",
            "name": "startAll",
            "return": {
                "description": "All tasks that were started",
                "type": "Array"
            },
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/tasks/TaskManager.js",
            "line": 376,
            "description": "We don't want to use the task manager after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "TaskManager",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/Positioner.js",
            "line": 18,
            "description": "Initial position of all layout items",
            "itemtype": "method",
            "name": "positionItems",
            "static": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "itemSettings",
                    "description": "JSON format with position information",
                    "type": "Object"
                },
                {
                    "name": "display",
                    "description": "The current display being positioned",
                    "type": "Display",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ],
            "class": "Positioner",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/Positioner.js",
            "line": 73,
            "description": "Create the polygon hit area for interface elements",
            "static": 1,
            "itemtype": "method",
            "name": "generateHitArea",
            "params": [
                {
                    "name": "hitArea",
                    "description": "One of the following: <br/>\n* An array of points for a polygon, e.g. \n\n\t\t[{x:0, y:0}, {x:0, y:20}, {x:20, y:0}]\n\n* An object describing a rectangle, e.g.\n\n\t\t{type:\"rect\", x:0, y:0, w:10, h:30}\n\n* An object describing an ellipse, where x and y are the center, e.g. \n\n\t\t{type:\"ellipse\", x:0, y:0, w:10, h:30}\n\n* An object describing a circle, where x and y are the center, e.g.\n\n\t\t{type:\"circle\", x:0, y:0, r:20}",
                    "type": "Object|Array"
                },
                {
                    "name": "scale",
                    "description": "The size to scale hitArea by",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "display",
                    "description": "The current display being positioned",
                    "type": "Display",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ],
            "return": {
                "description": "A geometric shape object for hit testing, either a Polygon, Rectangle, Ellipse, or Circle,\n    depending on the hitArea object. The shape will have a contains() function for hit testing.",
                "type": "Object"
            },
            "class": "Positioner",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/ScreenSettings.js",
            "line": 17,
            "description": "The screen width in pixels",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/ScreenSettings.js",
            "line": 23,
            "description": "The screen height in pixels",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/ScreenSettings.js",
            "line": 29,
            "description": "The screen pixel density (PPI)",
            "itemtype": "property",
            "name": "ppi",
            "type": "Number",
            "class": "ScreenSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 23,
            "description": "The reference to the interface item we're scaling",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_item",
            "type": "DisplayObject",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 30,
            "description": "The reference to the scale settings",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_settings",
            "type": "UIElementSettings",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 37,
            "description": "The original screen the item was designed for",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_designedScreen",
            "type": "ScreenSettings",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 44,
            "description": "The adapter for universal scale, rotation size access",
            "itemtype": "property",
            "name": "_adapter",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 54,
            "description": "Original X scale of the item",
            "itemtype": "property",
            "name": "origScaleX",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 61,
            "description": "The original Y scale of the item",
            "itemtype": "property",
            "name": "origScaleY",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 68,
            "description": "Original width in pixels",
            "itemtype": "property",
            "name": "origWidth",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 75,
            "description": "The original bounds of the item with x, y, right, bottom, width, height properties.\nUsed to determine the distance to each edge of the item from its origin",
            "itemtype": "property",
            "name": "origBounds",
            "type": "Object",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 84,
            "description": "Original horizontal margin in pixels",
            "itemtype": "property",
            "name": "origMarginHori",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 91,
            "description": "Original vertical margin in pixels",
            "itemtype": "property",
            "name": "origMarginVert",
            "type": "Number",
            "default": "0",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 140,
            "description": "Adjust the item scale and position, to reflect new screen",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "newScreen",
                    "description": "The current screen settings",
                    "type": "ScreenSettings"
                }
            ],
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElement.js",
            "line": 248,
            "description": "Destroy this item, don't use after this",
            "itemtype": "method",
            "name": "destroy",
            "class": "UIElement",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 16,
            "description": "What vertical screen location the item should be aligned to: \"top\", \"center\", \"bottom\"",
            "itemtype": "property",
            "name": "vertAlign",
            "type": "String",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 22,
            "description": "What horizontal screen location the item should be aligned to: \"left\", \"center\", \"right\"",
            "itemtype": "property",
            "name": "horiAlign",
            "type": "String",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 28,
            "description": "If this element should be aligned to the title safe area, not the actual screen",
            "itemtype": "property",
            "name": "titleSafe",
            "type": "Boolean",
            "default": "false",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 35,
            "description": "Maximum scale allowed in physical size",
            "itemtype": "property",
            "name": "maxScale",
            "type": "Number",
            "default": "1",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 42,
            "description": "Minimum scale allowed in physical size",
            "itemtype": "property",
            "name": "minScale",
            "type": "Number",
            "default": "1",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIElementSettings.js",
            "line": 49,
            "description": "If the UI element is centered horizontally",
            "itemtype": "property",
            "name": "centeredHorizontally",
            "type": "Boolean",
            "default": "false",
            "class": "UIElementSettings",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 26,
            "description": "The UI display object to update",
            "itemtype": "property",
            "name": "_parent",
            "type": "DisplayObject",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 33,
            "description": "The configuration for each items",
            "itemtype": "property",
            "name": "_items",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 40,
            "description": "The screen settings object, contains information about designed size",
            "itemtype": "property",
            "name": "_designedScreen",
            "type": "ScreenSettings",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 47,
            "description": "The adapter for universal scale, rotation size access",
            "itemtype": "property",
            "name": "_adapter",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 55,
            "description": "Get the adapter by display",
            "itemtype": "method",
            "name": "getAdapter",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "display",
                    "description": "The canvas renderer display",
                    "type": "Object"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 81,
            "description": "The current screen settings",
            "itemtype": "property",
            "name": "currentScreen",
            "type": "ScreenSettings",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 89,
            "description": "If the screensize has been set",
            "itemtype": "property",
            "name": "initialized",
            "type": "Boolean",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 97,
            "description": "Vertically align to the top",
            "itemtype": "property",
            "name": "ALIGN_TOP",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"top\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 107,
            "description": "Vertically align to the bottom",
            "itemtype": "property",
            "name": "ALIGN_BOTTOM",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"bottom\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 117,
            "description": "Horizontally align to the left",
            "itemtype": "property",
            "name": "ALIGN_LEFT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"left\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 127,
            "description": "Horizontally align to the right",
            "itemtype": "property",
            "name": "ALIGN_RIGHT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"right\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 137,
            "description": "Vertically or horizontally align to the center",
            "itemtype": "property",
            "name": "ALIGN_CENTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "default": "\"center\"",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 147,
            "description": "Create the scaler from JSON data",
            "itemtype": "method",
            "name": "fromJSON",
            "static": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "The UI display container",
                    "type": "DisplayObject"
                },
                {
                    "name": "jsonSettings",
                    "description": "The json of the designed settings {designedWidth:800, designedHeight:600, designedPPI:72}",
                    "type": "Object"
                },
                {
                    "name": "jsonItems",
                    "description": "The json items object where the keys are the name of the property on the parent and the value\n       is an object with keys of \"titleSafe\", \"minScale\", \"maxScale\", \"centerHorizontally\", \"align\"",
                    "type": "Object"
                },
                {
                    "name": "immediateDestroy",
                    "description": "If we should immediately cleanup the UIScaler after scaling items",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "display",
                    "description": "The display which to use for the scaler",
                    "type": "Display",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ],
            "return": {
                "description": "The scaler object that can be reused",
                "type": "UIScaler"
            },
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 212,
            "description": "Set the current screen settings. If the stage size changes at all, re-call this function",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "screenWidth",
                    "description": "The fullscreen width",
                    "type": "Number"
                },
                {
                    "name": "screenHeight",
                    "description": "The fullscreen height",
                    "type": "Number"
                },
                {
                    "name": "screenPPI",
                    "description": "The screen resolution density",
                    "type": "Number"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 228,
            "description": "Get the current scale of the screen",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "The current stage scale",
                "type": "Number"
            },
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 238,
            "description": "Manually add an item",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "The display object item to add",
                    "type": "Object"
                },
                {
                    "name": "vertAlign",
                    "description": "The vertical align of the item (cefault is center)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"center\""
                },
                {
                    "name": "horiAlign",
                    "description": "The horizontal align of the item (default is center)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"center\""
                },
                {
                    "name": "titleSafe",
                    "description": "If the item needs to be in the title safe area (default is false)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "minScale",
                    "description": "The minimum scale amount (default, scales the same size as the stage)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "maxScale",
                    "description": "The maximum scale amount (default, scales the same size as the stage)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "centeredHorizontally",
                    "description": "Makes sure that the center of the object was at the center of the screen, assuming an origin at the top left of the object",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 264,
            "description": "Scale a single background image according to the UIScaler.width and height",
            "itemtype": "method",
            "name": "resizeBackground",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "bitmap to scale",
                    "type": "Bitmap"
                },
                {
                    "name": "display",
                    "description": "The display which to use for the scaler",
                    "type": "Display",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 287,
            "description": "Convenience function to scale a collection of backgrounds",
            "itemtype": "method",
            "name": "resizeBackgrounds",
            "static": 1,
            "params": [
                {
                    "name": "bitmaps",
                    "description": "The collection of bitmap images",
                    "type": "Array"
                },
                {
                    "name": "display",
                    "description": "The display which to use for the scaler",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "Application.instance.display"
                }
            ],
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 302,
            "description": "Scale the UI items that have been registered to the current screen",
            "itemtype": "method",
            "name": "resize",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/ui/UIScaler.js",
            "line": 317,
            "description": "Destroy the scaler object",
            "itemtype": "method",
            "name": "destroy",
            "class": "UIScaler",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/CombinedCallback.js",
            "line": 32,
            "description": "Creates a CombinedCallback for use.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "call",
                    "description": "The callback to call when everything is complete.",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object to check as an additional completion dependency.",
                    "type": "*"
                },
                {
                    "name": "prop",
                    "description": "The property to check on obj. If obj[prop] is false, then it is considered complete.",
                    "type": "String"
                },
                {
                    "name": "callProp",
                    "description": "The property to set on obj if obj[prop] is true when the CombinedCallback is called.",
                    "type": "String"
                }
            ],
            "class": "CombinedCallback",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 16,
            "description": "If we have a console",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "hasConsole",
            "type": "Bool",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 24,
            "description": "The most general default debug level",
            "static": 1,
            "final": 1,
            "itemtype": "property",
            "name": "GENERAL",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 32,
            "description": "Log level for debug messages",
            "static": 1,
            "final": 1,
            "itemtype": "property",
            "name": "DEBUG",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 40,
            "description": "Log level for debug messages",
            "static": 1,
            "final": 1,
            "itemtype": "property",
            "name": "INFO",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 48,
            "description": "Log level for warning messages",
            "static": 1,
            "final": 1,
            "itemtype": "property",
            "name": "WARN",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 56,
            "description": "Log level for error messages",
            "static": 1,
            "final": 1,
            "itemtype": "property",
            "name": "ERROR",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 64,
            "description": "The minimum log level to show, by default it's set to\nshow all levels of logging.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "minLogLevel",
            "type": "Int",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 73,
            "description": "Boolean to turn on or off the debugging",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "enabled",
            "type": "Bool",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 81,
            "description": "The jQuery element to output debug messages to",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "output",
            "type": "JQuery",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 90,
            "description": "If the console is currently connected with JSConsole (jsconsole.com).",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "_isJSConsole",
            "type": "Bool",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 98,
            "description": "Browser port for the websocket browsers tend to block ports",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_NET_PORT",
            "type": "Int",
            "default": "1025",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 107,
            "description": "If the web socket is connected",
            "static": 1,
            "access": "private",
            "tagname": "",
            "default": "false",
            "itemtype": "property",
            "name": "_isConnected",
            "type": "Bool",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 116,
            "description": "The socket connection",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_socket",
            "type": "WebSocket",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 124,
            "description": "The current message object being sent to the `WebSocket`",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_messageObj",
            "type": "Object",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 132,
            "description": "The `WebSocket` message queue",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_messageQueue",
            "type": "Array",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 140,
            "description": "Connect to the `WebSocket`",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "The",
                    "description": "IP address to connect to",
                    "type": "String"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 171,
            "description": "Disconnect from the `WebSocket`",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "disconnect",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 186,
            "description": "Callback when the `WebSocket` is connected",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "onConnect",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 210,
            "description": "Global window error handler",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "globalErrorHandler",
            "params": [
                {
                    "name": "THe",
                    "description": "error message"
                },
                {
                    "name": "The",
                    "description": "url of the file"
                },
                {
                    "name": "The",
                    "description": "line within the file"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 225,
            "description": "Callback for when the websocket is closed",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "onClose",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 245,
            "description": "Sent to the output",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "output",
            "params": [
                {
                    "name": "level",
                    "description": "The log level",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Additional arguments",
                    "type": "String"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 261,
            "description": "Send a remote log message using the socket connection",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "remoteLog",
            "params": [
                {
                    "name": "message",
                    "description": "The message to send",
                    "type": "String"
                },
                {
                    "name": "level",
                    "description": "The log level to send",
                    "type": "Level"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 343,
            "description": "Log something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to log",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 364,
            "description": "Debug something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to debug",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 385,
            "description": "Info something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to info",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 406,
            "description": "Warn something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to warn",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 427,
            "description": "Error something in the console or remote",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "params",
                    "description": "The statement or object to error",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 448,
            "description": "Assert that something is true",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "truth",
                    "description": "As statement that is assumed true",
                    "type": "Bool"
                },
                {
                    "name": "params",
                    "description": "The message to error if the assert is false",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 465,
            "description": "Method to describe an object in the console",
            "static": 1,
            "itemtype": "method",
            "name": "dir",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "The object to describe in the console",
                    "type": "Object"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 480,
            "description": "Method to clear the console",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "clear",
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/Debug.js",
            "line": 496,
            "description": "Generate a stack track in the output",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "trace",
            "params": [
                {
                    "name": "params",
                    "description": "Optional parameters to log",
                    "type": "*"
                }
            ],
            "class": "Debug",
            "module": "window"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 20,
            "description": "The function to call when the delay is completed.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_callback",
            "type": "Function",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 26,
            "description": "The delay time, in milliseconds.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_delay",
            "type": "Int",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 32,
            "description": "The timer counting down from _delay, in milliseconds.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_timer",
            "type": "Int",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 38,
            "description": "If the DelayedCall should repeat itself automatically.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_repeat",
            "type": "Boolean",
            "default": "false",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 45,
            "description": "If the DelayedCall should destroy itself after completing",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_autoDestroy",
            "type": "Boolean",
            "default": "true",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 52,
            "description": "If the DelayedCall is currently paused (not stopped).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 67,
            "description": "The callback supplied to the Application for an update each frame.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "elapsed",
                    "description": "The time elapsed since the previous frame.",
                    "type": "Int"
                }
            ],
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 94,
            "description": "Restarts the DelayedCall, whether it is running or not.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "restart",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 109,
            "description": "Stops the DelayedCall, without destroying it.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 120,
            "description": "If the DelayedCall is paused or not.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/DelayedCall.js",
            "line": 148,
            "description": "Stops and cleans up the DelayedCall. Do not use it after calling\ndestroy().",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "DelayedCall",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 24,
            "description": "The name of the visibility change event for the browser",
            "itemtype": "property",
            "name": "_visibilityChange",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 32,
            "description": "Callback when the page becomes visible",
            "itemtype": "property",
            "name": "_onFocus",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 39,
            "description": "Callback when the page loses visibility",
            "itemtype": "property",
            "name": "_onBlur",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 46,
            "description": "The visibility toggle function",
            "itemtype": "property",
            "name": "_onToggle",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 71,
            "description": "Create new Page visibility",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "onFocus",
                    "description": "The callback when the page comes into focus",
                    "type": "Function"
                },
                {
                    "name": "onBlur",
                    "description": "The callback when the page loses focus",
                    "type": "Function"
                }
            ],
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/PageVisibility.js",
            "line": 109,
            "description": "Disable the detection",
            "itemtype": "method",
            "name": "destroy",
            "class": "PageVisibility",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/TimeUtils.js",
            "line": 25,
            "description": "This method gets timestamp in micromilliseconds for doing performance\nintense operations. Fallback support is to `Date.now()`. We aren't overridding\n`performance.now()` incase dependencies on this actually demand \nthe optimization and accuracy that performance actually provides.",
            "static": 1,
            "itemtype": "method",
            "name": "now",
            "return": {
                "description": "The number of micromilliseconds of the current timestamp",
                "type": "Int"
            },
            "class": "TimeUtils",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 13,
            "description": "The current version of the plugin",
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "readonly": "",
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 21,
            "description": "The full language dictionary containing all languages as keys",
            "itemtype": "property",
            "name": "_dict",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 29,
            "description": "The current set of translations to use",
            "itemtype": "property",
            "name": "_current",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 37,
            "description": "The currently selected locale",
            "itemtype": "property",
            "name": "_locale",
            "type": "String|Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 45,
            "description": "The fallback locale if no translation is found",
            "itemtype": "property",
            "name": "_fallbackLocale",
            "type": "String",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 53,
            "description": "Reference to the slice method",
            "itemtype": "property",
            "name": "_slice",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 61,
            "description": "Load the full dictionary containing all translations, this can also be used to load\nseparate JSON files which contain the translation. Each JSON file can contain keys\nmatching the locale which to use, or a single locale:\n\n\t// Load external json for all locales\n\tTranslate.load(\"lang.json\", function(){ \n\t\t// Finished loading\n\t});\n\t\n\t// Or load all locales directly\n\tvar dict = {\n\t\t\"en\" : {\n\t\t\t\"title\" : \"My Site\"\n\t\t}\n\t};\n\tTranslate.load(dict);\n\t\n\t// Or loading a single local externally\n\tTranslate.load(\"locale/en/lang.json\", \"en\", function(){\n\t\t// Finished loading\n\t});\n\t\n\t// Or load a single local directly\n\tvar dict = {\n\t\t\"title\" : \"My Site\"\n\t};\n\tTranslate.load(dict, \"en\");",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "dict",
                    "description": "The translation dictionary or file path to the translation dictionary",
                    "type": "Object|String"
                },
                {
                    "name": "langOrCallback",
                    "description": "Either the language code or the function callback for file loading",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The methond to callback if we're loading a file",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Translate object for chaining",
                "type": "Translate"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 142,
            "description": "The separator between the file name and the locale\nif using the filename translation. For instance, \"myfile.png\" becomes \"myfile_en-US.png\"\njoining \"myfile\" with the separator, locale then file extension.",
            "itemtype": "property",
            "name": "fileSeparator",
            "type": "String",
            "static": 1,
            "default": "\"_\"",
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 152,
            "description": "Remove all of the current dictionaries stored and the saved locale",
            "itemtype": "method",
            "name": "reset",
            "static": 1,
            "return": {
                "description": "The Translate object for chaining",
                "type": "Translate"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 168,
            "description": "Auto detect the locale based on the window navigator object",
            "itemtype": "method",
            "name": "autoDetect",
            "static": 1,
            "params": [
                {
                    "name": "useCountryLocale",
                    "description": "If we should use the country locale (e.g., \"en-US\")\n       as well as the language.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The new locale selected, returns a string if `useCountryLocale` is false.",
                "type": "Array|String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 186,
            "description": "The optional fallback locale to use in all cases",
            "itemtype": "property",
            "name": "fallbackLocale",
            "type": "String",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 204,
            "description": "The current ISO-639-1 two-letter language locale",
            "itemtype": "property",
            "name": "locale",
            "type": "String|Array",
            "static": 1,
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 222,
            "description": "Rebuild the current dictionary of translations to use",
            "itemtype": "method",
            "name": "refresh",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 250,
            "description": "Get the locales with the fallback",
            "itemtype": "method",
            "name": "getLocales",
            "static": 1,
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The collection of locales where the first index is the highest priority",
                "type": "Array"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 270,
            "description": "Looks the given string up in the dictionary and returns the translation if\none exists. If a translation is not found, returns the original word.",
            "itemtype": "method",
            "name": "translateString",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "The translation key look-up to translate.",
                    "type": "String"
                },
                {
                    "name": "params..",
                    "description": "params for using printf() on the string.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Translated word.",
                "type": "String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 303,
            "description": "Converts a file to a localized version using the first locale. If no locale\nis set, returns the original file.",
            "itemtype": "method",
            "name": "translateFile",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "file",
                    "description": "The file path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The updated file path containing local",
                "type": "String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 341,
            "description": "Substitutes %s with parameters given in list. %%s is used to escape %s.",
            "itemtype": "method",
            "name": "printf",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "String to perform printf on.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Array of arguments for printf.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Substituted string",
                "type": "String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 367,
            "description": "Allows you to translate a jQuery selector. See window._t for more information.\n\n\t$('h1')._t('some text')",
            "itemtype": "method",
            "name": "$.fn._t",
            "static": 1,
            "params": [
                {
                    "name": "key",
                    "description": "The string to translate .",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Params for using printf() on the string.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Chained and translated element(s).",
                "type": "Element"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 408,
            "description": "Allows you to swap an localized file path with jQuery selector. See window._f for more information.\n\n\t$('img#example')._f()",
            "itemtype": "method",
            "name": "$.fn._f",
            "static": 1,
            "params": [
                {
                    "name": "attr",
                    "description": "The attribute to change the file for",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"src\""
                }
            ],
            "return": {
                "description": "Chained and translated element(s).",
                "type": "Element"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 430,
            "description": "Looks the given string up in the dictionary and returns the translation if\none exists. If a translation is not found, returns the original word.",
            "itemtype": "method",
            "name": "window._t",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "The string to translate.",
                    "type": "String"
                },
                {
                    "name": "params*",
                    "description": "params for using printf() on the string.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Translated word.",
                "type": "String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/Translate.js",
            "line": 441,
            "description": "Converts a file to a localized version using the locale preferences. If no locale\nis set or no valid files are found, returns the original file.",
            "itemtype": "method",
            "name": "window._f",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "The file path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The updated file path containing local",
                "type": "String"
            },
            "class": "Translate",
            "module": "cloudkid"
        },
        {
            "file": "src/utils/namespace.js",
            "line": 15,
            "description": "Create the namespace and assing to the window",
            "example": [
                "\n\t\tvar SpriteUtils = function(){};\n\t\tnamespace('cloudkid').SpriteUtils = SpriteUtils;"
            ],
            "is_constructor": 1,
            "itemtype": "method",
            "name": "namespace",
            "params": [
                {
                    "name": "namespaceString",
                    "description": "Name space, for instance 'cloudkid.utils'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The namespace object attached to the current window",
                "type": "Object"
            },
            "class": "namespace",
            "module": "window"
        },
        {
            "file": "src/Application.js",
            "line": 44,
            "description": "Initialization options/query string parameters, these properties are read-only\nApplication properties like raf, fps, don't have any affect on the options object.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "readonly": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 52,
            "description": "Primary renderer for the application, for simply accessing Application.instance.display.stage;\nThe first display added becomes the primary display automatically.",
            "itemtype": "property",
            "name": "display",
            "type": "Display",
            "access": "public",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 72,
            "description": "The collection of function references to call when initializing the application\nthese are registered by external libraries that need to setup, destroyed\nfor instance MediaLoader",
            "itemtype": "property",
            "name": "_globalInit",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 82,
            "description": "The collection of function references to call when destroying the application\nthese are registered by external libraries that need to setup, destroyed\nfor instance MediaLoader",
            "itemtype": "property",
            "name": "_globalDestroy",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 92,
            "description": "The frame rate object",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_framerate",
            "type": "DOMObject",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 99,
            "description": "The number of ms since the last frame update",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lastFrameTime",
            "type": "Int",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 106,
            "description": "The last time since the last fps update",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_lastFPSUpdateTime",
            "type": "Int",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 113,
            "description": "The number of frames since the last fps update",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_frameCount",
            "type": "Int",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 120,
            "description": "The bound callback for listening to tick events",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_tickCallback",
            "type": "Function",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 127,
            "description": "If the current application is paushed",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_paused",
            "type": "Boolean",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 134,
            "description": "The id of the active requestAnimationFrame or setTimeout call.",
            "itemtype": "property",
            "name": "_tickId",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 141,
            "description": "If requestionAnimationFrame should be used",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_useRAF",
            "type": "Bool",
            "default": "false",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 149,
            "description": "The current internal frames per second",
            "itemtype": "property",
            "name": "_fps",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "default": "0",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 157,
            "description": "The number of milliseconds per frame",
            "itemtype": "property",
            "name": "_msPerFrame",
            "type": "Int",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 164,
            "description": "Dom element (or the window) to attach resize listeners and read the size from",
            "itemtype": "property",
            "name": "_resizeElement",
            "type": "DOMElement|Window|null",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 172,
            "description": "The aspect ratio of the primary display, as width / height.",
            "itemtype": "property",
            "name": "_aspectRatio",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 179,
            "description": "A PageVisibility object to automatically pause Application when the page is hidden.",
            "itemtype": "property",
            "name": "_pageVisibility",
            "type": "PageVisibility",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 187,
            "description": "Rendering plugins, in a dictionary by canvas id",
            "itemtype": "property",
            "name": "_displays",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 194,
            "description": "Default initialization options.",
            "itemtype": "property",
            "name": "_defaultOptions",
            "type": "Dictionary",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 216,
            "description": "A helper object to avoid object creation each resize event.",
            "itemtype": "property",
            "name": "_resizeHelper",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 223,
            "description": "Fired when initialization of the application is done",
            "itemtype": "event",
            "name": "init",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 229,
            "description": "Fired when an update is called, every frame update",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "elasped",
                    "description": "The number of milliseconds since the last frame update",
                    "type": "Int"
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 236,
            "description": "Fired when a resize is called",
            "itemtype": "event",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The width of the resize element",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "The height of the resize element",
                    "type": "Int"
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 244,
            "description": "Fired when the pause state is toggled",
            "itemtype": "event",
            "name": "pause",
            "params": [
                {
                    "name": "paused",
                    "description": "If the application is now paused",
                    "type": "Boolean"
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 251,
            "description": "Fired when the application becomes paused",
            "itemtype": "event",
            "name": "paused",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 257,
            "description": "Fired when the application resumes from a paused state",
            "itemtype": "event",
            "name": "resumed",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 263,
            "description": "Fired when the application is destroyed",
            "itemtype": "event",
            "name": "destroy",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 269,
            "description": "Libraries would register global initialization functions when they are created, e.g.\nApplication.registerInit(MediaLoader.init);",
            "itemtype": "method",
            "name": "registerInit",
            "params": [
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 281,
            "description": "Libraries would register global destroy functions when they are created or initialized, e.g.\nApplication.registerInit(MediaLoader.instance.destroy.bind(MediaLoader.instance));",
            "itemtype": "method",
            "name": "registerDestroy",
            "params": [
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 294,
            "description": "Get the singleton instance of the application",
            "itemtype": "property",
            "name": "instance",
            "type": "Application",
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 307,
            "description": "The internal initialization",
            "itemtype": "method",
            "name": "_internalInit",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 400,
            "description": "Define all of the query string parameters",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "parseQueryStringParams",
            "params": [
                {
                    "name": "output",
                    "description": "The object reference to update",
                    "type": "Object"
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 428,
            "description": "Override this to do post constructor initialization",
            "itemtype": "method",
            "name": "init",
            "access": "protected",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 435,
            "description": "Private listener for when the page is hidden.",
            "itemtype": "method",
            "name": "_onHidden",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 445,
            "description": "Private listener for when the page is shown.",
            "itemtype": "method",
            "name": "_onVisible",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 455,
            "description": "Pause updates at the application level",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 496,
            "description": "Makes a setTimeout with a time based on _msPerFrame and the amount of time spent in the\ncurrent tick.",
            "itemtype": "method",
            "name": "setTargetedTimeout",
            "params": [
                {
                    "name": "callback",
                    "description": "The tick function to call.",
                    "type": "Function"
                },
                {
                    "name": "timeInFrame=0",
                    "description": "The amount of time spent in the current tick in milliseconds.",
                    "type": "Int"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 513,
            "description": "Resize listener function, handles default resize behavior on all displays and dispatches a resize event",
            "itemtype": "method",
            "name": "_resize",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 541,
            "description": "Calculates the resizing of displays. By default, this limits the new size \nto the initial aspect ratio of the primary display. Override this function\nif you need variable aspect ratios.",
            "itemtype": "method",
            "name": "calculateDisplaySize",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "size",
                    "description": "A size object containing the width and height of the resized container.\n \t\t\t\tThe size parameter is also the output of the function, so the size properties are edited in place.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "The width of the resized container.",
                            "type": "Int"
                        },
                        {
                            "name": "height",
                            "description": "The height of the resized container.",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 567,
            "description": "Add a display. If this is the first display added, then it will be stored as this.display.",
            "itemtype": "method",
            "name": "addDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas element, this will be used to grab the Display later\n              also the Display should be the one to called document.getElementById(id)\n              and not the application sinc we don't care about the DOMElement as this point",
                    "type": "String"
                },
                {
                    "name": "displayConstructor",
                    "description": "The function to call to create the display instance",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Optional Display specific options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created display.",
                "type": "Display"
            },
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 594,
            "description": "Gets a specific renderer by the canvas id.",
            "itemtype": "method",
            "name": "getDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the canvas",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested display.",
                "type": "Display"
            },
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 605,
            "description": "Gets a specific renderer by the canvas id.",
            "itemtype": "method",
            "name": "getDisplays",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "The collection of Display objects",
                "type": "Array"
            },
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 619,
            "description": "Removes and destroys a display",
            "itemtype": "method",
            "name": "removeDisplay",
            "params": [
                {
                    "name": "id",
                    "description": "The Display's id (also the canvas ID)",
                    "type": "String"
                }
            ],
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 634,
            "description": "Property for getting/setting the target fps (when not using RAF)",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "fps",
            "type": "Number",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 652,
            "description": "Getter and setting for using Request Animation Frame",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "raf",
            "type": "Boolean",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 668,
            "description": "_tick would be bound in _tickCallback",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "Application",
            "module": "cloudkid"
        },
        {
            "file": "src/Application.js",
            "line": 715,
            "description": "Destroys the application, global libraries registered via Application.registerDestroy() and all active displays",
            "itemtype": "method",
            "name": "destroy",
            "class": "Application",
            "module": "cloudkid"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:104"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:120"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:138"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:223"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:244"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:330"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:361"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:394"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:420"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:446"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:503"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:524"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:546"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:568"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:587"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:598"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:611"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:624"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:746"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/Animator.js:760"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterClip.js:35"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:87"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:97"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:114"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:128"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:171"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:199"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:225"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/createjs/CharacterController.js:243"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/createjs/CreateJSDisplay.js:177"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/createjs/CreateJSDisplay.js:190"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/createjs/CreateJSDisplay.js:204"
        },
        {
            "message": "unknown tag: modules",
            "line": " src/displays/createjs/DisplayAdapter.js:1"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/generic/GenericDisplay.js:134"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/generic/GenericDisplay.js:147"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/generic/GenericDisplay.js:159"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:65"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:213"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/Animator.js:213"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:228"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/Animator.js:228"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:241"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:268"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:287"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:306"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:423"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/Animator.js:452"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/displays/pixi/AnimatorTimeline.js:26"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/displays/pixi/AnimatorTimeline.js:26"
        },
        {
            "message": "unknown tag: modules",
            "line": " src/displays/pixi/DisplayAdapter.js:1"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:220"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:234"
        },
        {
            "message": "unknown tag: internal",
            "line": " src/displays/pixi/PixiDisplay.js:248"
        },
        {
            "message": "unknown tag: proprty",
            "line": " src/loaders/LoaderQueueItem.js:79"
        },
        {
            "message": "unknown tag: modules",
            "line": " src/media/SoundContext.js:1"
        },
        {
            "message": "unknown tag: modules",
            "line": " src/media/SoundTask.js:1"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:24"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:33"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:41"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:48"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:57"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:158"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:168"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:179"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:199"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:206"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:217"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:224"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:254"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:279"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:302"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:318"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:326"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:333"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:347"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:355"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:366"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:389"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:413"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:424"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:435"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/BaseState.js:446"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateEvent.js:84"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:29"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:38"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:46"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:53"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:62"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:226"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:250"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:277"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:288"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:299"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:310"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:323"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:334"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:350"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:364"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:375"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:385"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:397"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:487"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:528"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:550"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:570"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:590"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:602"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/states/StateManager.js:624"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:47"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:72"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:82"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/FunctionTask.js:93"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:59"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:100"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:120"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:133"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:146"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:158"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/ListTask.js:168"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:67"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:90"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:107"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:120"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/LoadTask.js:131"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:45"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:58"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:72"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:83"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:93"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/Task.js:104"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskEvent.js:63"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:24"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:33"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:41"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:48"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:57"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:173"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:185"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:196"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:209"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:239"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:271"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:314"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:353"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/tasks/TaskManager.js:376"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " src/Application.js:6"
        },
        {
            "message": "Missing item type",
            "line": " src/data/SavedData.js:13"
        },
        {
            "message": "Missing item type",
            "line": " src/data/SavedData.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/createjs/DisplayAdapter.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/createjs/DragManager.js:21"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/createjs/DragManager.js:537"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/DisplayAdapter.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/DragManager.js:21"
        },
        {
            "message": "Missing item type\nSimple clamp function",
            "line": " src/displays/pixi/DragManager.js:411"
        },
        {
            "message": "Missing item type",
            "line": " src/displays/pixi/DragManager.js:526"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/CacheManager.js:19"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/LoaderQueueItem.js:13"
        },
        {
            "message": "Missing item type\nThe progress callback",
            "line": " src/loaders/LoaderQueueItem.js:79"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/MediaLoader.js:15"
        },
        {
            "message": "Missing item type\nReference to the private instance object",
            "line": " src/loaders/MediaLoader.js:18"
        },
        {
            "message": "Missing item type\nThe collection of LoaderQueueItems",
            "line": " src/loaders/MediaLoader.js:25"
        },
        {
            "message": "Missing item type\nThe collection of LoaderQueueItems by url",
            "line": " src/loaders/MediaLoader.js:31"
        },
        {
            "message": "Missing item type\nIf we can load",
            "line": " src/loaders/MediaLoader.js:58"
        },
        {
            "message": "Missing item type",
            "line": " src/loaders/MediaLoaderResult.js:21"
        },
        {
            "message": "Missing item type\n*  Array of SoundInstance objects that are being faded in or out.\n\t*  @property {Array} _fades\n\t*  @private",
            "line": " src/media/Sound.js:46"
        },
        {
            "message": "Missing item type",
            "line": " src/media/SoundContext.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/media/SoundTask.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/FunctionTask.js:25"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/FunctionTask.js:28"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/FunctionTask.js:31"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/ListTask.js:30"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/ListTask.js:33"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/LoadTask.js:30"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/LoadTask.js:33"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/LoadTask.js:36"
        },
        {
            "message": "Missing item type\nConstruct the load task",
            "line": " src/tasks/PixiTask.js:66"
        },
        {
            "message": "Missing item type",
            "line": " src/tasks/Task.js:20"
        },
        {
            "message": "Missing item type\nA task is now starting\nevent onItemLoading",
            "line": " src/tasks/TaskEvent.js:30"
        }
    ]
}